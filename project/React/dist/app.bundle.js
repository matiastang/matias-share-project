/*! For license information please see app.bundle.js.LICENSE.txt */
(()=>{var e={122:(e,t,n)=>{"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.r(t),n.d(t,{default:()=>r})},318:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}}},757:(e,t,n)=>{e.exports=n(666)},311:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(15),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,".footer_1Crzz{display:flex;justify-content:center;align-items:center;background-color:#5dc4fc}\n","",{version:3,sources:["webpack://./src/components/footer/footer.scss"],names:[],mappings:"AAAA,cACI,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CACnB,wBAAmC",sourcesContent:[".footer {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: rgb(93, 196, 252);\n}"],sourceRoot:""}]),i.locals={footer:"footer_1Crzz"};const l=i},785:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(15),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,".header_3TTTW{display:flex;justify-content:center;align-items:center;background-color:#5dc4fc}\n","",{version:3,sources:["webpack://./src/components/header/header.scss"],names:[],mappings:"AAAA,cACI,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CACnB,wBAAmC",sourcesContent:[".header {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: rgb(93, 196, 252);\n}"],sourceRoot:""}]),i.locals={header:"header_3TTTW"};const l=i},867:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(15),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,".home_1RKEH{display:flex;flex-direction:column;justify-content:center;align-items:flex-start}.home_1RKEH .img_1T9DL{height:50px}.home_1RKEH .itemDiv_2x0k5,.home_1RKEH .messageHandler_1K9VE{width:100%;display:flex;flex-direction:column;justify-content:space-around;align-items:center}.home_1RKEH .messageHandler_1K9VE{flex-direction:column}\n","",{version:3,sources:["webpack://./src/components/home/home.scss"],names:[],mappings:"AAAA,YACI,YAAa,CACb,qBAAsB,CACtB,sBAAuB,CACvB,sBAAuB,CAJ3B,uBAMQ,WAAY,CANpB,6DASQ,UAAW,CACX,YAAa,CACb,qBAAsB,CACtB,4BAA6B,CAC7B,kBAAmB,CAb3B,kCAiBQ,qBAAsB",sourcesContent:[".home {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n    .img {\n        height: 50px;\n    }\n    .itemDiv {\n        width: 100%;\n        display: flex;\n        flex-direction: column;\n        justify-content: space-around;\n        align-items: center;\n    }\n    .messageHandler {\n        @extend .itemDiv;\n        flex-direction: column;\n    }\n}"],sourceRoot:""}]),i.locals={home:"home_1RKEH",img:"img_1T9DL",itemDiv:"itemDiv_2x0k5",messageHandler:"messageHandler_1K9VE"};const l=i},37:(e,t,n)=>{"use strict";var r=n(318);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(584)).default;t.default=a},584:(e,t,n)=>{"use strict";var r=n(318);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(122)),o=r(n(369)),i=r(n(704)),l={lang:(0,a.default)({placeholder:"请选择日期",yearPlaceholder:"请选择年份",quarterPlaceholder:"请选择季度",monthPlaceholder:"请选择月份",weekPlaceholder:"请选择周",rangePlaceholder:["开始日期","结束日期"],rangeYearPlaceholder:["开始年份","结束年份"],rangeMonthPlaceholder:["开始月份","结束月份"],rangeWeekPlaceholder:["开始周","结束周"]},o.default),timePickerLocale:(0,a.default)({},i.default)};l.lang.ok="确 定";var u=l;t.default=u},754:(e,t,n)=>{"use strict";var r=n(318);t.Z=void 0;var a=r(n(925)).default;t.Z=a},925:(e,t,n)=>{"use strict";var r=n(318);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(219)),o=r(n(584)),i=r(n(704)),l=r(n(37)),u="${label}不是一个有效的${type}",c={locale:"zh-cn",Pagination:a.default,DatePicker:o.default,TimePicker:i.default,Calendar:l.default,global:{placeholder:"请选择"},Table:{filterTitle:"筛选",filterConfirm:"确定",filterReset:"重置",filterEmptyText:"无筛选项",selectAll:"全选当页",selectInvert:"反选当页",selectNone:"清空所有",selectionAll:"全选所有",sortTitle:"排序",expand:"展开行",collapse:"关闭行",triggerDesc:"点击降序",triggerAsc:"点击升序",cancelSort:"取消排序"},Modal:{okText:"确定",cancelText:"取消",justOkText:"知道了"},Popconfirm:{cancelText:"取消",okText:"确定"},Transfer:{searchPlaceholder:"请输入搜索内容",itemUnit:"项",itemsUnit:"项",remove:"删除",selectCurrent:"全选当页",removeCurrent:"删除当页",selectAll:"全选所有",removeAll:"删除全部",selectInvert:"反选当页"},Upload:{uploading:"文件上传中",removeFile:"删除文件",uploadError:"上传错误",previewFile:"预览文件",downloadFile:"下载文件"},Empty:{description:"暂无数据"},Icon:{icon:"图标"},Text:{edit:"编辑",copy:"复制",copied:"复制成功",expand:"展开"},PageHeader:{back:"返回"},Form:{optional:"（可选）",defaultValidateMessages:{default:"字段验证错误${label}",required:"请输入${label}",enum:"${label}必须是其中一个[${enum}]",whitespace:"${label}不能为空字符",date:{format:"${label}日期格式无效",parse:"${label}不能转换为日期",invalid:"${label}是一个无效日期"},types:{string:u,method:u,array:u,object:u,number:u,date:u,boolean:u,integer:u,float:u,regexp:u,email:u,url:u,hex:u},string:{len:"${label}须为${len}个字符",min:"${label}最少${min}个字符",max:"${label}最多${max}个字符",range:"${label}须在${min}-${max}字符之间"},number:{len:"${label}必须等于${len}",min:"${label}最小值为${min}",max:"${label}最大值为${max}",range:"${label}须在${min}-${max}之间"},array:{len:"须为${len}个${label}",min:"最少${min}个${label}",max:"最多${max}个${label}",range:"${label}数量须在${min}-${max}之间"},pattern:{mismatch:"${label}与模式不匹配${pattern}"}}},Image:{preview:"预览"}};t.default=c},704:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={placeholder:"请选择时间",rangePlaceholder:["开始时间","结束时间"]}},184:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function a(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var o=typeof n;if("string"===o||"number"===o)e.push(n);else if(Array.isArray(n)&&n.length){var i=a.apply(null,n);i&&e.push(i)}else if("object"===o)for(var l in n)r.call(n,l)&&n[l]&&e.push(l)}}return e.join(" ")}e.exports?(a.default=a,e.exports=a):void 0===(n=function(){return a}.apply(t,[]))||(e.exports=n)}()},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(r)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(a[i]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&a[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},15:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,a=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[1],i=a[3];if("function"==typeof btoa){var l=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),c="/*# ".concat(u," */"),s=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[o].concat(s).concat([c]).join("\n")}return[o].join("\n")}},679:(e,t,n)=>{"use strict";var r=n(864),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||a}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var a=p(n);a&&a!==h&&e(t,a,r)}var i=s(n);f&&(i=i.concat(f(n)));for(var l=u(t),m=u(n),v=0;v<i.length;++v){var g=i[v];if(!(o[g]||r&&r[g]||m&&m[g]||l&&l[g])){var y=d(n,g);try{c(t,g,y)}catch(e){}}}}return t}},186:e=>{var t=[],n=[];function r(e,r){if(r=r||{},void 0===e)throw new Error("insert-css: You need to provide a CSS string. Usage: insertCss(cssString[, options]).");var a,o=!0===r.prepend?"prepend":"append",i=void 0!==r.container?r.container:document.querySelector("head"),l=t.indexOf(i);return-1===l&&(l=t.push(i)-1,n[l]={}),void 0!==n[l]&&void 0!==n[l][o]?a=n[l][o]:(a=n[l][o]=function(){var e=document.createElement("style");return e.setAttribute("type","text/css"),e}(),"prepend"===o?i.insertBefore(a,i.childNodes[0]):i.appendChild(a)),65279===e.charCodeAt(0)&&(e=e.substr(1,e.length)),a.styleSheet?a.styleSheet.cssText+=e:a.textContent+=e,a}e.exports=r,e.exports.insertCss=r},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,o){for(var i,l,u=a(e),c=1;c<arguments.length;c++){for(var s in i=Object(arguments[c]))n.call(i,s)&&(u[s]=i[s]);if(t){l=t(i);for(var f=0;f<l.length;f++)r.call(i,l[f])&&(u[l[f]]=i[l[f]])}}return u}},703:(e,t,n)=>{"use strict";var r=n(414);function a(){}function o(){}o.resetWarningCache=a,e.exports=function(){function e(e,t,n,a,o,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:a};return n.PropTypes=n,n}},697:(e,t,n)=>{e.exports=n(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},219:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default={items_per_page:"条/页",jump_to:"跳至",jump_to_confirm:"确定",page:"页",prev_page:"上一页",next_page:"下一页",prev_5:"向前 5 页",next_5:"向后 5 页",prev_3:"向前 3 页",next_3:"向后 3 页"}},369:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={locale:"zh_CN",today:"今天",now:"此刻",backToToday:"返回今天",ok:"确定",timeSelect:"选择时间",dateSelect:"选择日期",weekSelect:"选择周",clear:"清除",month:"月",year:"年",previousMonth:"上个月 (翻页上键)",nextMonth:"下个月 (翻页下键)",monthSelect:"选择月份",yearSelect:"选择年份",decadeSelect:"选择年代",yearFormat:"YYYY年",dayFormat:"D日",dateFormat:"YYYY年M月D日",dateTimeFormat:"YYYY年M月D日 HH时mm分ss秒",previousYear:"上一年 (Control键加左方向键)",nextYear:"下一年 (Control键加右方向键)",previousDecade:"上一年代",nextDecade:"下一年代",previousCentury:"上一世纪",nextCentury:"下一世纪"}},448:(e,t,n)=>{"use strict";var r=n(294),a=n(418),o=n(840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var l=new Set,u={};function c(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function v(e,t,n,r,a,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var a=g.hasOwnProperty(t)?g[t]:null;(null!==a?0===a.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var k=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=60103,x=60106,C=60107,S=60108,P=60114,_=60109,F=60110,N=60112,O=60113,T=60120,M=60115,A=60116,L=60121,R=60128,j=60129,z=60130,I=60131;if("function"==typeof Symbol&&Symbol.for){var $=Symbol.for;E=$("react.element"),x=$("react.portal"),C=$("react.fragment"),S=$("react.strict_mode"),P=$("react.profiler"),_=$("react.provider"),F=$("react.context"),N=$("react.forward_ref"),O=$("react.suspense"),T=$("react.suspense_list"),M=$("react.memo"),A=$("react.lazy"),L=$("react.block"),$("react.scope"),R=$("react.opaque.id"),j=$("react.debug_trace_mode"),z=$("react.offscreen"),I=$("react.legacy_hidden")}var V,D="function"==typeof Symbol&&Symbol.iterator;function U(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=D&&e[D]||e["@@iterator"])?e:null}function H(e){if(void 0===V)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);V=t&&t[1]||""}return"\n"+V+e}var B=!1;function q(e,t){if(!e||B)return"";B=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var a=e.stack.split("\n"),o=r.stack.split("\n"),i=a.length-1,l=o.length-1;1<=i&&0<=l&&a[i]!==o[l];)l--;for(;1<=i&&0<=l;i--,l--)if(a[i]!==o[l]){if(1!==i||1!==l)do{if(i--,0>--l||a[i]!==o[l])return"\n"+a[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{B=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?H(e):""}function W(e){switch(e.tag){case 5:return H(e.type);case 16:return H("Lazy");case 13:return H("Suspense");case 19:return H("SuspenseList");case 0:case 2:case 15:return q(e.type,!1);case 11:return q(e.type.render,!1);case 22:return q(e.type._render,!1);case 1:return q(e.type,!0);default:return""}}function Y(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case C:return"Fragment";case x:return"Portal";case P:return"Profiler";case S:return"StrictMode";case O:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case F:return(e.displayName||"Context")+".Consumer";case _:return(e._context.displayName||"Context")+".Provider";case N:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case M:return Y(e.type);case L:return Y(e._render);case A:t=e._payload,e=e._init;try{return Y(e(t))}catch(e){}}return null}function K(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){e._valueTracker||(e._valueTracker=function(e){var t=Q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Z(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function X(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=K(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=K(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ae(e,t.type,n):t.hasOwnProperty("defaultValue")&&ae(e,t.type,K(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ae(e,t,n){"number"===t&&X(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function oe(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+K(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:K(n)}}function ce(e,t){var n=K(t.value),r=K(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function se(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me,ve=(me=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function ke(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var Ee=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function xe(e,t){if(t){if(Ee[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function Ce(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Se(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Pe=null,_e=null,Fe=null;function Ne(e){if(e=Jr(e)){if("function"!=typeof Pe)throw Error(i(280));var t=e.stateNode;t&&(t=ta(t),Pe(e.stateNode,e.type,t))}}function Oe(e){_e?Fe?Fe.push(e):Fe=[e]:_e=e}function Te(){if(_e){var e=_e,t=Fe;if(Fe=_e=null,Ne(e),t)for(e=0;e<t.length;e++)Ne(t[e])}}function Me(e,t){return e(t)}function Ae(e,t,n,r,a){return e(t,n,r,a)}function Le(){}var Re=Me,je=!1,ze=!1;function Ie(){null===_e&&null===Fe||(Le(),Te())}function $e(e,t){var n=e.stateNode;if(null===n)return null;var r=ta(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Ve=!1;if(f)try{var De={};Object.defineProperty(De,"passive",{get:function(){Ve=!0}}),window.addEventListener("test",De,De),window.removeEventListener("test",De,De)}catch(me){Ve=!1}function Ue(e,t,n,r,a,o,i,l,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var He=!1,Be=null,qe=!1,We=null,Ye={onError:function(e){He=!0,Be=e}};function Ke(e,t,n,r,a,o,i,l,u){He=!1,Be=null,Ue.apply(Ye,arguments)}function Qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ge(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ze(e){if(Qe(e)!==e)throw Error(i(188))}function Xe(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Qe(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var o=a.alternate;if(null===o){if(null!==(r=a.return)){n=r;continue}break}if(a.child===o.child){for(o=a.child;o;){if(o===n)return Ze(a),e;if(o===r)return Ze(a),t;o=o.sibling}throw Error(i(188))}if(n.return!==r.return)n=a,r=o;else{for(var l=!1,u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l){for(u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,at=!1,ot=[],it=null,lt=null,ut=null,ct=new Map,st=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,a){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:a,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":ut=null;break;case"pointerover":case"pointerout":ct.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":st.delete(t.pointerId)}}function mt(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e=pt(t,n,r,a,o),null!==t&&null!==(t=Jr(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function vt(e){var t=Xr(e.target);if(null!==t){var n=Qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ge(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){o.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Jr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){gt(e)&&n.delete(t)}function bt(){for(at=!1;0<ot.length;){var e=ot[0];if(null!==e.blockedOn){null!==(e=Jr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&ot.shift()}null!==it&&gt(it)&&(it=null),null!==lt&&gt(lt)&&(lt=null),null!==ut&&gt(ut)&&(ut=null),ct.forEach(yt),st.forEach(yt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,at||(at=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,bt)))}function kt(e){function t(t){return wt(t,e)}if(0<ot.length){wt(ot[0],e);for(var n=1;n<ot.length;n++){var r=ot[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==it&&wt(it,e),null!==lt&&wt(lt,e),null!==ut&&wt(ut,e),ct.forEach(t),st.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)vt(n),null===n.blockedOn&&ft.shift()}function Et(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var xt={animationend:Et("Animation","AnimationEnd"),animationiteration:Et("Animation","AnimationIteration"),animationstart:Et("Animation","AnimationStart"),transitionend:Et("Transition","TransitionEnd")},Ct={},St={};function Pt(e){if(Ct[e])return Ct[e];if(!xt[e])return e;var t,n=xt[e];for(t in n)if(n.hasOwnProperty(t)&&t in St)return Ct[e]=n[t];return e}f&&(St=document.createElement("div").style,"AnimationEvent"in window||(delete xt.animationend.animation,delete xt.animationiteration.animation,delete xt.animationstart.animation),"TransitionEvent"in window||delete xt.transitionend.transition);var _t=Pt("animationend"),Ft=Pt("animationiteration"),Nt=Pt("animationstart"),Ot=Pt("transitionend"),Tt=new Map,Mt=new Map,At=["abort","abort",_t,"animationEnd",Ft,"animationIteration",Nt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ot,"transitionEnd","waiting","waiting"];function Lt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],a=e[n+1];a="on"+(a[0].toUpperCase()+a.slice(1)),Mt.set(r,t),Tt.set(r,a),c(a,[r])}}(0,o.unstable_now)();var Rt=8;function jt(e){if(0!=(1&e))return Rt=15,1;if(0!=(2&e))return Rt=14,2;if(0!=(4&e))return Rt=13,4;var t=24&e;return 0!==t?(Rt=12,t):0!=(32&e)?(Rt=11,32):0!=(t=192&e)?(Rt=10,t):0!=(256&e)?(Rt=9,256):0!=(t=3584&e)?(Rt=8,t):0!=(4096&e)?(Rt=7,4096):0!=(t=4186112&e)?(Rt=6,t):0!=(t=62914560&e)?(Rt=5,t):67108864&e?(Rt=4,67108864):0!=(134217728&e)?(Rt=3,134217728):0!=(t=805306368&e)?(Rt=2,t):0!=(1073741824&e)?(Rt=1,1073741824):(Rt=8,e)}function zt(e,t){var n=e.pendingLanes;if(0===n)return Rt=0;var r=0,a=0,o=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==o)r=o,a=Rt=15;else if(0!=(o=134217727&n)){var u=o&~i;0!==u?(r=jt(u),a=Rt):0!=(l&=o)&&(r=jt(l),a=Rt)}else 0!=(o=n&~i)?(r=jt(o),a=Rt):0!==l&&(r=jt(l),a=Rt);if(0===r)return 0;if(r=n&((0>(r=31-Ht(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(jt(t),a<=Rt)return t;Rt=a}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-Ht(t)),r|=e[n],t&=~a;return r}function It(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function $t(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Vt(24&~t))?$t(10,t):e;case 10:return 0===(e=Vt(192&~t))?$t(8,t):e;case 8:return 0===(e=Vt(3584&~t))&&0===(e=Vt(4186112&~t))&&(e=512),e;case 2:return 0===(t=Vt(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Vt(e){return e&-e}function Dt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ut(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Ht(t)]=n}var Ht=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Bt(e)/qt|0)|0},Bt=Math.log,qt=Math.LN2,Wt=o.unstable_UserBlockingPriority,Yt=o.unstable_runWithPriority,Kt=!0;function Qt(e,t,n,r){je||Le();var a=Zt,o=je;je=!0;try{Ae(a,e,t,n,r)}finally{(je=o)||Ie()}}function Gt(e,t,n,r){Yt(Wt,Zt.bind(null,e,t,n,r))}function Zt(e,t,n,r){var a;if(Kt)if((a=0==(4&t))&&0<ot.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),ot.push(e);else{var o=Xt(e,t,n,r);if(null===o)a&&ht(e,r);else{if(a){if(-1<dt.indexOf(e))return e=pt(o,e,t,n,r),void ot.push(e);if(function(e,t,n,r,a){switch(t){case"focusin":return it=mt(it,e,t,n,r,a),!0;case"dragenter":return lt=mt(lt,e,t,n,r,a),!0;case"mouseover":return ut=mt(ut,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return ct.set(o,mt(ct.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,st.set(o,mt(st.get(o)||null,e,t,n,r,a)),!0}return!1}(o,e,t,n,r))return;ht(e,r)}Tr(e,t,r,null,n)}}}function Xt(e,t,n,r){var a=Se(r);if(null!==(a=Xr(a))){var o=Qe(a);if(null===o)a=null;else{var i=o.tag;if(13===i){if(null!==(a=Ge(o)))return a;a=null}else if(3===i){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;a=null}else o!==a&&(a=null)}}return Tr(e,t,r,a,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,a="value"in Jt?Jt.value:Jt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return tn=a.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function an(){return!0}function on(){return!1}function ln(e){function t(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?an:on,this.isPropagationStopped=on,this}return a(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=an)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=an)},persist:function(){},isPersistent:an}),t}var un,cn,sn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=ln(fn),pn=a({},fn,{view:0,detail:0}),hn=ln(pn),mn=a({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Pn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sn&&(sn&&"mousemove"===e.type?(un=e.screenX-sn.screenX,cn=e.screenY-sn.screenY):cn=un=0,sn=e),un)},movementY:function(e){return"movementY"in e?e.movementY:cn}}),vn=ln(mn),gn=ln(a({},mn,{dataTransfer:0})),yn=ln(a({},pn,{relatedTarget:0})),bn=ln(a({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=ln(a({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),kn=ln(a({},fn,{data:0})),En={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function Pn(){return Sn}var _n=ln(a({},pn,{key:function(e){if(e.key){var t=En[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Pn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Fn=ln(a({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Nn=ln(a({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Pn})),On=ln(a({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=ln(a({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Mn=[9,13,27,32],An=f&&"CompositionEvent"in window,Ln=null;f&&"documentMode"in document&&(Ln=document.documentMode);var Rn=f&&"TextEvent"in window&&!Ln,jn=f&&(!An||Ln&&8<Ln&&11>=Ln),zn=String.fromCharCode(32),In=!1;function $n(e,t){switch(e){case"keyup":return-1!==Mn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Vn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Dn=!1,Un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Un[e.type]:"textarea"===t}function Bn(e,t,n,r){Oe(r),0<(t=Ar(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var qn=null,Wn=null;function Yn(e){Sr(e,0)}function Kn(e){if(Z(ea(e)))return e}function Qn(e,t){if("change"===e)return t}var Gn=!1;if(f){var Zn;if(f){var Xn="oninput"in document;if(!Xn){var Jn=document.createElement("div");Jn.setAttribute("oninput","return;"),Xn="function"==typeof Jn.oninput}Zn=Xn}else Zn=!1;Gn=Zn&&(!document.documentMode||9<document.documentMode)}function er(){qn&&(qn.detachEvent("onpropertychange",tr),Wn=qn=null)}function tr(e){if("value"===e.propertyName&&Kn(Wn)){var t=[];if(Bn(t,Wn,e,Se(e)),e=Yn,je)e(t);else{je=!0;try{Me(e,t)}finally{je=!1,Ie()}}}}function nr(e,t,n){"focusin"===e?(er(),Wn=n,(qn=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(Wn)}function ar(e,t){if("click"===e)return Kn(t)}function or(e,t){if("input"===e||"change"===e)return Kn(t)}var ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},lr=Object.prototype.hasOwnProperty;function ur(e,t){if(ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!lr.call(t,n[r])||!ir(e[n[r]],t[n[r]]))return!1;return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function sr(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=X();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=X((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hr=f&&"documentMode"in document&&11>=document.documentMode,mr=null,vr=null,gr=null,yr=!1;function br(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yr||null==mr||mr!==X(r)||(r="selectionStart"in(r=mr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&ur(gr,r)||(gr=r,0<(r=Ar(vr,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}Lt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Lt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Lt(At,2);for(var wr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),kr=0;kr<wr.length;kr++)Mt.set(wr[kr],0);s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Er="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),xr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Er));function Cr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,o,l,u,c){if(Ke.apply(this,arguments),He){if(!He)throw Error(i(198));var s=Be;He=!1,Be=null,qe||(qe=!0,We=s)}}(r,t,void 0,e),e.currentTarget=null}function Sr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,c=l.currentTarget;if(l=l.listener,u!==o&&a.isPropagationStopped())break e;Cr(a,l,c),o=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,c=l.currentTarget,l=l.listener,u!==o&&a.isPropagationStopped())break e;Cr(a,l,c),o=u}}}if(qe)throw e=We,qe=!1,We=null,e}function Pr(e,t){var n=na(t),r=e+"__bubble";n.has(r)||(Or(t,e,2,!1),n.add(r))}var _r="_reactListening"+Math.random().toString(36).slice(2);function Fr(e){e[_r]||(e[_r]=!0,l.forEach((function(t){xr.has(t)||Nr(t,!1,e,null),Nr(t,!0,e,null)})))}function Nr(e,t,n,r){var a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,o=n;if("selectionchange"===e&&9!==n.nodeType&&(o=n.ownerDocument),null!==r&&!t&&xr.has(e)){if("scroll"!==e)return;a|=2,o=r}var i=na(o),l=e+"__"+(t?"capture":"bubble");i.has(l)||(t&&(a|=4),Or(o,e,a,t),i.add(l))}function Or(e,t,n,r){var a=Mt.get(t);switch(void 0===a?2:a){case 0:a=Qt;break;case 1:a=Gt;break;default:a=Zt}n=a.bind(null,t,n,e),a=void 0,!Ve||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Tr(e,t,n,r,a){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;i=i.return}for(;null!==l;){if(null===(i=Xr(l)))return;if(5===(u=i.tag)||6===u){r=o=i;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(ze)return e();ze=!0;try{Re(e,t,n)}finally{ze=!1,Ie()}}((function(){var r=o,a=Se(n),i=[];e:{var l=Tt.get(e);if(void 0!==l){var u=dn,c=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":u=_n;break;case"focusin":c="focus",u=yn;break;case"focusout":c="blur",u=yn;break;case"beforeblur":case"afterblur":u=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=vn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Nn;break;case _t:case Ft:case Nt:u=bn;break;case Ot:u=On;break;case"scroll":u=hn;break;case"wheel":u=Tn;break;case"copy":case"cut":case"paste":u=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Fn}var s=0!=(4&t),f=!s&&"scroll"===e,d=s?null!==l?l+"Capture":null:l;s=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=$e(h,d))&&s.push(Mr(h,m,p))),f)break;h=h.return}0<s.length&&(l=new u(l,c,null,n,a),i.push({event:l,listeners:s}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(c=n.relatedTarget||n.fromElement)||!Xr(c)&&!c[Gr])&&(u||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(c=(c=n.relatedTarget||n.toElement)?Xr(c):null)&&(c!==(f=Qe(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(u=null,c=r),u!==c)){if(s=vn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=Fn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:ea(u),p=null==c?l:ea(c),(l=new s(m,h+"leave",u,n,a)).target=f,l.relatedTarget=p,m=null,Xr(a)===r&&((s=new s(d,h+"enter",c,n,a)).target=p,s.relatedTarget=f,m=s),f=m,u&&c)e:{for(d=c,h=0,p=s=u;p;p=Lr(p))h++;for(p=0,m=d;m;m=Lr(m))p++;for(;0<h-p;)s=Lr(s),h--;for(;0<p-h;)d=Lr(d),p--;for(;h--;){if(s===d||null!==d&&s===d.alternate)break e;s=Lr(s),d=Lr(d)}s=null}else s=null;null!==u&&Rr(i,l,u,s,!1),null!==c&&null!==f&&Rr(i,f,c,s,!0)}if("select"===(u=(l=r?ea(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Qn;else if(Hn(l))if(Gn)v=or;else{v=rr;var g=nr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=ar);switch(v&&(v=v(e,r))?Bn(i,v,n,a):(g&&g(e,l,r),"focusout"===e&&(g=l._wrapperState)&&g.controlled&&"number"===l.type&&ae(l,"number",l.value)),g=r?ea(r):window,e){case"focusin":(Hn(g)||"true"===g.contentEditable)&&(mr=g,vr=r,gr=null);break;case"focusout":gr=vr=mr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,br(i,n,a);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":br(i,n,a)}var y;if(An)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Dn?$n(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(jn&&"ko"!==n.locale&&(Dn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Dn&&(y=nn()):(en="value"in(Jt=a)?Jt.value:Jt.textContent,Dn=!0)),0<(g=Ar(r,b)).length&&(b=new kn(b,e,null,n,a),i.push({event:b,listeners:g}),(y||null!==(y=Vn(n)))&&(b.data=y))),(y=Rn?function(e,t){switch(e){case"compositionend":return Vn(t);case"keypress":return 32!==t.which?null:(In=!0,zn);case"textInput":return(e=t.data)===zn&&In?null:e;default:return null}}(e,n):function(e,t){if(Dn)return"compositionend"===e||!An&&$n(e,t)?(e=nn(),tn=en=Jt=null,Dn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return jn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=Ar(r,"onBeforeInput")).length&&(a=new kn("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=y)}Sr(i,t)}))}function Mr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ar(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=$e(e,n))&&r.unshift(Mr(e,o,a)),null!=(o=$e(e,t))&&r.push(Mr(e,o,a))),e=e.return}return r}function Lr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Rr(e,t,n,r,a){for(var o=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,c=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==c&&(l=c,a?null!=(u=$e(n,o))&&i.unshift(Mr(n,u,l)):a||null!=(u=$e(n,o))&&i.push(Mr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function jr(){}var zr=null,Ir=null;function $r(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Vr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Dr="function"==typeof setTimeout?setTimeout:void 0,Ur="function"==typeof clearTimeout?clearTimeout:void 0;function Hr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Br(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function qr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Wr=0,Yr=Math.random().toString(36).slice(2),Kr="__reactFiber$"+Yr,Qr="__reactProps$"+Yr,Gr="__reactContainer$"+Yr,Zr="__reactEvents$"+Yr;function Xr(e){var t=e[Kr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Gr]||n[Kr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=qr(e);null!==e;){if(n=e[Kr])return n;e=qr(e)}return t}n=(e=n).parentNode}return null}function Jr(e){return!(e=e[Kr]||e[Gr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ea(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function ta(e){return e[Qr]||null}function na(e){var t=e[Zr];return void 0===t&&(t=e[Zr]=new Set),t}var ra=[],aa=-1;function oa(e){return{current:e}}function ia(e){0>aa||(e.current=ra[aa],ra[aa]=null,aa--)}function la(e,t){aa++,ra[aa]=e.current,e.current=t}var ua={},ca=oa(ua),sa=oa(!1),fa=ua;function da(e,t){var n=e.type.contextTypes;if(!n)return ua;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function pa(e){return null!=e.childContextTypes}function ha(){ia(sa),ia(ca)}function ma(e,t,n){if(ca.current!==ua)throw Error(i(168));la(ca,t),la(sa,n)}function va(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(i(108,Y(t)||"Unknown",o));return a({},n,r)}function ga(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||ua,fa=ca.current,la(ca,e),la(sa,sa.current),!0}function ya(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=va(e,t,fa),r.__reactInternalMemoizedMergedChildContext=e,ia(sa),ia(ca),la(ca,e)):ia(sa),la(sa,n)}var ba=null,wa=null,ka=o.unstable_runWithPriority,Ea=o.unstable_scheduleCallback,xa=o.unstable_cancelCallback,Ca=o.unstable_shouldYield,Sa=o.unstable_requestPaint,Pa=o.unstable_now,_a=o.unstable_getCurrentPriorityLevel,Fa=o.unstable_ImmediatePriority,Na=o.unstable_UserBlockingPriority,Oa=o.unstable_NormalPriority,Ta=o.unstable_LowPriority,Ma=o.unstable_IdlePriority,Aa={},La=void 0!==Sa?Sa:function(){},Ra=null,ja=null,za=!1,Ia=Pa(),$a=1e4>Ia?Pa:function(){return Pa()-Ia};function Va(){switch(_a()){case Fa:return 99;case Na:return 98;case Oa:return 97;case Ta:return 96;case Ma:return 95;default:throw Error(i(332))}}function Da(e){switch(e){case 99:return Fa;case 98:return Na;case 97:return Oa;case 96:return Ta;case 95:return Ma;default:throw Error(i(332))}}function Ua(e,t){return e=Da(e),ka(e,t)}function Ha(e,t,n){return e=Da(e),Ea(e,t,n)}function Ba(){if(null!==ja){var e=ja;ja=null,xa(e)}qa()}function qa(){if(!za&&null!==Ra){za=!0;var e=0;try{var t=Ra;Ua(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Ra=null}catch(t){throw null!==Ra&&(Ra=Ra.slice(e+1)),Ea(Fa,Ba),t}finally{za=!1}}}var Wa=k.ReactCurrentBatchConfig;function Ya(e,t){if(e&&e.defaultProps){for(var n in t=a({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ka=oa(null),Qa=null,Ga=null,Za=null;function Xa(){Za=Ga=Qa=null}function Ja(e){var t=Ka.current;ia(Ka),e.type._context._currentValue=t}function eo(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function to(e,t){Qa=e,Za=Ga=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ai=!0),e.firstContext=null)}function no(e,t){if(Za!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Za=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ga){if(null===Qa)throw Error(i(308));Ga=t,Qa.dependencies={lanes:0,firstContext:t,responders:null}}else Ga=Ga.next=t;return e._currentValue}var ro=!1;function ao(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function oo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function io(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function lo(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function uo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=i:o=o.next=i,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function co(e,t,n,r){var o=e.updateQueue;ro=!1;var i=o.firstBaseUpdate,l=o.lastBaseUpdate,u=o.shared.pending;if(null!==u){o.shared.pending=null;var c=u,s=c.next;c.next=null,null===l?i=s:l.next=s,l=c;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=s:d.next=s,f.lastBaseUpdate=c)}}if(null!==i){for(d=o.baseState,l=0,f=s=c=null;;){u=i.lane;var p=i.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(u=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,u);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(u="function"==typeof(h=m.payload)?h.call(p,d,u):h))break e;d=a({},d,u);break e;case 2:ro=!0}}null!==i.callback&&(e.flags|=32,null===(u=o.effects)?o.effects=[i]:u.push(i))}else p={eventTime:p,lane:u,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(s=f=p,c=d):f=f.next=p,l|=u;if(null===(i=i.next)){if(null===(u=o.shared.pending))break;i=u.next,u.next=null,o.lastBaseUpdate=u,o.shared.pending=null}}null===f&&(c=d),o.baseState=c,o.firstBaseUpdate=s,o.lastBaseUpdate=f,Rl|=l,e.lanes=l,e.memoizedState=d}}function so(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(i(191,a));a.call(r)}}}var fo=(new r.Component).refs;function po(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:a({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ho={isMounted:function(e){return!!(e=e._reactInternals)&&Qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=iu(),a=lu(e),o=io(r,a);o.payload=t,null!=n&&(o.callback=n),lo(e,o),uu(e,a,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=iu(),a=lu(e),o=io(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),lo(e,o),uu(e,a,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=iu(),r=lu(e),a=io(n,r);a.tag=2,null!=t&&(a.callback=t),lo(e,a),uu(e,r,n)}};function mo(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(a,o))}function vo(e,t,n){var r=!1,a=ua,o=t.contextType;return"object"==typeof o&&null!==o?o=no(o):(a=pa(t)?fa:ca.current,o=(r=null!=(r=t.contextTypes))?da(e,a):ua),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ho,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function go(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ho.enqueueReplaceState(t,t.state,null)}function yo(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=fo,ao(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=no(o):(o=pa(t)?fa:ca.current,a.context=da(e,o)),co(e,n,a,r),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(po(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&ho.enqueueReplaceState(a,a.state,null),co(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4)}var bo=Array.isArray;function wo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:((t=function(e){var t=r.refs;t===fo&&(t=r.refs={}),null===e?delete t[a]:t[a]=e})._stringRef=a,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function ko(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Eo(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=$u(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Hu(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=a(t,n.props)).ref=wo(e,t,n),r.return=e,r):((r=Vu(n.type,n.key,n.props,null,e.mode,r)).ref=wo(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Bu(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Du(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Hu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case E:return(n=Vu(t.type,t.key,t.props,null,e.mode,n)).ref=wo(e,null,t),n.return=e,n;case x:return(t=Bu(t,e.mode,n)).return=e,t}if(bo(t)||U(t))return(t=Du(t,e.mode,n,null)).return=e,t;ko(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case E:return n.key===a?n.type===C?f(e,t,n.props.children,r,a):c(e,t,n,r):null;case x:return n.key===a?s(e,t,n,r):null}if(bo(n)||U(n))return null!==a?null:f(e,t,n,r,null);ko(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case E:return e=e.get(null===r.key?n:r.key)||null,r.type===C?f(t,e,r.props.children,a,r.key):c(t,e,r,a);case x:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(bo(r)||U(r))return f(t,e=e.get(n)||null,r,a,null);ko(t,r)}return null}function m(a,i,l,u){for(var c=null,s=null,f=i,m=i=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var g=p(a,f,l[m],u);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(a,f),i=o(g,i,m),null===s?c=g:s.sibling=g,s=g,f=v}if(m===l.length)return n(a,f),c;if(null===f){for(;m<l.length;m++)null!==(f=d(a,l[m],u))&&(i=o(f,i,m),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(a,f);m<l.length;m++)null!==(v=h(f,a,m,l[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),i=o(v,i,m),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(a,e)})),c}function v(a,l,u,c){var s=U(u);if("function"!=typeof s)throw Error(i(150));if(null==(u=s.call(u)))throw Error(i(151));for(var f=s=null,m=l,v=l=0,g=null,y=u.next();null!==m&&!y.done;v++,y=u.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(a,m,y.value,c);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(a,m),l=o(b,l,v),null===f?s=b:f.sibling=b,f=b,m=g}if(y.done)return n(a,m),s;if(null===m){for(;!y.done;v++,y=u.next())null!==(y=d(a,y.value,c))&&(l=o(y,l,v),null===f?s=y:f.sibling=y,f=y);return s}for(m=r(a,m);!y.done;v++,y=u.next())null!==(y=h(m,a,v,y.value,c))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),l=o(y,l,v),null===f?s=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(a,e)})),s}return function(e,r,o,u){var c="object"==typeof o&&null!==o&&o.type===C&&null===o.key;c&&(o=o.props.children);var s="object"==typeof o&&null!==o;if(s)switch(o.$$typeof){case E:e:{for(s=o.key,c=r;null!==c;){if(c.key===s){switch(c.tag){case 7:if(o.type===C){n(e,c.sibling),(r=a(c,o.props.children)).return=e,e=r;break e}break;default:if(c.elementType===o.type){n(e,c.sibling),(r=a(c,o.props)).ref=wo(e,c,o),r.return=e,e=r;break e}}n(e,c);break}t(e,c),c=c.sibling}o.type===C?((r=Du(o.props.children,e.mode,u,o.key)).return=e,e=r):((u=Vu(o.type,o.key,o.props,null,e.mode,u)).ref=wo(e,r,o),u.return=e,e=u)}return l(e);case x:e:{for(c=o.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=a(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Bu(o,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=a(r,o)).return=e,e=r):(n(e,r),(r=Hu(o,e.mode,u)).return=e,e=r),l(e);if(bo(o))return m(e,r,o,u);if(U(o))return v(e,r,o,u);if(s&&ko(e,o),void 0===o&&!c)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,Y(e.type)||"Component"))}return n(e,r)}}var xo=Eo(!0),Co=Eo(!1),So={},Po=oa(So),_o=oa(So),Fo=oa(So);function No(e){if(e===So)throw Error(i(174));return e}function Oo(e,t){switch(la(Fo,t),la(_o,e),la(Po,So),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ia(Po),la(Po,t)}function To(){ia(Po),ia(_o),ia(Fo)}function Mo(e){No(Fo.current);var t=No(Po.current),n=pe(t,e.type);t!==n&&(la(_o,e),la(Po,n))}function Ao(e){_o.current===e&&(ia(Po),ia(_o))}var Lo=oa(0);function Ro(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var jo=null,zo=null,Io=!1;function $o(e,t){var n=zu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Vo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Do(e){if(Io){var t=zo;if(t){var n=t;if(!Vo(e,t)){if(!(t=Br(n.nextSibling))||!Vo(e,t))return e.flags=-1025&e.flags|2,Io=!1,void(jo=e);$o(jo,n)}jo=e,zo=Br(t.firstChild)}else e.flags=-1025&e.flags|2,Io=!1,jo=e}}function Uo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;jo=e}function Ho(e){if(e!==jo)return!1;if(!Io)return Uo(e),Io=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Vr(t,e.memoizedProps))for(t=zo;t;)$o(e,t),t=Br(t.nextSibling);if(Uo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){zo=Br(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}zo=null}}else zo=jo?Br(e.stateNode.nextSibling):null;return!0}function Bo(){zo=jo=null,Io=!1}var qo=[];function Wo(){for(var e=0;e<qo.length;e++)qo[e]._workInProgressVersionPrimary=null;qo.length=0}var Yo=k.ReactCurrentDispatcher,Ko=k.ReactCurrentBatchConfig,Qo=0,Go=null,Zo=null,Xo=null,Jo=!1,ei=!1;function ti(){throw Error(i(321))}function ni(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ir(e[n],t[n]))return!1;return!0}function ri(e,t,n,r,a,o){if(Qo=o,Go=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Yo.current=null===e||null===e.memoizedState?Ni:Oi,e=n(r,a),ei){o=0;do{if(ei=!1,!(25>o))throw Error(i(301));o+=1,Xo=Zo=null,t.updateQueue=null,Yo.current=Ti,e=n(r,a)}while(ei)}if(Yo.current=Fi,t=null!==Zo&&null!==Zo.next,Qo=0,Xo=Zo=Go=null,Jo=!1,t)throw Error(i(300));return e}function ai(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Xo?Go.memoizedState=Xo=e:Xo=Xo.next=e,Xo}function oi(){if(null===Zo){var e=Go.alternate;e=null!==e?e.memoizedState:null}else e=Zo.next;var t=null===Xo?Go.memoizedState:Xo.next;if(null!==t)Xo=t,Zo=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Zo=e).memoizedState,baseState:Zo.baseState,baseQueue:Zo.baseQueue,queue:Zo.queue,next:null},null===Xo?Go.memoizedState=Xo=e:Xo=Xo.next=e}return Xo}function ii(e,t){return"function"==typeof t?t(e):t}function li(e){var t=oi(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=Zo,a=r.baseQueue,o=n.pending;if(null!==o){if(null!==a){var l=a.next;a.next=o.next,o.next=l}r.baseQueue=a=o,n.pending=null}if(null!==a){a=a.next,r=r.baseState;var u=l=o=null,c=a;do{var s=c.lane;if((Qo&s)===s)null!==u&&(u=u.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),r=c.eagerReducer===e?c.eagerState:e(r,c.action);else{var f={lane:s,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===u?(l=u=f,o=r):u=u.next=f,Go.lanes|=s,Rl|=s}c=c.next}while(null!==c&&c!==a);null===u?o=r:u.next=l,ir(r,t.memoizedState)||(Ai=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function ui(e){var t=oi(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,o=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{o=e(o,l.action),l=l.next}while(l!==a);ir(o,t.memoizedState)||(Ai=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function ci(e,t,n){var r=t._getVersion;r=r(t._source);var a=t._workInProgressVersionPrimary;if(null!==a?e=a===r:(e=e.mutableReadLanes,(e=(Qo&e)===e)&&(t._workInProgressVersionPrimary=r,qo.push(t))),e)return n(t._source);throw qo.push(t),Error(i(350))}function si(e,t,n,r){var a=_l;if(null===a)throw Error(i(349));var o=t._getVersion,l=o(t._source),u=Yo.current,c=u.useState((function(){return ci(a,t,n)})),s=c[1],f=c[0];c=Xo;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var v=Go;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=s;var e=o(t._source);if(!ir(l,e)){e=n(t._source),ir(f,e)||(s(e),e=lu(v),a.mutableReadLanes|=e&a.pendingLanes),e=a.mutableReadLanes,a.entangledLanes|=e;for(var r=a.entanglements,i=e;0<i;){var u=31-Ht(i),c=1<<u;r[u]|=e,i&=~c}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=lu(v);a.mutableReadLanes|=r&a.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ir(h,n)&&ir(m,t)&&ir(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ii,lastRenderedState:f}).dispatch=s=_i.bind(null,Go,e),c.queue=e,c.baseQueue=null,f=ci(a,t,n),c.memoizedState=c.baseState=f),f}function fi(e,t,n){return si(oi(),e,t,n)}function di(e){var t=ai();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ii,lastRenderedState:e}).dispatch=_i.bind(null,Go,e),[t.memoizedState,e]}function pi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Go.updateQueue)?(t={lastEffect:null},Go.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function hi(e){return e={current:e},ai().memoizedState=e}function mi(){return oi().memoizedState}function vi(e,t,n,r){var a=ai();Go.flags|=e,a.memoizedState=pi(1|t,n,void 0,void 0===r?null:r)}function gi(e,t,n,r){var a=oi();r=void 0===r?null:r;var o=void 0;if(null!==Zo){var i=Zo.memoizedState;if(o=i.destroy,null!==r&&ni(r,i.deps))return void pi(t,n,o,r)}Go.flags|=e,a.memoizedState=pi(1|t,n,o,r)}function yi(e,t){return vi(516,4,e,t)}function bi(e,t){return gi(516,4,e,t)}function wi(e,t){return gi(4,2,e,t)}function ki(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ei(e,t,n){return n=null!=n?n.concat([e]):null,gi(4,2,ki.bind(null,t,e),n)}function xi(){}function Ci(e,t){var n=oi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ni(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Si(e,t){var n=oi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ni(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Pi(e,t){var n=Va();Ua(98>n?98:n,(function(){e(!0)})),Ua(97<n?97:n,(function(){var n=Ko.transition;Ko.transition=1;try{e(!1),t()}finally{Ko.transition=n}}))}function _i(e,t,n){var r=iu(),a=lu(e),o={lane:a,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?o.next=o:(o.next=i.next,i.next=o),t.pending=o,i=e.alternate,e===Go||null!==i&&i===Go)ei=Jo=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=i(l,n);if(o.eagerReducer=i,o.eagerState=u,ir(u,l))return}catch(e){}uu(e,a,r)}}var Fi={readContext:no,useCallback:ti,useContext:ti,useEffect:ti,useImperativeHandle:ti,useLayoutEffect:ti,useMemo:ti,useReducer:ti,useRef:ti,useState:ti,useDebugValue:ti,useDeferredValue:ti,useTransition:ti,useMutableSource:ti,useOpaqueIdentifier:ti,unstable_isNewReconciler:!1},Ni={readContext:no,useCallback:function(e,t){return ai().memoizedState=[e,void 0===t?null:t],e},useContext:no,useEffect:yi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,vi(4,2,ki.bind(null,t,e),n)},useLayoutEffect:function(e,t){return vi(4,2,e,t)},useMemo:function(e,t){var n=ai();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ai();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=_i.bind(null,Go,e),[r.memoizedState,e]},useRef:hi,useState:di,useDebugValue:xi,useDeferredValue:function(e){var t=di(e),n=t[0],r=t[1];return yi((function(){var t=Ko.transition;Ko.transition=1;try{r(e)}finally{Ko.transition=t}}),[e]),n},useTransition:function(){var e=di(!1),t=e[0];return hi(e=Pi.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ai();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},si(r,e,t,n)},useOpaqueIdentifier:function(){if(Io){var e=!1,t=function(e){return{$$typeof:R,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Wr++).toString(36))),Error(i(355))})),n=di(t)[1];return 0==(2&Go.mode)&&(Go.flags|=516,pi(5,(function(){n("r:"+(Wr++).toString(36))}),void 0,null)),t}return di(t="r:"+(Wr++).toString(36)),t},unstable_isNewReconciler:!1},Oi={readContext:no,useCallback:Ci,useContext:no,useEffect:bi,useImperativeHandle:Ei,useLayoutEffect:wi,useMemo:Si,useReducer:li,useRef:mi,useState:function(){return li(ii)},useDebugValue:xi,useDeferredValue:function(e){var t=li(ii),n=t[0],r=t[1];return bi((function(){var t=Ko.transition;Ko.transition=1;try{r(e)}finally{Ko.transition=t}}),[e]),n},useTransition:function(){var e=li(ii)[0];return[mi().current,e]},useMutableSource:fi,useOpaqueIdentifier:function(){return li(ii)[0]},unstable_isNewReconciler:!1},Ti={readContext:no,useCallback:Ci,useContext:no,useEffect:bi,useImperativeHandle:Ei,useLayoutEffect:wi,useMemo:Si,useReducer:ui,useRef:mi,useState:function(){return ui(ii)},useDebugValue:xi,useDeferredValue:function(e){var t=ui(ii),n=t[0],r=t[1];return bi((function(){var t=Ko.transition;Ko.transition=1;try{r(e)}finally{Ko.transition=t}}),[e]),n},useTransition:function(){var e=ui(ii)[0];return[mi().current,e]},useMutableSource:fi,useOpaqueIdentifier:function(){return ui(ii)[0]},unstable_isNewReconciler:!1},Mi=k.ReactCurrentOwner,Ai=!1;function Li(e,t,n,r){t.child=null===e?Co(t,null,n,r):xo(t,e.child,n,r)}function Ri(e,t,n,r,a){n=n.render;var o=t.ref;return to(t,a),r=ri(e,t,n,r,o,a),null===e||Ai?(t.flags|=1,Li(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,Ji(e,t,a))}function ji(e,t,n,r,a,o){if(null===e){var i=n.type;return"function"!=typeof i||Iu(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Vu(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,zi(e,t,i,r,a,o))}return i=e.child,0==(a&o)&&(a=i.memoizedProps,(n=null!==(n=n.compare)?n:ur)(a,r)&&e.ref===t.ref)?Ji(e,t,o):(t.flags|=1,(e=$u(i,r)).ref=t.ref,e.return=t,t.child=e)}function zi(e,t,n,r,a,o){if(null!==e&&ur(e.memoizedProps,r)&&e.ref===t.ref){if(Ai=!1,0==(o&a))return t.lanes=e.lanes,Ji(e,t,o);0!=(16384&e.flags)&&(Ai=!0)}return Vi(e,t,n,r,o)}function Ii(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},mu(0,n);else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},mu(0,e),null;t.memoizedState={baseLanes:0},mu(0,null!==o?o.baseLanes:n)}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,mu(0,r);return Li(e,t,a,n),t.child}function $i(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Vi(e,t,n,r,a){var o=pa(n)?fa:ca.current;return o=da(t,o),to(t,a),n=ri(e,t,n,r,o,a),null===e||Ai?(t.flags|=1,Li(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,Ji(e,t,a))}function Di(e,t,n,r,a){if(pa(n)){var o=!0;ga(t)}else o=!1;if(to(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),vo(t,n,r),yo(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,c=n.contextType;c="object"==typeof c&&null!==c?no(c):da(t,c=pa(n)?fa:ca.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==c)&&go(t,i,r,c),ro=!1;var d=t.memoizedState;i.state=d,co(t,r,i,a),u=t.memoizedState,l!==r||d!==u||sa.current||ro?("function"==typeof s&&(po(t,n,s,r),u=t.memoizedState),(l=ro||mo(t,n,l,r,d,u,c))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=c,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,oo(e,t),l=t.memoizedProps,c=t.type===t.elementType?l:Ya(t.type,l),i.props=c,f=t.pendingProps,d=i.context,u="object"==typeof(u=n.contextType)&&null!==u?no(u):da(t,u=pa(n)?fa:ca.current);var p=n.getDerivedStateFromProps;(s="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==u)&&go(t,i,r,u),ro=!1,d=t.memoizedState,i.state=d,co(t,r,i,a);var h=t.memoizedState;l!==f||d!==h||sa.current||ro?("function"==typeof p&&(po(t,n,p,r),h=t.memoizedState),(c=ro||mo(t,n,c,r,d,h,u))?(s||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=u,r=c):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Ui(e,t,n,r,o,a)}function Ui(e,t,n,r,a,o){$i(e,t);var i=0!=(64&t.flags);if(!r&&!i)return a&&ya(t,n,!1),Ji(e,t,o);r=t.stateNode,Mi.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=xo(t,e.child,null,o),t.child=xo(t,null,l,o)):Li(e,t,l,o),t.memoizedState=r.state,a&&ya(t,n,!0),t.child}function Hi(e){var t=e.stateNode;t.pendingContext?ma(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ma(0,t.context,!1),Oo(e,t.containerInfo)}var Bi,qi,Wi,Yi={dehydrated:null,retryLane:0};function Ki(e,t,n){var r,a=t.pendingProps,o=Lo.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&o)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(o|=1),la(Lo,1&o),null===e?(void 0!==a.fallback&&Do(t),e=a.children,o=a.fallback,i?(e=Qi(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Yi,e):"number"==typeof a.unstable_expectedLoadTime?(e=Qi(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Yi,t.lanes=33554432,e):((n=Uu({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(a=function(e,t,n,r,a){var o=t.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:n};return 0==(2&o)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=l,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=$u(i,l),null!==e?r=$u(e,r):(r=Du(r,o,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,a.children,a.fallback,n),i=t.child,o=e.child.memoizedState,i.memoizedState=null===o?{baseLanes:n}:{baseLanes:o.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=Yi,a):(n=function(e,t,n,r){var a=e.child;return e=a.sibling,n=$u(a,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,a.children,n),t.memoizedState=null,n))}function Qi(e,t,n,r){var a=e.mode,o=e.child;return t={mode:"hidden",children:t},0==(2&a)&&null!==o?(o.childLanes=0,o.pendingProps=t):o=Uu(t,a,0,null),n=Du(n,a,r,null),o.return=e,n.return=e,o.sibling=n,e.child=o,n}function Gi(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),eo(e.return,t)}function Zi(e,t,n,r,a,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a,lastEffect:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=a,i.lastEffect=o)}function Xi(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(Li(e,t,r.children,n),0!=(2&(r=Lo.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Gi(e,n);else if(19===e.tag)Gi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(la(Lo,r),0==(2&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Ro(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Zi(t,!1,a,n,o,t.lastEffect);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Ro(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Zi(t,!0,n,null,o,t.lastEffect);break;case"together":Zi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ji(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Rl|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=$u(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=$u(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function el(e,t){if(!Io)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function tl(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return pa(t.type)&&ha(),null;case 3:return To(),ia(sa),ia(ca),Wo(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Ho(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ao(t);var o=No(Fo.current);if(n=t.type,null!==e&&null!=t.stateNode)qi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=No(Po.current),Ho(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Kr]=t,r[Qr]=l,n){case"dialog":Pr("cancel",r),Pr("close",r);break;case"iframe":case"object":case"embed":Pr("load",r);break;case"video":case"audio":for(e=0;e<Er.length;e++)Pr(Er[e],r);break;case"source":Pr("error",r);break;case"img":case"image":case"link":Pr("error",r),Pr("load",r);break;case"details":Pr("toggle",r);break;case"input":ee(r,l),Pr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Pr("invalid",r);break;case"textarea":ue(r,l),Pr("invalid",r)}for(var c in xe(n,l),e=null,l)l.hasOwnProperty(c)&&(o=l[c],"children"===c?"string"==typeof o?r.textContent!==o&&(e=["children",o]):"number"==typeof o&&r.textContent!==""+o&&(e=["children",""+o]):u.hasOwnProperty(c)&&null!=o&&"onScroll"===c&&Pr("scroll",r));switch(n){case"input":G(r),re(r,l,!0);break;case"textarea":G(r),se(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=jr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(c=9===o.nodeType?o:o.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(n,{is:r.is}):(e=c.createElement(n),"select"===n&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,n),e[Kr]=t,e[Qr]=r,Bi(e,t),t.stateNode=e,c=Ce(n,r),n){case"dialog":Pr("cancel",e),Pr("close",e),o=r;break;case"iframe":case"object":case"embed":Pr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Er.length;o++)Pr(Er[o],e);o=r;break;case"source":Pr("error",e),o=r;break;case"img":case"image":case"link":Pr("error",e),Pr("load",e),o=r;break;case"details":Pr("toggle",e),o=r;break;case"input":ee(e,r),o=J(e,r),Pr("invalid",e);break;case"option":o=oe(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=a({},r,{value:void 0}),Pr("invalid",e);break;case"textarea":ue(e,r),o=le(e,r),Pr("invalid",e);break;default:o=r}xe(n,o);var s=o;for(l in s)if(s.hasOwnProperty(l)){var f=s[l];"style"===l?ke(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&ve(e,f):"children"===l?"string"==typeof f?("textarea"!==n||""!==f)&&ge(e,f):"number"==typeof f&&ge(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=f&&"onScroll"===l&&Pr("scroll",e):null!=f&&w(e,l,f,c))}switch(n){case"input":G(e),re(e,r,!1);break;case"textarea":G(e),se(e);break;case"option":null!=r.value&&e.setAttribute("value",""+K(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ie(e,!!r.multiple,l,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=jr)}$r(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Wi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=No(Fo.current),No(Po.current),Ho(t)?(r=t.stateNode,n=t.memoizedProps,r[Kr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Kr]=t,t.stateNode=r)}return null;case 13:return ia(Lo),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Ho(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Lo.current)?0===Ml&&(Ml=3):(0!==Ml&&3!==Ml||(Ml=4),null===_l||0==(134217727&Rl)&&0==(134217727&jl)||du(_l,Nl))),(r||n)&&(t.flags|=4),null);case 4:return To(),null===e&&Fr(t.stateNode.containerInfo),null;case 10:return Ja(t),null;case 17:return pa(t.type)&&ha(),null;case 19:if(ia(Lo),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(c=r.rendering))if(l)el(r,!1);else{if(0!==Ml||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(c=Ro(e))){for(t.flags|=64,el(r,!1),null!==(l=c.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(c=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=c.childLanes,l.lanes=c.lanes,l.child=c.child,l.memoizedProps=c.memoizedProps,l.memoizedState=c.memoizedState,l.updateQueue=c.updateQueue,l.type=c.type,e=c.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return la(Lo,1&Lo.current|2),t.child}e=e.sibling}null!==r.tail&&$a()>Vl&&(t.flags|=64,l=!0,el(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=Ro(c))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),el(r,!0),null===r.tail&&"hidden"===r.tailMode&&!c.alternate&&!Io)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*$a()-r.renderingStartTime>Vl&&1073741824!==n&&(t.flags|=64,l=!0,el(r,!1),t.lanes=33554432);r.isBackwards?(c.sibling=t.child,t.child=c):(null!==(n=r.last)?n.sibling=c:t.child=c,r.last=c)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=$a(),n.sibling=null,t=Lo.current,la(Lo,l?1&t|2:1&t),n):null;case 23:case 24:return vu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function nl(e){switch(e.tag){case 1:pa(e.type)&&ha();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(To(),ia(sa),ia(ca),Wo(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Ao(e),null;case 13:return ia(Lo),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ia(Lo),null;case 4:return To(),null;case 10:return Ja(e),null;case 23:case 24:return vu(),null;default:return null}}function rl(e,t){try{var n="",r=t;do{n+=W(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function al(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Bi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},qi=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,No(Po.current);var i,l=null;switch(n){case"input":o=J(e,o),r=J(e,r),l=[];break;case"option":o=oe(e,o),r=oe(e,r),l=[];break;case"select":o=a({},o,{value:void 0}),r=a({},r,{value:void 0}),l=[];break;case"textarea":o=le(e,o),r=le(e,r),l=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=jr)}for(f in xe(n,r),n=null,o)if(!r.hasOwnProperty(f)&&o.hasOwnProperty(f)&&null!=o[f])if("style"===f){var c=o[f];for(i in c)c.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in r){var s=r[f];if(c=null!=o?o[f]:void 0,r.hasOwnProperty(f)&&s!==c&&(null!=s||null!=c))if("style"===f)if(c){for(i in c)!c.hasOwnProperty(i)||s&&s.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in s)s.hasOwnProperty(i)&&c[i]!==s[i]&&(n||(n={}),n[i]=s[i])}else n||(l||(l=[]),l.push(f,n)),n=s;else"dangerouslySetInnerHTML"===f?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(l=l||[]).push(f,s)):"children"===f?"string"!=typeof s&&"number"!=typeof s||(l=l||[]).push(f,""+s):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=s&&"onScroll"===f&&Pr("scroll",e),l||c===s||(l=[])):"object"==typeof s&&null!==s&&s.$$typeof===R?s.toString():(l=l||[]).push(f,s))}n&&(l=l||[]).push("style",n);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},Wi=function(e,t,n,r){n!==r&&(t.flags|=4)};var ol="function"==typeof WeakMap?WeakMap:Map;function il(e,t,n){(n=io(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Bl||(Bl=!0,ql=r),al(0,t)},n}function ll(e,t,n){(n=io(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return al(0,t),r(a)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Wl?Wl=new Set([this]):Wl.add(this),al(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ul="function"==typeof WeakSet?WeakSet:Set;function cl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Au(e,t)}else t.current=null}function sl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ya(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Hr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(i(163))}function fl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var a=e;r=a.next,0!=(4&(a=a.tag))&&0!=(1&a)&&(Ou(n,e),Nu(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Ya(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&so(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}so(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&$r(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&kt(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(i(163))}function dl(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var a=n.memoizedProps.style;a=null!=a&&a.hasOwnProperty("display")?a.display:null,r.style.display=we("display",a)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function pl(e,t){if(wa&&"function"==typeof wa.onCommitFiberUnmount)try{wa.onCommitFiberUnmount(ba,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,a=r.destroy;if(r=r.tag,void 0!==a)if(0!=(4&r))Ou(t,n);else{r=t;try{a()}catch(e){Au(r,e)}}n=n.next}while(n!==e)}break;case 1:if(cl(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Au(t,e)}break;case 5:cl(t);break;case 4:bl(e,t)}}function hl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function ml(e){return 5===e.tag||3===e.tag||4===e.tag}function vl(e){e:{for(var t=e.return;null!==t;){if(ml(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ml(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?gl(e,n,t):yl(e,n,t)}function gl(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=jr));else if(4!==r&&null!==(e=e.child))for(gl(e,t,n),e=e.sibling;null!==e;)gl(e,t,n),e=e.sibling}function yl(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(yl(e,t,n),e=e.sibling;null!==e;)yl(e,t,n),e=e.sibling}function bl(e,t){for(var n,r,a=t,o=!1;;){if(!o){o=a.return;e:for(;;){if(null===o)throw Error(i(160));switch(n=o.stateNode,o.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}o=o.return}o=!0}if(5===a.tag||6===a.tag){e:for(var l=e,u=a,c=u;;)if(pl(l,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===u)break e;for(;null===c.sibling;){if(null===c.return||c.return===u)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}r?(l=n,u=a.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):n.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){n=a.stateNode.containerInfo,r=!0,a.child.return=a,a=a.child;continue}}else if(pl(e,a),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(o=!1)}a.sibling.return=a.return,a=a.sibling}}function wl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var a=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[Qr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ce(e,a),t=Ce(e,r),a=0;a<o.length;a+=2){var l=o[a],u=o[a+1];"style"===l?ke(n,u):"dangerouslySetInnerHTML"===l?ve(n,u):"children"===l?ge(n,u):w(n,l,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":ce(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(o=r.value)?ie(n,!!r.multiple,o,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,kt(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&($l=$a(),dl(t.child,!0)),void kl(t);case 19:return void kl(t);case 17:return;case 23:case 24:return void dl(t,null!==t.memoizedState)}throw Error(i(163))}function kl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ul),t.forEach((function(t){var r=Ru.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function El(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var xl=Math.ceil,Cl=k.ReactCurrentDispatcher,Sl=k.ReactCurrentOwner,Pl=0,_l=null,Fl=null,Nl=0,Ol=0,Tl=oa(0),Ml=0,Al=null,Ll=0,Rl=0,jl=0,zl=0,Il=null,$l=0,Vl=1/0;function Dl(){Vl=$a()+500}var Ul,Hl=null,Bl=!1,ql=null,Wl=null,Yl=!1,Kl=null,Ql=90,Gl=[],Zl=[],Xl=null,Jl=0,eu=null,tu=-1,nu=0,ru=0,au=null,ou=!1;function iu(){return 0!=(48&Pl)?$a():-1!==tu?tu:tu=$a()}function lu(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Va()?1:2;if(0===nu&&(nu=Ll),0!==Wa.transition){0!==ru&&(ru=null!==Il?Il.pendingLanes:0),e=nu;var t=4186112&~ru;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Va(),e=$t(0!=(4&Pl)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),nu)}function uu(e,t,n){if(50<Jl)throw Jl=0,eu=null,Error(i(185));if(null===(e=cu(e,t)))return null;Ut(e,t,n),e===_l&&(jl|=t,4===Ml&&du(e,Nl));var r=Va();1===t?0!=(8&Pl)&&0==(48&Pl)?pu(e):(su(e,n),0===Pl&&(Dl(),Ba())):(0==(4&Pl)||98!==r&&99!==r||(null===Xl?Xl=new Set([e]):Xl.add(e)),su(e,n)),Il=e}function cu(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function su(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,a=e.pingedLanes,o=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-Ht(l),c=1<<u,s=o[u];if(-1===s){if(0==(c&r)||0!=(c&a)){s=t,jt(c);var f=Rt;o[u]=10<=f?s+250:6<=f?s+5e3:-1}}else s<=t&&(e.expiredLanes|=c);l&=~c}if(r=zt(e,e===_l?Nl:0),t=Rt,0===r)null!==n&&(n!==Aa&&xa(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Aa&&xa(n)}15===t?(n=pu.bind(null,e),null===Ra?(Ra=[n],ja=Ea(Fa,qa)):Ra.push(n),n=Aa):n=14===t?Ha(99,pu.bind(null,e)):Ha(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),fu.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function fu(e){if(tu=-1,ru=nu=0,0!=(48&Pl))throw Error(i(327));var t=e.callbackNode;if(Fu()&&e.callbackNode!==t)return null;var n=zt(e,e===_l?Nl:0);if(0===n)return null;var r=n,a=Pl;Pl|=16;var o=bu();for(_l===e&&Nl===r||(Dl(),gu(e,r));;)try{Eu();break}catch(t){yu(e,t)}if(Xa(),Cl.current=o,Pl=a,null!==Fl?r=0:(_l=null,Nl=0,r=Ml),0!=(Ll&jl))gu(e,0);else if(0!==r){if(2===r&&(Pl|=64,e.hydrate&&(e.hydrate=!1,Hr(e.containerInfo)),0!==(n=It(e))&&(r=wu(e,n))),1===r)throw t=Al,gu(e,0),du(e,n),su(e,$a()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:Su(e);break;case 3:if(du(e,n),(62914560&n)===n&&10<(r=$l+500-$a())){if(0!==zt(e,0))break;if(((a=e.suspendedLanes)&n)!==n){iu(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=Dr(Su.bind(null,e),r);break}Su(e);break;case 4:if(du(e,n),(4186112&n)===n)break;for(r=e.eventTimes,a=-1;0<n;){var l=31-Ht(n);o=1<<l,(l=r[l])>a&&(a=l),n&=~o}if(n=a,10<(n=(120>(n=$a()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*xl(n/1960))-n)){e.timeoutHandle=Dr(Su.bind(null,e),n);break}Su(e);break;case 5:Su(e);break;default:throw Error(i(329))}}return su(e,$a()),e.callbackNode===t?fu.bind(null,e):null}function du(e,t){for(t&=~zl,t&=~jl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Ht(t),r=1<<n;e[n]=-1,t&=~r}}function pu(e){if(0!=(48&Pl))throw Error(i(327));if(Fu(),e===_l&&0!=(e.expiredLanes&Nl)){var t=Nl,n=wu(e,t);0!=(Ll&jl)&&(n=wu(e,t=zt(e,t)))}else n=wu(e,t=zt(e,0));if(0!==e.tag&&2===n&&(Pl|=64,e.hydrate&&(e.hydrate=!1,Hr(e.containerInfo)),0!==(t=It(e))&&(n=wu(e,t))),1===n)throw n=Al,gu(e,0),du(e,t),su(e,$a()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Su(e),su(e,$a()),null}function hu(e,t){var n=Pl;Pl&=-2,Pl|=8;try{return e(t)}finally{0===(Pl=n)&&(Dl(),Ba())}}function mu(e,t){la(Tl,Ol),Ol|=t,Ll|=t}function vu(){Ol=Tl.current,ia(Tl)}function gu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Ur(n)),null!==Fl)for(n=Fl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&ha();break;case 3:To(),ia(sa),ia(ca),Wo();break;case 5:Ao(r);break;case 4:To();break;case 13:case 19:ia(Lo);break;case 10:Ja(r);break;case 23:case 24:vu()}n=n.return}_l=e,Fl=$u(e.current,null),Nl=Ol=Ll=t,Ml=0,Al=null,zl=jl=Rl=0}function yu(e,t){for(;;){var n=Fl;try{if(Xa(),Yo.current=Fi,Jo){for(var r=Go.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}Jo=!1}if(Qo=0,Xo=Zo=Go=null,ei=!1,Sl.current=null,null===n||null===n.return){Ml=1,Al=t,Fl=null;break}e:{var o=e,i=n.return,l=n,u=t;if(t=Nl,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u;if(0==(2&l.mode)){var s=l.alternate;s?(l.updateQueue=s.updateQueue,l.memoizedState=s.memoizedState,l.lanes=s.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!=(1&Lo.current),d=i;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var g=new Set;g.add(c),d.updateQueue=g}else v.add(c);if(0==(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var y=io(-1,1);y.tag=2,lo(l,y)}l.lanes|=1;break e}u=void 0,l=t;var b=o.pingCache;if(null===b?(b=o.pingCache=new ol,u=new Set,b.set(c,u)):void 0===(u=b.get(c))&&(u=new Set,b.set(c,u)),!u.has(l)){u.add(l);var w=Lu.bind(null,o,c,l);c.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((Y(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ml&&(Ml=2),u=rl(u,l),d=i;do{switch(d.tag){case 3:o=u,d.flags|=4096,t&=-t,d.lanes|=t,uo(d,il(0,o,t));break e;case 1:o=u;var k=d.type,E=d.stateNode;if(0==(64&d.flags)&&("function"==typeof k.getDerivedStateFromError||null!==E&&"function"==typeof E.componentDidCatch&&(null===Wl||!Wl.has(E)))){d.flags|=4096,t&=-t,d.lanes|=t,uo(d,ll(d,o,t));break e}}d=d.return}while(null!==d)}Cu(n)}catch(e){t=e,Fl===n&&null!==n&&(Fl=n=n.return);continue}break}}function bu(){var e=Cl.current;return Cl.current=Fi,null===e?Fi:e}function wu(e,t){var n=Pl;Pl|=16;var r=bu();for(_l===e&&Nl===t||gu(e,t);;)try{ku();break}catch(t){yu(e,t)}if(Xa(),Pl=n,Cl.current=r,null!==Fl)throw Error(i(261));return _l=null,Nl=0,Ml}function ku(){for(;null!==Fl;)xu(Fl)}function Eu(){for(;null!==Fl&&!Ca();)xu(Fl)}function xu(e){var t=Ul(e.alternate,e,Ol);e.memoizedProps=e.pendingProps,null===t?Cu(e):Fl=t,Sl.current=null}function Cu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=tl(n,t,Ol)))return void(Fl=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Ol)||0==(4&n.mode)){for(var r=0,a=n.child;null!==a;)r|=a.lanes|a.childLanes,a=a.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=nl(t)))return n.flags&=2047,void(Fl=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Fl=t);Fl=t=e}while(null!==t);0===Ml&&(Ml=5)}function Su(e){var t=Va();return Ua(99,Pu.bind(null,e,t)),null}function Pu(e,t){do{Fu()}while(null!==Kl);if(0!=(48&Pl))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,a=r,o=e.pendingLanes&~a;e.pendingLanes=a,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=a,e.mutableReadLanes&=a,e.entangledLanes&=a,a=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<o;){var c=31-Ht(o),s=1<<c;a[c]=0,l[c]=-1,u[c]=-1,o&=~s}if(null!==Xl&&0==(24&r)&&Xl.has(e)&&Xl.delete(e),e===_l&&(Fl=_l=null,Nl=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(a=Pl,Pl|=32,Sl.current=null,zr=Kt,pr(l=dr())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(s=u.getSelection&&u.getSelection())&&0!==s.rangeCount){u=s.anchorNode,o=s.anchorOffset,c=s.focusNode,s=s.focusOffset;try{u.nodeType,c.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,h=0,m=0,v=l,g=null;t:for(;;){for(var y;v!==u||0!==o&&3!==v.nodeType||(d=f+o),v!==c||0!==s&&3!==v.nodeType||(p=f+s),3===v.nodeType&&(f+=v.nodeValue.length),null!==(y=v.firstChild);)g=v,v=y;for(;;){if(v===l)break t;if(g===u&&++h===o&&(d=f),g===c&&++m===s&&(p=f),null!==(y=v.nextSibling))break;g=(v=g).parentNode}v=y}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;Ir={focusedElem:l,selectionRange:u},Kt=!1,au=null,ou=!1,Hl=r;do{try{_u()}catch(e){if(null===Hl)throw Error(i(330));Au(Hl,e),Hl=Hl.nextEffect}}while(null!==Hl);au=null,Hl=r;do{try{for(l=e;null!==Hl;){var b=Hl.flags;if(16&b&&ge(Hl.stateNode,""),128&b){var w=Hl.alternate;if(null!==w){var k=w.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(1038&b){case 2:vl(Hl),Hl.flags&=-3;break;case 6:vl(Hl),Hl.flags&=-3,wl(Hl.alternate,Hl);break;case 1024:Hl.flags&=-1025;break;case 1028:Hl.flags&=-1025,wl(Hl.alternate,Hl);break;case 4:wl(Hl.alternate,Hl);break;case 8:bl(l,u=Hl);var E=u.alternate;hl(u),null!==E&&hl(E)}Hl=Hl.nextEffect}}catch(e){if(null===Hl)throw Error(i(330));Au(Hl,e),Hl=Hl.nextEffect}}while(null!==Hl);if(k=Ir,w=dr(),b=k.focusedElem,l=k.selectionRange,w!==b&&b&&b.ownerDocument&&fr(b.ownerDocument.documentElement,b)){null!==l&&pr(b)&&(w=l.start,void 0===(k=l.end)&&(k=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(k,b.value.length)):(k=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(k=k.getSelection(),u=b.textContent.length,E=Math.min(l.start,u),l=void 0===l.end?E:Math.min(l.end,u),!k.extend&&E>l&&(u=l,l=E,E=u),u=sr(b,E),o=sr(b,l),u&&o&&(1!==k.rangeCount||k.anchorNode!==u.node||k.anchorOffset!==u.offset||k.focusNode!==o.node||k.focusOffset!==o.offset)&&((w=w.createRange()).setStart(u.node,u.offset),k.removeAllRanges(),E>l?(k.addRange(w),k.extend(o.node,o.offset)):(w.setEnd(o.node,o.offset),k.addRange(w))))),w=[];for(k=b;k=k.parentNode;)1===k.nodeType&&w.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(k=w[b]).element.scrollLeft=k.left,k.element.scrollTop=k.top}Kt=!!zr,Ir=zr=null,e.current=n,Hl=r;do{try{for(b=e;null!==Hl;){var x=Hl.flags;if(36&x&&fl(b,Hl.alternate,Hl),128&x){w=void 0;var C=Hl.ref;if(null!==C){var S=Hl.stateNode;switch(Hl.tag){case 5:w=S;break;default:w=S}"function"==typeof C?C(w):C.current=w}}Hl=Hl.nextEffect}}catch(e){if(null===Hl)throw Error(i(330));Au(Hl,e),Hl=Hl.nextEffect}}while(null!==Hl);Hl=null,La(),Pl=a}else e.current=n;if(Yl)Yl=!1,Kl=e,Ql=t;else for(Hl=r;null!==Hl;)t=Hl.nextEffect,Hl.nextEffect=null,8&Hl.flags&&((x=Hl).sibling=null,x.stateNode=null),Hl=t;if(0===(r=e.pendingLanes)&&(Wl=null),1===r?e===eu?Jl++:(Jl=0,eu=e):Jl=0,n=n.stateNode,wa&&"function"==typeof wa.onCommitFiberRoot)try{wa.onCommitFiberRoot(ba,n,void 0,64==(64&n.current.flags))}catch(e){}if(su(e,$a()),Bl)throw Bl=!1,e=ql,ql=null,e;return 0!=(8&Pl)||Ba(),null}function _u(){for(;null!==Hl;){var e=Hl.alternate;ou||null===au||(0!=(8&Hl.flags)?Je(Hl,au)&&(ou=!0):13===Hl.tag&&El(e,Hl)&&Je(Hl,au)&&(ou=!0));var t=Hl.flags;0!=(256&t)&&sl(e,Hl),0==(512&t)||Yl||(Yl=!0,Ha(97,(function(){return Fu(),null}))),Hl=Hl.nextEffect}}function Fu(){if(90!==Ql){var e=97<Ql?97:Ql;return Ql=90,Ua(e,Tu)}return!1}function Nu(e,t){Gl.push(t,e),Yl||(Yl=!0,Ha(97,(function(){return Fu(),null})))}function Ou(e,t){Zl.push(t,e),Yl||(Yl=!0,Ha(97,(function(){return Fu(),null})))}function Tu(){if(null===Kl)return!1;var e=Kl;if(Kl=null,0!=(48&Pl))throw Error(i(331));var t=Pl;Pl|=32;var n=Zl;Zl=[];for(var r=0;r<n.length;r+=2){var a=n[r],o=n[r+1],l=a.destroy;if(a.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===o)throw Error(i(330));Au(o,e)}}for(n=Gl,Gl=[],r=0;r<n.length;r+=2){a=n[r],o=n[r+1];try{var u=a.create;a.destroy=u()}catch(e){if(null===o)throw Error(i(330));Au(o,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Pl=t,Ba(),!0}function Mu(e,t,n){lo(e,t=il(0,t=rl(n,t),1)),t=iu(),null!==(e=cu(e,1))&&(Ut(e,1,t),su(e,t))}function Au(e,t){if(3===e.tag)Mu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Mu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Wl||!Wl.has(r))){var a=ll(n,e=rl(t,e),1);if(lo(n,a),a=iu(),null!==(n=cu(n,1)))Ut(n,1,a),su(n,a);else if("function"==typeof r.componentDidCatch&&(null===Wl||!Wl.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Lu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=iu(),e.pingedLanes|=e.suspendedLanes&n,_l===e&&(Nl&n)===n&&(4===Ml||3===Ml&&(62914560&Nl)===Nl&&500>$a()-$l?gu(e,0):zl|=n),su(e,t)}function Ru(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Va()?1:2:(0===nu&&(nu=Ll),0===(t=Vt(62914560&~nu))&&(t=4194304))),n=iu(),null!==(e=cu(e,t))&&(Ut(e,t,n),su(e,n))}function ju(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function zu(e,t,n,r){return new ju(e,t,n,r)}function Iu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function $u(e,t){var n=e.alternate;return null===n?((n=zu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Vu(e,t,n,r,a,o){var l=2;if(r=e,"function"==typeof e)Iu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case C:return Du(n.children,a,o,t);case j:l=8,a|=16;break;case S:l=8,a|=1;break;case P:return(e=zu(12,n,t,8|a)).elementType=P,e.type=P,e.lanes=o,e;case O:return(e=zu(13,n,t,a)).type=O,e.elementType=O,e.lanes=o,e;case T:return(e=zu(19,n,t,a)).elementType=T,e.lanes=o,e;case z:return Uu(n,a,o,t);case I:return(e=zu(24,n,t,a)).elementType=I,e.lanes=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case _:l=10;break e;case F:l=9;break e;case N:l=11;break e;case M:l=14;break e;case A:l=16,r=null;break e;case L:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=zu(l,n,t,a)).elementType=e,t.type=r,t.lanes=o,t}function Du(e,t,n,r){return(e=zu(7,e,r,t)).lanes=n,e}function Uu(e,t,n,r){return(e=zu(23,e,r,t)).elementType=z,e.lanes=n,e}function Hu(e,t,n){return(e=zu(6,e,null,t)).lanes=n,e}function Bu(e,t,n){return(t=zu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function qu(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Dt(0),this.expirationTimes=Dt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Dt(0),this.mutableSourceEagerHydrationData=null}function Wu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Yu(e,t,n,r){var a=t.current,o=iu(),l=lu(a);e:if(n){t:{if(Qe(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(pa(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===n.tag){var c=n.type;if(pa(c)){n=va(n,c,u);break e}}n=u}else n=ua;return null===t.context?t.context=n:t.pendingContext=n,(t=io(o,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),lo(a,t),uu(a,l,o),l}function Ku(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Qu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Gu(e,t){Qu(e,t),(e=e.alternate)&&Qu(e,t)}function Zu(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new qu(e,t,null!=n&&!0===n.hydrate),t=zu(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ao(t),e[Gr]=n.current,Fr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var a=(t=r[e])._getVersion;a=a(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,a]:n.mutableSourceEagerHydrationData.push(t,a)}this._internalRoot=n}function Xu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ju(e,t,n,r,a){var o=n._reactRootContainer;if(o){var i=o._internalRoot;if("function"==typeof a){var l=a;a=function(){var e=Ku(i);l.call(e)}}Yu(t,i,e,a)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Zu(e,0,t?{hydrate:!0}:void 0)}(n,r),i=o._internalRoot,"function"==typeof a){var u=a;a=function(){var e=Ku(i);u.call(e)}}hu((function(){Yu(t,i,e,a)}))}return Ku(i)}Ul=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||sa.current)Ai=!0;else{if(0==(n&r)){switch(Ai=!1,t.tag){case 3:Hi(t),Bo();break;case 5:Mo(t);break;case 1:pa(t.type)&&ga(t);break;case 4:Oo(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var a=t.type._context;la(Ka,a._currentValue),a._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Ki(e,t,n):(la(Lo,1&Lo.current),null!==(t=Ji(e,t,n))?t.sibling:null);la(Lo,1&Lo.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Xi(e,t,n);t.flags|=64}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),la(Lo,Lo.current),r)break;return null;case 23:case 24:return t.lanes=0,Ii(e,t,n)}return Ji(e,t,n)}Ai=0!=(16384&e.flags)}else Ai=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=da(t,ca.current),to(t,n),a=ri(null,t,r,e,a,n),t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,pa(r)){var o=!0;ga(t)}else o=!1;t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,ao(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&po(t,r,l,e),a.updater=ho,t.stateNode=a,a._reactInternals=t,yo(t,r,e,n),t=Ui(null,t,r,!0,o,n)}else t.tag=0,Li(null,t,a,n),t=t.child;return t;case 16:a=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=(o=a._init)(a._payload),t.type=a,o=t.tag=function(e){if("function"==typeof e)return Iu(e)?1:0;if(null!=e){if((e=e.$$typeof)===N)return 11;if(e===M)return 14}return 2}(a),e=Ya(a,e),o){case 0:t=Vi(null,t,a,e,n);break e;case 1:t=Di(null,t,a,e,n);break e;case 11:t=Ri(null,t,a,e,n);break e;case 14:t=ji(null,t,a,Ya(a.type,e),r,n);break e}throw Error(i(306,a,""))}return t;case 0:return r=t.type,a=t.pendingProps,Vi(e,t,r,a=t.elementType===r?a:Ya(r,a),n);case 1:return r=t.type,a=t.pendingProps,Di(e,t,r,a=t.elementType===r?a:Ya(r,a),n);case 3:if(Hi(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,a=null!==(a=t.memoizedState)?a.element:null,oo(e,t),co(t,r,null,n),(r=t.memoizedState.element)===a)Bo(),t=Ji(e,t,n);else{if((o=(a=t.stateNode).hydrate)&&(zo=Br(t.stateNode.containerInfo.firstChild),jo=t,o=Io=!0),o){if(null!=(e=a.mutableSourceEagerHydrationData))for(a=0;a<e.length;a+=2)(o=e[a])._workInProgressVersionPrimary=e[a+1],qo.push(o);for(n=Co(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Li(e,t,r,n),Bo();t=t.child}return t;case 5:return Mo(t),null===e&&Do(t),r=t.type,a=t.pendingProps,o=null!==e?e.memoizedProps:null,l=a.children,Vr(r,a)?l=null:null!==o&&Vr(r,o)&&(t.flags|=16),$i(e,t),Li(e,t,l,n),t.child;case 6:return null===e&&Do(t),null;case 13:return Ki(e,t,n);case 4:return Oo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=xo(t,null,r,n):Li(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Ri(e,t,r,a=t.elementType===r?a:Ya(r,a),n);case 7:return Li(e,t,t.pendingProps,n),t.child;case 8:case 12:return Li(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,a=t.pendingProps,l=t.memoizedProps,o=a.value;var u=t.type._context;if(la(Ka,u._currentValue),u._currentValue=o,null!==l)if(u=l.value,0==(o=ir(u,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,o):1073741823))){if(l.children===a.children&&!sa.current){t=Ji(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var c=u.dependencies;if(null!==c){l=u.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&o)){1===u.tag&&((s=io(-1,n&-n)).tag=2,lo(u,s)),u.lanes|=n,null!==(s=u.alternate)&&(s.lanes|=n),eo(u.return,n),c.lanes|=n;break}s=s.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Li(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=(o=t.pendingProps).children,to(t,n),r=r(a=no(a,o.unstable_observedBits)),t.flags|=1,Li(e,t,r,n),t.child;case 14:return o=Ya(a=t.type,t.pendingProps),ji(e,t,a,o=Ya(a.type,o),r,n);case 15:return zi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:Ya(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,pa(r)?(e=!0,ga(t)):e=!1,to(t,n),vo(t,r,a),yo(t,r,a,n),Ui(null,t,r,!0,e,n);case 19:return Xi(e,t,n);case 23:case 24:return Ii(e,t,n)}throw Error(i(156,t.tag))},Zu.prototype.render=function(e){Yu(e,this._internalRoot,null,null)},Zu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Yu(null,e,null,(function(){t[Gr]=null}))},et=function(e){13===e.tag&&(uu(e,4,iu()),Gu(e,4))},tt=function(e){13===e.tag&&(uu(e,67108864,iu()),Gu(e,67108864))},nt=function(e){if(13===e.tag){var t=iu(),n=lu(e);uu(e,n,t),Gu(e,n)}},rt=function(e,t){return t()},Pe=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=ta(r);if(!a)throw Error(i(90));Z(r),ne(r,a)}}}break;case"textarea":ce(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},Me=function(e,t){var n=Pl;Pl|=1;try{return e(t)}finally{0===(Pl=n)&&(Dl(),Ba())}},Ae=function(e,t,n,r,a){var o=Pl;Pl|=4;try{return Ua(98,e.bind(null,t,n,r,a))}finally{0===(Pl=o)&&(Dl(),Ba())}},Le=function(){0==(49&Pl)&&(function(){if(null!==Xl){var e=Xl;Xl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,su(e,$a())}))}Ba()}(),Fu())},Re=function(e,t){var n=Pl;Pl|=2;try{return e(t)}finally{0===(Pl=n)&&(Dl(),Ba())}};var ec={findFiberByHostInstance:Xr,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},tc={bundleType:ec.bundleType,version:ec.version,rendererPackageName:ec.rendererPackageName,rendererConfig:ec.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:k.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Xe(e))?null:e.stateNode},findFiberByHostInstance:ec.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var nc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!nc.isDisabled&&nc.supportsFiber)try{ba=nc.inject(tc),wa=nc}catch(me){}}t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xu(t))throw Error(i(200));return Wu(e,t,null,n)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return null===(e=Xe(t))?null:e.stateNode},t.render=function(e,t,n){if(!Xu(t))throw Error(i(200));return Ju(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Xu(e))throw Error(i(40));return!!e._reactRootContainer&&(hu((function(){Ju(null,null,e,!1,(function(){e._reactRootContainer=null,e[Gr]=null}))})),!0)}},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,a=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,s=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,g=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function k(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case s:case f:case o:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case c:case d:case v:case m:case u:return e;default:return t}}case a:return t}}}function E(e){return k(e)===f}t.AsyncMode=s,t.ConcurrentMode=f,t.ContextConsumer=c,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=o,t.Lazy=v,t.Memo=m,t.Portal=a,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return E(e)||k(e)===s},t.isConcurrentMode=E,t.isContextConsumer=function(e){return k(e)===c},t.isContextProvider=function(e){return k(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return k(e)===d},t.isFragment=function(e){return k(e)===o},t.isLazy=function(e){return k(e)===v},t.isMemo=function(e){return k(e)===m},t.isPortal=function(e){return k(e)===a},t.isProfiler=function(e){return k(e)===l},t.isStrictMode=function(e){return k(e)===i},t.isSuspense=function(e){return k(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===f||e===l||e===i||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===u||e.$$typeof===c||e.$$typeof===d||e.$$typeof===y||e.$$typeof===b||e.$$typeof===w||e.$$typeof===g)},t.typeOf=k},864:(e,t,n)=>{"use strict";e.exports=n(921)},585:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},658:(e,t,n)=>{var r=n(585);e.exports=function e(t,n,a){return r(n)||(a=n||a,n=[]),a=a||{},t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(t,n):r(t)?function(t,n,r){for(var a=[],o=0;o<t.length;o++)a.push(e(t[o],n,r).source);return s(new RegExp("(?:"+a.join("|")+")",f(r)),n)}(t,n,a):function(e,t,n){return d(o(e,n),t,n)}(t,n,a)},e.exports.parse=o,e.exports.compile=function(e,t){return l(o(e,t),t)},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var a=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function o(e,t){for(var n,r=[],o=0,i=0,l="",s=t&&t.delimiter||"/";null!=(n=a.exec(e));){var f=n[0],d=n[1],p=n.index;if(l+=e.slice(i,p),i=p+f.length,d)l+=d[1];else{var h=e[i],m=n[2],v=n[3],g=n[4],y=n[5],b=n[6],w=n[7];l&&(r.push(l),l="");var k=null!=m&&null!=h&&h!==m,E="+"===b||"*"===b,x="?"===b||"*"===b,C=n[2]||s,S=g||y;r.push({name:v||o++,prefix:m||"",delimiter:C,optional:x,repeat:E,partial:k,asterisk:!!w,pattern:S?c(S):w?".*":"[^"+u(C)+"]+?"})}}return i<e.length&&(l+=e.substr(i)),l&&r.push(l),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function l(e,t){for(var n=new Array(e.length),a=0;a<e.length;a++)"object"==typeof e[a]&&(n[a]=new RegExp("^(?:"+e[a].pattern+")$",f(t)));return function(t,a){for(var o="",l=t||{},u=(a||{}).pretty?i:encodeURIComponent,c=0;c<e.length;c++){var s=e[c];if("string"!=typeof s){var f,d=l[s.name];if(null==d){if(s.optional){s.partial&&(o+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(d)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=u(d[p]),!n[c].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");o+=(0===p?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(d),!n[c].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');o+=s.prefix+f}}else o+=s}return o}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var a=(n=n||{}).strict,o=!1!==n.end,i="",l=0;l<e.length;l++){var c=e[l];if("string"==typeof c)i+=u(c);else{var d=u(c.prefix),p="(?:"+c.pattern+")";t.push(c),c.repeat&&(p+="(?:"+d+p+")*"),i+=p=c.optional?c.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=u(n.delimiter||"/"),m=i.slice(-h.length)===h;return a||(i=(m?i.slice(0,-h.length):i)+"(?:"+h+"(?=$))?"),i+=o?"$":a&&m?"":"(?="+h+"|$)",s(new RegExp("^"+i,f(n)),t)}},408:(e,t,n)=>{"use strict";var r=n(418),a=60103,o=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,l=60110,u=60112;t.Suspense=60113;var c=60115,s=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;a=f("react.element"),o=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),l=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),c=f("react.memo"),s=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var b=y.prototype=new g;b.constructor=y,r(b,v.prototype),b.isPureReactComponent=!0;var w={current:null},k=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,n){var r,o={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,r)&&!E.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:a,type:e,key:i,ref:l,props:o,_owner:w.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var S=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function _(e,t,n,r,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case a:case o:u=!0}}if(u)return i=i(u=e),e=""===r?"."+P(u,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(S,"$&/")+"/"),_(i,t,n,"",(function(e){return e}))):null!=i&&(C(i)&&(i=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(S,"$&/")+"/")+e)),t.push(i)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var c=0;c<e.length;c++){var s=r+P(l=e[c],c);u+=_(l,t,n,s,i)}else if("function"==typeof(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=s.call(e),c=0;!(l=e.next()).done;)u+=_(l=l.value,t,n,s=r+P(l,c++),i);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function F(e,t,n){if(null==e)return e;var r=[],a=0;return _(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function N(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var O={current:null};function T(){var e=O.current;if(null===e)throw Error(p(321));return e}var M={ReactCurrentDispatcher:O,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:F,forEach:function(e,t,n){F(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return F(e,(function(){t++})),t},toArray:function(e){return F(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var o=r({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)k.call(t,s)&&!E.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];o.children=c}return{$$typeof:a,type:e.type,key:i,ref:l,props:o,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=x,t.createFactory=function(e){var t=x.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:s,_payload:{_status:-1,_result:e},_init:N}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return T().useCallback(e,t)},t.useContext=function(e,t){return T().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return T().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return T().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return T().useLayoutEffect(e,t)},t.useMemo=function(e,t){return T().useMemo(e,t)},t.useReducer=function(e,t,n){return T().useReducer(e,t,n)},t.useRef=function(e){return T().useRef(e)},t.useState=function(e){return T().useState(e)},t.version="17.0.1"},294:(e,t,n)=>{"use strict";e.exports=n(408)},666:e=>{var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",i=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function c(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,o=Object.create(a.prototype),i=new F(r||[]);return o._invoke=function(e,t,n){var r=f;return function(a,o){if(r===p)throw new Error("Generator is already running");if(r===h){if("throw"===a)throw o;return O()}for(n.method=a,n.arg=o;;){var i=n.delegate;if(i){var l=S(i,n);if(l){if(l===m)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var u=s(e,t,n);if("normal"===u.type){if(r=n.done?h:d,u.arg===m)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=h,n.method="throw",n.arg=u.arg)}}}(e,n,i),o}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f="suspendedStart",d="suspendedYield",p="executing",h="completed",m={};function v(){}function g(){}function y(){}var b={};b[o]=function(){return this};var w=Object.getPrototypeOf,k=w&&w(w(N([])));k&&k!==n&&r.call(k,o)&&(b=k);var E=y.prototype=v.prototype=Object.create(b);function x(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(a,o,i,l){var u=s(e[a],e,o);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==typeof f&&r.call(f,"__await")?t.resolve(f.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(f).then((function(e){c.value=e,i(c)}),(function(e){return n("throw",e,i,l)}))}l(u.arg)}var a;this._invoke=function(e,r){function o(){return new t((function(t,a){n(e,r,t,a)}))}return a=a?a.then(o,o):o()}}function S(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,S(e,n),"throw"===n.method))return m;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return m}var a=s(r,e.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,m;var o=a.arg;return o?o.done?(n[e.resultName]=o.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,m):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function _(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function F(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function N(e){if(e){var n=e[o];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var a=-1,i=function n(){for(;++a<e.length;)if(r.call(e,a))return n.value=e[a],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:O}}function O(){return{value:t,done:!0}}return g.prototype=E.constructor=y,y.constructor=g,g.displayName=u(y,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,u(e,l,"GeneratorFunction")),e.prototype=Object.create(E),e},e.awrap=function(e){return{__await:e}},x(C.prototype),C.prototype[i]=function(){return this},e.AsyncIterator=C,e.async=function(t,n,r,a,o){void 0===o&&(o=Promise);var i=new C(c(t,n,r,a),o);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},x(E),u(E,l,"Generator"),E[o]=function(){return this},E.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=N,F.prototype={constructor:F,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(_),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function a(r,a){return l.type="throw",l.arg=e,n.next=r,a&&(n.method="next",n.arg=t),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],l=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),c=r.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,m):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),_(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;_(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:N(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),m}},e}(e.exports);try{regeneratorRuntime=t}catch(e){Function("r","regeneratorRuntime = r")(t)}},53:(e,t)=>{"use strict";var n,r,a,o;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,s=null,f=function(){if(null!==c)try{var e=t.unstable_now();c(!0,e),c=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==c?setTimeout(n,0,e):(c=e,setTimeout(f,0))},r=function(e,t){s=setTimeout(e,t)},a=function(){clearTimeout(s)},t.unstable_shouldYield=function(){return!1},o=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,v=null,g=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},o=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,k=w.port2;w.port1.onmessage=function(){if(null!==v){var e=t.unstable_now();b=e+y;try{v(!0,e)?k.postMessage(null):(m=!1,v=null)}catch(e){throw k.postMessage(null),e}}else m=!1},n=function(e){v=e,m||(m=!0,k.postMessage(null))},r=function(e,n){g=d((function(){e(t.unstable_now())}),n)},a=function(){p(g),g=-1}}function E(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,a=e[r];if(!(void 0!==a&&0<S(a,t)))break e;e[r]=t,e[n]=a,n=r}}function x(e){return void 0===(e=e[0])?null:e}function C(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length;r<a;){var o=2*(r+1)-1,i=e[o],l=o+1,u=e[l];if(void 0!==i&&0>S(i,n))void 0!==u&&0>S(u,i)?(e[r]=u,e[l]=n,r=l):(e[r]=i,e[o]=n,r=o);else{if(!(void 0!==u&&0>S(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function S(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var P=[],_=[],F=1,N=null,O=3,T=!1,M=!1,A=!1;function L(e){for(var t=x(_);null!==t;){if(null===t.callback)C(_);else{if(!(t.startTime<=e))break;C(_),t.sortIndex=t.expirationTime,E(P,t)}t=x(_)}}function R(e){if(A=!1,L(e),!M)if(null!==x(P))M=!0,n(j);else{var t=x(_);null!==t&&r(R,t.startTime-e)}}function j(e,n){M=!1,A&&(A=!1,a()),T=!0;var o=O;try{for(L(n),N=x(P);null!==N&&(!(N.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=N.callback;if("function"==typeof i){N.callback=null,O=N.priorityLevel;var l=i(N.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?N.callback=l:N===x(P)&&C(P),L(n)}else C(P);N=x(P)}if(null!==N)var u=!0;else{var c=x(_);null!==c&&r(R,c.startTime-n),u=!1}return u}finally{N=null,O=o,T=!1}}var z=o;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){M||T||(M=!0,n(j))},t.unstable_getCurrentPriorityLevel=function(){return O},t.unstable_getFirstCallbackNode=function(){return x(P)},t.unstable_next=function(e){switch(O){case 1:case 2:case 3:var t=3;break;default:t=O}var n=O;O=t;try{return e()}finally{O=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=z,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=O;O=e;try{return t()}finally{O=n}},t.unstable_scheduleCallback=function(e,o,i){var l=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?l+i:l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:F++,callback:o,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>l?(e.sortIndex=i,E(_,e),null===x(P)&&e===x(_)&&(A?a():A=!0,r(R,i-l))):(e.sortIndex=u,E(P,e),M||T||(M=!0,n(j))),e},t.unstable_wrapCallback=function(e){var t=O;return function(){var n=O;O=t;try{return e.apply(this,arguments)}finally{O=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},379:(e,t,n)=>{"use strict";var r,a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),o=[];function i(e){for(var t=-1,n=0;n<o.length;n++)if(o[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},r=[],a=0;a<e.length;a++){var l=e[a],u=t.base?l[0]+t.base:l[0],c=n[u]||0,s="".concat(u," ").concat(c);n[u]=c+1;var f=i(s),d={css:l[1],media:l[2],sourceMap:l[3]};-1!==f?(o[f].references++,o[f].updater(d)):o.push({identifier:s,updater:m(d,t),references:1}),r.push(s)}return r}function u(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var c,s=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function f(e,t,n,r){var a=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=s(t,a);else{var o=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}function d(e,t,n){var r=n.css,a=n.media,o=n.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,h=0;function m(e,t){var n,r,a;if(t.singleton){var o=h++;n=p||(p=u(t)),r=f.bind(null,n,o,!1),a=f.bind(null,n,o,!0)}else n=u(t),r=d.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var a=i(n[r]);o[a].references--}for(var u=l(e,t),c=0;c<n.length;c++){var s=i(n[c]);0===o[s].references&&(o[s].updater(),o.splice(s,1))}n=u}}}}},t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=n(294),t=n(935);function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}var a=n(697),o=n.n(a),i=n(122);function l(e){return"/"===e.charAt(0)}function u(e,t){for(var n=t,r=n+1,a=e.length;r<a;n+=1,r+=1)e[n]=e[r];e.pop()}const c=function(e,t){if(!e)throw new Error("Invariant failed")};function s(e){return"/"===e.charAt(0)?e:"/"+e}function f(e){return"/"===e.charAt(0)?e.substr(1):e}function d(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function p(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function h(e){var t=e.pathname,n=e.search,r=e.hash,a=t||"/";return n&&"?"!==n&&(a+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(a+="#"===r.charAt(0)?r:"#"+r),a}function m(e,t,n,r){var a;"string"==typeof e?(a=function(e){var t=e||"/",n="",r="",a=t.indexOf("#");-1!==a&&(r=t.substr(a),t=t.substr(0,a));var o=t.indexOf("?");return-1!==o&&(n=t.substr(o),t=t.substr(0,o)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(a=(0,i.default)({},e)).pathname&&(a.pathname=""),a.search?"?"!==a.search.charAt(0)&&(a.search="?"+a.search):a.search="",a.hash?"#"!==a.hash.charAt(0)&&(a.hash="#"+a.hash):a.hash="",void 0!==t&&void 0===a.state&&(a.state=t));try{a.pathname=decodeURI(a.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+a.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(a.key=n),r?a.pathname?"/"!==a.pathname.charAt(0)&&(a.pathname=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],a=t&&t.split("/")||[],o=e&&l(e),i=t&&l(t),c=o||i;if(e&&l(e)?a=r:r.length&&(a.pop(),a=a.concat(r)),!a.length)return"/";if(a.length){var s=a[a.length-1];n="."===s||".."===s||""===s}else n=!1;for(var f=0,d=a.length;d>=0;d--){var p=a[d];"."===p?u(a,d):".."===p?(u(a,d),f++):f&&(u(a,d),f--)}if(!c)for(;f--;f)a.unshift("..");!c||""===a[0]||a[0]&&l(a[0])||a.unshift("");var h=a.join("/");return n&&"/"!==h.substr(-1)&&(h+="/"),h}(a.pathname,r.pathname)):a.pathname=r.pathname:a.pathname||(a.pathname="/"),a}function v(){var e=null,t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,a){if(null!=e){var o="function"==typeof e?e(t,n):e;"string"==typeof o?"function"==typeof r?r(o,a):a(!0):a(!1!==o)}else a(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var g=!("undefined"==typeof window||!window.document||!window.document.createElement);function y(e,t){t(window.confirm(e))}var b="hashchange",w={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+f(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:f,decodePath:s},slash:{encodePath:s,decodePath:s}};function k(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function E(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function x(e){window.location.replace(k(window.location.href)+"#"+e)}function C(e){void 0===e&&(e={}),g||c(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,a=void 0===r?y:r,o=n.hashType,l=void 0===o?"slash":o,u=e.basename?p(s(e.basename)):"",f=w[l],C=f.encodePath,S=f.decodePath;function P(){var e=S(E());return u&&(e=d(e,u)),m(e)}var _=v();function F(e){(0,i.default)(V,e),V.length=t.length,_.notifyListeners(V.location,V.action)}var N=!1,O=null;function T(){var e,t,n=E(),r=C(n);if(n!==r)x(r);else{var o=P(),i=V.location;if(!N&&(t=o,(e=i).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(O===h(o))return;O=null,function(e){if(N)N=!1,F();else{_.confirmTransitionTo(e,"POP",a,(function(t){t?F({action:"POP",location:e}):function(e){var t=V.location,n=R.lastIndexOf(h(t));-1===n&&(n=0);var r=R.lastIndexOf(h(e));-1===r&&(r=0);var a=n-r;a&&(N=!0,j(a))}(e)}))}}(o)}}var M=E(),A=C(M);M!==A&&x(A);var L=P(),R=[h(L)];function j(e){t.go(e)}var z=0;function I(e){1===(z+=e)&&1===e?window.addEventListener(b,T):0===z&&window.removeEventListener(b,T)}var $=!1,V={length:t.length,action:"POP",location:L,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=k(window.location.href)),n+"#"+C(u+h(e))},push:function(e,t){var n="PUSH",r=m(e,void 0,void 0,V.location);_.confirmTransitionTo(r,n,a,(function(e){if(e){var t=h(r),a=C(u+t);if(E()!==a){O=t,function(e){window.location.hash=e}(a);var o=R.lastIndexOf(h(V.location)),i=R.slice(0,o+1);i.push(t),R=i,F({action:n,location:r})}else F()}}))},replace:function(e,t){var n="REPLACE",r=m(e,void 0,void 0,V.location);_.confirmTransitionTo(r,n,a,(function(e){if(e){var t=h(r),a=C(u+t);E()!==a&&(O=t,x(a));var o=R.indexOf(h(V.location));-1!==o&&(R[o]=t),F({action:n,location:r})}}))},go:j,goBack:function(){j(-1)},goForward:function(){j(1)},block:function(e){void 0===e&&(e=!1);var t=_.setPrompt(e);return $||(I(1),$=!0),function(){return $&&($=!1,I(-1)),t()}},listen:function(e){var t=_.appendListener(e);return I(1),function(){I(-1),t()}}};return V}var S=1073741823,P="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:{};function _(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}const F=e.createContext||function(t,n){var a,i,l,u="__create-react-context-"+((P[l="__global_unique_id__"]=(P[l]||0)+1)+"__"),c=function(e){function t(){var t;return(t=e.apply(this,arguments)||this).emitter=_(t.props.value),t}r(t,e);var a=t.prototype;return a.getChildContext=function(){var e;return(e={})[u]=this.emitter,e},a.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t,r=this.props.value,a=e.value;((o=r)===(i=a)?0!==o||1/o==1/i:o!=o&&i!=i)?t=0:(t="function"==typeof n?n(r,a):S,0!=(t|=0)&&this.emitter.set(e.value,t))}var o,i},a.render=function(){return this.props.children},t}(e.Component);c.childContextTypes=((a={})[u]=o().object.isRequired,a);var s=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).state={value:t.getValue()},t.onUpdate=function(e,n){0!=((0|t.observedBits)&n)&&t.setState({value:t.getValue()})},t}r(n,e);var a=n.prototype;return a.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?S:t},a.componentDidMount=function(){this.context[u]&&this.context[u].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?S:e},a.componentWillUnmount=function(){this.context[u]&&this.context[u].off(this.onUpdate)},a.getValue=function(){return this.context[u]?this.context[u].get():t},a.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(e.Component);return s.contextTypes=((i={})[u]=o().object,i),{Provider:c,Consumer:s}};var N=n(658),O=n.n(N),T=n(864);function M(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}n(679);var A=function(e){var t=F();return t.displayName="Router-History",t}(),L=function(e){var t=F();return t.displayName="Router",t}(),R=function(t){function n(e){var n;return(n=t.call(this,e)||this).state={location:e.history.location},n._isMounted=!1,n._pendingLocation=null,e.staticContext||(n.unlisten=e.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}r(n,t),n.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var a=n.prototype;return a.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},a.componentWillUnmount=function(){this.unlisten&&this.unlisten()},a.render=function(){return e.createElement(L.Provider,{value:{history:this.props.history,location:this.state.location,match:n.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},e.createElement(A.Provider,{children:this.props.children||null,value:this.props.history}))},n}(e.Component);e.Component,e.Component;var j={},z=0;function I(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,a=n.exact,o=void 0!==a&&a,i=n.strict,l=void 0!==i&&i,u=n.sensitive,c=void 0!==u&&u;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=j[n]||(j[n]={});if(r[e])return r[e];var a=[],o={regexp:O()(e,a,t),keys:a};return z<1e4&&(r[e]=o,z++),o}(n,{end:o,strict:l,sensitive:c}),a=r.regexp,i=r.keys,u=a.exec(e);if(!u)return null;var s=u[0],f=u.slice(1),d=e===s;return o&&!d?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:d,params:i.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var $=function(t){function n(){return t.apply(this,arguments)||this}return r(n,t),n.prototype.render=function(){var t=this;return e.createElement(L.Consumer,null,(function(n){n||c(!1);var r=t.props.location||n.location,a=t.props.computedMatch?t.props.computedMatch:t.props.path?I(r.pathname,t.props):n.match,o=(0,i.default)({},n,{location:r,match:a}),l=t.props,u=l.children,s=l.component,f=l.render;return Array.isArray(u)&&0===u.length&&(u=null),e.createElement(L.Provider,{value:o},o.match?u?"function"==typeof u?u(o):u:s?e.createElement(s,o):f?f(o):null:"function"==typeof u?u(o):null)}))},n}(e.Component);e.Component;var V=function(t){function n(){return t.apply(this,arguments)||this}return r(n,t),n.prototype.render=function(){var t=this;return e.createElement(L.Consumer,null,(function(n){n||c(!1);var r,a,o=t.props.location||n.location;return e.Children.forEach(t.props.children,(function(t){if(null==a&&e.isValidElement(t)){r=t;var l=t.props.path||t.props.from;a=l?I(o.pathname,(0,i.default)({},t.props,{path:l})):n.match}})),a?e.cloneElement(r,{location:o,computedMatch:a}):null}))},n}(e.Component);e.useContext,e.Component;var D=function(t){function n(){for(var e,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];return(e=t.call.apply(t,[this].concat(r))||this).history=C(e.props),e}return r(n,t),n.prototype.render=function(){return e.createElement(R,{history:this.history,children:this.props.children})},n}(e.Component),U=function(e,t){return"function"==typeof e?e(t):e},H=function(e,t){return"string"==typeof e?m(e,null,null,t):e},B=function(e){return e},q=e.forwardRef;void 0===q&&(q=B);var W=q((function(t,n){var r=t.innerRef,a=t.navigate,o=t.onClick,l=M(t,["innerRef","navigate","onClick"]),u=l.target,c=(0,i.default)({},l,{onClick:function(e){try{o&&o(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||u&&"_self"!==u||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),a())}});return c.ref=B!==q&&n||r,e.createElement("a",c)})),Y=q((function(t,n){var r=t.component,a=void 0===r?W:r,o=t.replace,l=t.to,u=t.innerRef,s=M(t,["component","replace","to","innerRef"]);return e.createElement(L.Consumer,null,(function(t){t||c(!1);var r=t.history,f=H(U(l,t.location),t.location),d=f?r.createHref(f):"",p=(0,i.default)({},s,{href:d,navigate:function(){var e=U(l,t.location);(o?r.replace:r.push)(e)}});return B!==q?p.ref=n||u:p.innerRef=u,e.createElement(a,p)}))})),K=function(e){return e},Q=e.forwardRef;void 0===Q&&(Q=K),Q((function(t,n){var r=t["aria-current"],a=void 0===r?"page":r,o=t.activeClassName,l=void 0===o?"active":o,u=t.activeStyle,s=t.className,f=t.exact,d=t.isActive,p=t.location,h=t.sensitive,m=t.strict,v=t.style,g=t.to,y=t.innerRef,b=M(t,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return e.createElement(L.Consumer,null,(function(t){t||c(!1);var r=p||t.location,o=H(U(g,r),r),w=o.pathname,k=w&&w.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),E=k?I(r.pathname,{path:k,exact:f,sensitive:h,strict:m}):null,x=!!(d?d(E,r):E),C=x?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(s,l):s,S=x?(0,i.default)({},v,{},u):v,P=(0,i.default)({"aria-current":x&&a||null,className:C,style:S,to:o},b);return K!==Q?P.ref=n||y:P.innerRef=y,e.createElement(Y,P)}))}));var G=n(379),Z=n.n(G),X=n(785);Z()(X.Z,{insert:"head",singleton:!1});const J=X.Z.locals||{},ee=function(){return e.createElement("div",{className:[J.header,"footer"].join(" ")},e.createElement("p",null,"Header"))};var te=n(311);Z()(te.Z,{insert:"head",singleton:!1});const ne=te.Z.locals||{},re=function(){return e.createElement("div",{className:[ne.footer,"footer"].join(" ")},e.createElement("p",null,"Footer"))};var ae=n(867);Z()(ae.Z,{insert:"head",singleton:!1});const oe=ae.Z.locals||{};function ie(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const le=function(){var t,n,r,a=(n=(0,e.useState)("iOS调用方法改变文本"),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}}(n,r)||function(e,t){if(e){if("string"==typeof e)return ie(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ie(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[0],i=a[1];!function(e){e[e.alert=0]="alert",e[e.confirm=1]="confirm",e[e.prompt=2]="prompt"}(t||(t={}));var l=(0,e.useCallback)((function(e,n){switch(n){case t.alert:alert("".concat(e.target.innerText));break;case t.confirm:confirm("".concat(e.target.innerText))?e.target.innerText+="OK":e.target.innerText+="Cancel";break;case t.prompt:var r=prompt("".concat(e.target.innerText));r&&alert(r)}}),[]),u=(0,e.useCallback)((function(e){window.location.href=e}),[]),c=(0,e.useCallback)((function(){window.webkit.messageHandlers.jsFunc.postMessage({status:"success"})}),[]),s=(0,e.useCallback)((function(){window.webkit.messageHandlers.jsConsole.postMessage({status:"success"}).then((function(e){alert(e)})).catch((function(e){alert(e)}))}),[]),f=(0,e.useCallback)((function(){window.webkit.messageHandlers.reload.postMessage({status:"success"})}),[]);return(0,e.useEffect)((function(){window.iOSCallFunction=function(e){i("iOS调用方法改变文本:".concat(e))}})),e.createElement("div",{className:oe.home},e.createElement("p",null,"Home",window.location.hash),e.createElement("img",{className:oe.img,src:"https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png",onClick:function(){return u("https://www.baidu.com")}}),e.createElement("p",null,"协议拦截"),e.createElement("div",{className:oe.itemDiv},e.createElement("div",{onClick:function(){return u("jsToIOS://www.baidu.com?name=tdy")}},"协议拦截跳转")),e.createElement("p",null,"`WKUIDelegate`协议"),e.createElement("div",{className:oe.itemDiv},e.createElement("div",{onClick:function(e){return l(e,t.alert)}},"WKUIDelegate协议拦截alert"),e.createElement("div",{onClick:function(e){return l(e,t.confirm)}},"WKUIDelegate协议拦截confirm"),e.createElement("div",{onClick:function(e){return l(e,t.prompt)}},"WKUIDelegate协议拦截prompt")),e.createElement("p",null,"`WKScriptMessageHandler`或`WKScriptMessageHandlerWithReply`协议"),e.createElement("div",{className:oe.messageHandler},e.createElement("div",{onClick:c},"JS调用IOS方法无返回"),e.createElement("div",{onClick:s},"JS调用IOS方法有返回"),e.createElement("div",{onClick:f},"刷新"),e.createElement("div",null,o),e.createElement("div",{id:"IOSJS",style:{margin:"20px"}},"iOS设置margin")))},ue=function(){return e.createElement(e.Fragment,null,e.createElement(ee,null),e.createElement(D,null,e.createElement(V,null,e.createElement($,{path:"/",component:function(){return e.createElement(V,null,e.createElement($,{exact:!0,path:"/home",component:le}),e.createElement($,{exact:!0,path:"/test",component:le}),e.createElement($,{path:"*",component:function(){return e.createElement("div",null,"404")}}))}}),e.createElement($,{component:function(){return e.createElement("div",null,"404")}}))),e.createElement(re,null))};function ce(e,t){if(null==e)return{};var n,r,a=M(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}function se(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function fe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function de(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?fe(Object(n),!0).forEach((function(t){se(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):fe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function pe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function he(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}function me(e,t){if(e){if("string"==typeof e)return pe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?pe(e,t):void 0}}function ve(e){return function(e){if(Array.isArray(e))return pe(e)}(e)||he(e)||me(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ge(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ye(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function be(e,t,n){return t&&ye(e.prototype,t),n&&ye(e,n),e}function we(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ke(e,t){return(ke=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ee(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ke(e,t)}function xe(e){return(xe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ce(e){return(Ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Se(e,t){return!t||"object"!==Ce(t)&&"function"!=typeof t?we(e):t}function Pe(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=xe(e);if(t){var a=xe(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return Se(this,n)}}function _e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=[];return e.Children.forEach(t,(function(e){(null!=e||n.keepEmpty)&&(Array.isArray(e)?r=r.concat(_e(e)):(0,T.isFragment)(e)&&e.props?r=r.concat(_e(e.props.children,n)):r.push(e))})),r}var Fe={};function Ne(e,t){}const Oe=function(e,t){!function(e,t,n){t||Fe[n]||(e(!1,n),Fe[n]=!0)}(Ne,e,t)};var Te="RC_FORM_INTERNAL_HOOKS",Me=function(){Oe(!1,"Can not find FormContext. Please make sure you wrap Field under Form.")};const Ae=e.createContext({getFieldValue:Me,getFieldsValue:Me,getFieldError:Me,getFieldsError:Me,isFieldsTouched:Me,isFieldTouched:Me,isFieldValidating:Me,isFieldsValidating:Me,resetFields:Me,setFields:Me,setFieldsValue:Me,validateFields:Me,submit:Me,getInternalHooks:function(){return Me(),{dispatch:Me,initEntityValue:Me,registerField:Me,useSubscribe:Me,setInitialValues:Me,setCallbacks:Me,getFields:Me,setValidateMessages:Me,setPreserve:Me}}});function Le(e){return null==e?[]:Array.isArray(e)?e:[e]}var Re=n(757),je=n.n(Re);function ze(e,t,n,r,a,o,i){try{var l=e[o](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,a)}function Ie(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){ze(o,r,a,i,l,"next",e)}function l(e){ze(o,r,a,i,l,"throw",e)}i(void 0)}))}}function $e(){return($e=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Ve(e){return(Ve=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function De(e,t){return(De=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ue(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function He(e,t,n){return(He=Ue()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var a=new(Function.bind.apply(e,r));return n&&De(a,n.prototype),a}).apply(null,arguments)}function Be(e){var t="function"==typeof Map?new Map:void 0;return(Be=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return He(e,arguments,Ve(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),De(r,e)})(e)}var qe=/%[sdj%]/g;function We(e){if(!e||!e.length)return null;var t={};return e.forEach((function(e){var n=e.field;t[n]=t[n]||[],t[n].push(e)})),t}function Ye(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=1,a=t[0],o=t.length;if("function"==typeof a)return a.apply(null,t.slice(1));if("string"==typeof a){var i=String(a).replace(qe,(function(e){if("%%"===e)return"%";if(r>=o)return e;switch(e){case"%s":return String(t[r++]);case"%d":return Number(t[r++]);case"%j":try{return JSON.stringify(t[r++])}catch(e){return"[Circular]"}break;default:return e}}));return i}return a}function Ke(e,t){return null==e||!("array"!==t||!Array.isArray(e)||e.length)||!(!function(e){return"string"===e||"url"===e||"hex"===e||"email"===e||"date"===e||"pattern"===e}(t)||"string"!=typeof e||e)}function Qe(e,t,n){var r=0,a=e.length;!function o(i){if(i&&i.length)n(i);else{var l=r;r+=1,l<a?t(e[l],o):n([])}}([])}"undefined"!=typeof process&&process.env;var Ge=function(e){var t,n;function r(t,n){var r;return(r=e.call(this,"Async Validation Error")||this).errors=t,r.fields=n,r}return n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,r}(Be(Error));function Ze(e){return function(t){return t&&t.message?(t.field=t.field||e.fullField,t):{message:"function"==typeof t?t():t,field:t.field||e.fullField}}}function Xe(e,t){if(t)for(var n in t)if(t.hasOwnProperty(n)){var r=t[n];"object"==typeof r&&"object"==typeof e[n]?e[n]=$e($e({},e[n]),r):e[n]=r}return e}function Je(e,t,n,r,a,o){!e.required||n.hasOwnProperty(e.field)&&!Ke(t,o||e.type)||r.push(Ye(a.messages.required,e.fullField))}var et={email:/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,url:new RegExp("^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$","i"),hex:/^#?([a-f0-9]{6}|[a-f0-9]{3})$/i},tt={integer:function(e){return tt.number(e)&&parseInt(e,10)===e},float:function(e){return tt.number(e)&&!tt.integer(e)},array:function(e){return Array.isArray(e)},regexp:function(e){if(e instanceof RegExp)return!0;try{return!!new RegExp(e)}catch(e){return!1}},date:function(e){return"function"==typeof e.getTime&&"function"==typeof e.getMonth&&"function"==typeof e.getYear&&!isNaN(e.getTime())},number:function(e){return!isNaN(e)&&"number"==typeof e},object:function(e){return"object"==typeof e&&!tt.array(e)},method:function(e){return"function"==typeof e},email:function(e){return"string"==typeof e&&!!e.match(et.email)&&e.length<255},url:function(e){return"string"==typeof e&&!!e.match(et.url)},hex:function(e){return"string"==typeof e&&!!e.match(et.hex)}},nt={required:Je,whitespace:function(e,t,n,r,a){(/^\s+$/.test(t)||""===t)&&r.push(Ye(a.messages.whitespace,e.fullField))},type:function(e,t,n,r,a){if(e.required&&void 0===t)Je(e,t,n,r,a);else{var o=e.type;["integer","float","array","regexp","object","method","email","number","date","url","hex"].indexOf(o)>-1?tt[o](t)||r.push(Ye(a.messages.types[o],e.fullField,e.type)):o&&typeof t!==e.type&&r.push(Ye(a.messages.types[o],e.fullField,e.type))}},range:function(e,t,n,r,a){var o="number"==typeof e.len,i="number"==typeof e.min,l="number"==typeof e.max,u=t,c=null,s="number"==typeof t,f="string"==typeof t,d=Array.isArray(t);if(s?c="number":f?c="string":d&&(c="array"),!c)return!1;d&&(u=t.length),f&&(u=t.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,"_").length),o?u!==e.len&&r.push(Ye(a.messages[c].len,e.fullField,e.len)):i&&!l&&u<e.min?r.push(Ye(a.messages[c].min,e.fullField,e.min)):l&&!i&&u>e.max?r.push(Ye(a.messages[c].max,e.fullField,e.max)):i&&l&&(u<e.min||u>e.max)&&r.push(Ye(a.messages[c].range,e.fullField,e.min,e.max))},enum:function(e,t,n,r,a){e.enum=Array.isArray(e.enum)?e.enum:[],-1===e.enum.indexOf(t)&&r.push(Ye(a.messages.enum,e.fullField,e.enum.join(", ")))},pattern:function(e,t,n,r,a){e.pattern&&(e.pattern instanceof RegExp?(e.pattern.lastIndex=0,e.pattern.test(t)||r.push(Ye(a.messages.pattern.mismatch,e.fullField,t,e.pattern))):"string"==typeof e.pattern&&(new RegExp(e.pattern).test(t)||r.push(Ye(a.messages.pattern.mismatch,e.fullField,t,e.pattern))))}};function rt(e,t,n,r,a){var o=e.type,i=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Ke(t,o)&&!e.required)return n();nt.required(e,t,r,i,a,o),Ke(t,o)||nt.type(e,t,r,i,a)}n(i)}var at={string:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Ke(t,"string")&&!e.required)return n();nt.required(e,t,r,o,a,"string"),Ke(t,"string")||(nt.type(e,t,r,o,a),nt.range(e,t,r,o,a),nt.pattern(e,t,r,o,a),!0===e.whitespace&&nt.whitespace(e,t,r,o,a))}n(o)},method:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Ke(t)&&!e.required)return n();nt.required(e,t,r,o,a),void 0!==t&&nt.type(e,t,r,o,a)}n(o)},number:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(""===t&&(t=void 0),Ke(t)&&!e.required)return n();nt.required(e,t,r,o,a),void 0!==t&&(nt.type(e,t,r,o,a),nt.range(e,t,r,o,a))}n(o)},boolean:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Ke(t)&&!e.required)return n();nt.required(e,t,r,o,a),void 0!==t&&nt.type(e,t,r,o,a)}n(o)},regexp:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Ke(t)&&!e.required)return n();nt.required(e,t,r,o,a),Ke(t)||nt.type(e,t,r,o,a)}n(o)},integer:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Ke(t)&&!e.required)return n();nt.required(e,t,r,o,a),void 0!==t&&(nt.type(e,t,r,o,a),nt.range(e,t,r,o,a))}n(o)},float:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Ke(t)&&!e.required)return n();nt.required(e,t,r,o,a),void 0!==t&&(nt.type(e,t,r,o,a),nt.range(e,t,r,o,a))}n(o)},array:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(null==t&&!e.required)return n();nt.required(e,t,r,o,a,"array"),null!=t&&(nt.type(e,t,r,o,a),nt.range(e,t,r,o,a))}n(o)},object:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Ke(t)&&!e.required)return n();nt.required(e,t,r,o,a),void 0!==t&&nt.type(e,t,r,o,a)}n(o)},enum:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Ke(t)&&!e.required)return n();nt.required(e,t,r,o,a),void 0!==t&&nt.enum(e,t,r,o,a)}n(o)},pattern:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Ke(t,"string")&&!e.required)return n();nt.required(e,t,r,o,a),Ke(t,"string")||nt.pattern(e,t,r,o,a)}n(o)},date:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Ke(t,"date")&&!e.required)return n();var i;nt.required(e,t,r,o,a),Ke(t,"date")||(i=t instanceof Date?t:new Date(t),nt.type(e,i,r,o,a),i&&nt.range(e,i.getTime(),r,o,a))}n(o)},url:rt,hex:rt,email:rt,required:function(e,t,n,r,a){var o=[],i=Array.isArray(t)?"array":typeof t;nt.required(e,t,r,o,a,i),n(o)},any:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Ke(t)&&!e.required)return n();nt.required(e,t,r,o,a)}n(o)}};function ot(){return{default:"Validation error on field %s",required:"%s is required",enum:"%s must be one of %s",whitespace:"%s cannot be empty",date:{format:"%s date %s is invalid for format %s",parse:"%s date could not be parsed, %s is invalid ",invalid:"%s date %s is invalid"},types:{string:"%s is not a %s",method:"%s is not a %s (function)",array:"%s is not an %s",object:"%s is not an %s",number:"%s is not a %s",date:"%s is not a %s",boolean:"%s is not a %s",integer:"%s is not an %s",float:"%s is not a %s",regexp:"%s is not a valid %s",email:"%s is not a valid %s",url:"%s is not a valid %s",hex:"%s is not a valid %s"},string:{len:"%s must be exactly %s characters",min:"%s must be at least %s characters",max:"%s cannot be longer than %s characters",range:"%s must be between %s and %s characters"},number:{len:"%s must equal %s",min:"%s cannot be less than %s",max:"%s cannot be greater than %s",range:"%s must be between %s and %s"},array:{len:"%s must be exactly %s in length",min:"%s cannot be less than %s in length",max:"%s cannot be greater than %s in length",range:"%s must be between %s and %s in length"},pattern:{mismatch:"%s value %s does not match pattern %s"},clone:function(){var e=JSON.parse(JSON.stringify(this));return e.clone=this.clone,e}}}var it=ot();function lt(e){this.rules=null,this._messages=it,this.define(e)}function ut(e){if(Array.isArray(e))return e}function ct(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function st(e,t,n){if(!t.length)return n;var r,a,o=ut(r=t)||he(r)||me(r)||ct(),i=o[0],l=o.slice(1);return(a=e||"number"!=typeof i?Array.isArray(e)?ve(e):de({},e):[])[i]=st(a[i],l,n),a}function ft(e){return Le(e)}function dt(e,t){return function(e,t){for(var n=e,r=0;r<t.length;r+=1){if(null==n)return;n=n[t[r]]}return n}(e,t)}function pt(e,t,n){return st(e,t,n)}function ht(e,t){var n={};return t.forEach((function(t){var r=dt(e,t);n=pt(n,t,r)})),n}function mt(e,t){return e&&e.some((function(e){return bt(e,t)}))}function vt(e){return"object"===Ce(e)&&null!==e&&Object.getPrototypeOf(e)===Object.prototype}function gt(e,t){var n=Array.isArray(e)?ve(e):de({},e);return t?(Object.keys(t).forEach((function(e){var r=n[e],a=t[e],o=vt(r)&&vt(a);n[e]=o?gt(r,a||{}):a})),n):n}function yt(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return n.reduce((function(e,t){return gt(e,t)}),e)}function bt(e,t){return!(!e||!t||e.length!==t.length)&&e.every((function(e,n){return t[n]===e}))}function wt(e){var t=arguments.length<=1?void 0:arguments[1];return t&&t.target&&e in t.target?t.target[e]:t}function kt(e,t,n){var r=e.length;if(t<0||t>=r||n<0||n>=r)return e;var a=e[t],o=t-n;return o>0?[].concat(ve(e.slice(0,n)),[a],ve(e.slice(n,t)),ve(e.slice(t+1,r))):o<0?[].concat(ve(e.slice(0,t)),ve(e.slice(t+1,n+1)),[a],ve(e.slice(n+1,r))):e}lt.prototype={messages:function(e){return e&&(this._messages=Xe(ot(),e)),this._messages},define:function(e){if(!e)throw new Error("Cannot configure a schema with no rules");if("object"!=typeof e||Array.isArray(e))throw new Error("Rules must be an object");var t,n;for(t in this.rules={},e)e.hasOwnProperty(t)&&(n=e[t],this.rules[t]=Array.isArray(n)?n:[n])},validate:function(e,t,n){var r=this;void 0===t&&(t={}),void 0===n&&(n=function(){});var a,o,i=e,l=t,u=n;if("function"==typeof l&&(u=l,l={}),!this.rules||0===Object.keys(this.rules).length)return u&&u(),Promise.resolve();if(l.messages){var c=this.messages();c===it&&(c=ot()),Xe(c,l.messages),l.messages=c}else l.messages=this.messages();var s={};(l.keys||Object.keys(this.rules)).forEach((function(t){a=r.rules[t],o=i[t],a.forEach((function(n){var a=n;"function"==typeof a.transform&&(i===e&&(i=$e({},i)),o=i[t]=a.transform(o)),(a="function"==typeof a?{validator:a}:$e({},a)).validator=r.getValidationMethod(a),a.field=t,a.fullField=a.fullField||t,a.type=r.getType(a),a.validator&&(s[t]=s[t]||[],s[t].push({rule:a,value:o,source:i,field:t}))}))}));var f={};return function(e,t,n,r){if(t.first){var a=new Promise((function(t,a){Qe(function(e){var t=[];return Object.keys(e).forEach((function(n){t.push.apply(t,e[n])})),t}(e),n,(function(e){return r(e),e.length?a(new Ge(e,We(e))):t()}))}));return a.catch((function(e){return e})),a}var o=t.firstFields||[];!0===o&&(o=Object.keys(e));var i=Object.keys(e),l=i.length,u=0,c=[],s=new Promise((function(t,a){var s=function(e){if(c.push.apply(c,e),++u===l)return r(c),c.length?a(new Ge(c,We(c))):t()};i.length||(r(c),t()),i.forEach((function(t){var r=e[t];-1!==o.indexOf(t)?Qe(r,n,s):function(e,t,n){var r=[],a=0,o=e.length;function i(e){r.push.apply(r,e),++a===o&&n(r)}e.forEach((function(e){t(e,i)}))}(r,n,s)}))}));return s.catch((function(e){return e})),s}(s,l,(function(e,t){var n,r=e.rule,a=!("object"!==r.type&&"array"!==r.type||"object"!=typeof r.fields&&"object"!=typeof r.defaultField);function o(e,t){return $e($e({},t),{},{fullField:r.fullField+"."+e})}function i(n){void 0===n&&(n=[]);var i=n;if(Array.isArray(i)||(i=[i]),!l.suppressWarning&&i.length&&lt.warning("async-validator:",i),i.length&&void 0!==r.message&&(i=[].concat(r.message)),i=i.map(Ze(r)),l.first&&i.length)return f[r.field]=1,t(i);if(a){if(r.required&&!e.value)return void 0!==r.message?i=[].concat(r.message).map(Ze(r)):l.error&&(i=[l.error(r,Ye(l.messages.required,r.field))]),t(i);var u={};if(r.defaultField)for(var c in e.value)e.value.hasOwnProperty(c)&&(u[c]=r.defaultField);for(var s in u=$e($e({},u),e.rule.fields))if(u.hasOwnProperty(s)){var d=Array.isArray(u[s])?u[s]:[u[s]];u[s]=d.map(o.bind(null,s))}var p=new lt(u);p.messages(l.messages),e.rule.options&&(e.rule.options.messages=l.messages,e.rule.options.error=l.error),p.validate(e.value,e.rule.options||l,(function(e){var n=[];i&&i.length&&n.push.apply(n,i),e&&e.length&&n.push.apply(n,e),t(n.length?n:null)}))}else t(i)}a=a&&(r.required||!r.required&&e.value),r.field=e.field,r.asyncValidator?n=r.asyncValidator(r,e.value,i,e.source,l):r.validator&&(!0===(n=r.validator(r,e.value,i,e.source,l))?i():!1===n?i(r.message||r.field+" fails"):n instanceof Array?i(n):n instanceof Error&&i(n.message)),n&&n.then&&n.then((function(){return i()}),(function(e){return i(e)}))}),(function(e){!function(e){var t,n,r,a=[],o={};for(t=0;t<e.length;t++)n=e[t],r=void 0,Array.isArray(n)?a=(r=a).concat.apply(r,n):a.push(n);a.length?o=We(a):(a=null,o=null),u(a,o)}(e)}))},getType:function(e){if(void 0===e.type&&e.pattern instanceof RegExp&&(e.type="pattern"),"function"!=typeof e.validator&&e.type&&!at.hasOwnProperty(e.type))throw new Error(Ye("Unknown rule type %s",e.type));return e.type||"string"},getValidationMethod:function(e){if("function"==typeof e.validator)return e.validator;var t=Object.keys(e),n=t.indexOf("message");return-1!==n&&t.splice(n,1),1===t.length&&"required"===t[0]?at.required:at[this.getType(e)]||!1}},lt.register=function(e,t){if("function"!=typeof t)throw new Error("Cannot register a validator by type, validator is not a function");at[e]=t},lt.warning=function(){},lt.messages=it,lt.validators=at;var Et="'${name}' is not a valid ${type}",xt={default:"Validation error on field '${name}'",required:"'${name}' is required",enum:"'${name}' must be one of [${enum}]",whitespace:"'${name}' cannot be empty",date:{format:"'${name}' is invalid for format date",parse:"'${name}' could not be parsed as date",invalid:"'${name}' is invalid date"},types:{string:Et,method:Et,array:Et,object:Et,number:Et,date:Et,boolean:Et,integer:Et,float:Et,regexp:Et,email:Et,url:Et,hex:Et},string:{len:"'${name}' must be exactly ${len} characters",min:"'${name}' must be at least ${min} characters",max:"'${name}' cannot be longer than ${max} characters",range:"'${name}' must be between ${min} and ${max} characters"},number:{len:"'${name}' must equal ${len}",min:"'${name}' cannot be less than ${min}",max:"'${name}' cannot be greater than ${max}",range:"'${name}' must be between ${min} and ${max}"},array:{len:"'${name}' must be exactly ${len} in length",min:"'${name}' cannot be less than ${min} in length",max:"'${name}' cannot be greater than ${max} in length",range:"'${name}' must be between ${min} and ${max} in length"},pattern:{mismatch:"'${name}' does not match pattern ${pattern}"}},Ct=lt;function St(e,t,n,r){var a=de(de({},n),{},{name:t,enum:(n.enum||[]).join(", ")}),o=function(e,t){return function(){return function(e,t){return e.replace(/\$\{\w+\}/g,(function(e){var n=e.slice(2,-1);return t[n]}))}(e,de(de({},a),t))}};return function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object.keys(t).forEach((function(a){var i=t[a];"string"==typeof i?n[a]=o(i,r):i&&"object"===Ce(i)?(n[a]={},e(i,n[a])):n[a]=i})),n}(yt({},xt,e))}function Pt(e,t,n,r,a){return _t.apply(this,arguments)}function _t(){return(_t=Ie(je().mark((function t(n,r,a,o,i){var l,u,c,s,f,d;return je().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return l=de({},a),u=null,l&&"array"===l.type&&l.defaultField&&(u=l.defaultField,delete l.defaultField),c=new Ct(se({},n,[l])),s=St(o.validateMessages,n,l,i),c.messages(s),f=[],t.prev=7,t.next=10,Promise.resolve(c.validate(se({},n,r),de({},o)));case 10:t.next=15;break;case 12:t.prev=12,t.t0=t.catch(7),t.t0.errors?f=t.t0.errors.map((function(t,n){var r=t.message;return e.isValidElement(r)?e.cloneElement(r,{key:"error_".concat(n)}):r})):(console.error(t.t0),f=[s.default()]);case 15:if(f.length||!u){t.next=20;break}return t.next=18,Promise.all(r.map((function(e,t){return Pt("".concat(n,".").concat(t),e,u,o,i)})));case 18:return d=t.sent,t.abrupt("return",d.reduce((function(e,t){return[].concat(ve(e),ve(t))}),[]));case 20:return t.abrupt("return",f);case 21:case"end":return t.stop()}}),t,null,[[7,12]])})))).apply(this,arguments)}function Ft(){return(Ft=Ie(je().mark((function e(t){return je().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",Promise.all(t).then((function(e){var t;return(t=[]).concat.apply(t,ve(e))})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Nt(){return(Nt=Ie(je().mark((function e(t){var n;return je().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=0,e.abrupt("return",new Promise((function(e){t.forEach((function(r){r.then((function(r){r.length&&e(r),(n+=1)===t.length&&e([])}))}))})));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Ot(e,t,n,r,a,o){return"function"==typeof e?e(t,n,"source"in o?{source:o.source}:{}):r!==a}var Tt=function(t){Ee(r,t);var n=Pe(r);function r(t){var a;return ge(this,r),(a=n.call(this,t)).state={resetCount:0},a.cancelRegisterFunc=null,a.mounted=!1,a.touched=!1,a.dirty=!1,a.validatePromise=null,a.errors=[],a.cancelRegister=function(){var e=a.props,t=e.preserve,n=e.isListField;a.cancelRegisterFunc&&a.cancelRegisterFunc(n,t),a.cancelRegisterFunc=null},a.getNamePath=function(){var e=a.props,t=e.name,n=e.fieldContext.prefixName;return void 0!==t?[].concat(ve(void 0===n?[]:n),ve(t)):[]},a.getRules=function(){var e=a.props,t=e.rules,n=void 0===t?[]:t,r=e.fieldContext;return n.map((function(e){return"function"==typeof e?e(r):e}))},a.refresh=function(){a.mounted&&a.setState((function(e){return{resetCount:e.resetCount+1}}))},a.onStoreChange=function(e,t,n){var r=a.props,o=r.shouldUpdate,i=r.dependencies,l=void 0===i?[]:i,u=r.onReset,c=n.store,s=a.getNamePath(),f=a.getValue(e),d=a.getValue(c),p=t&&mt(t,s);switch("valueUpdate"===n.type&&"external"===n.source&&f!==d&&(a.touched=!0,a.dirty=!0,a.validatePromise=null,a.errors=[]),n.type){case"reset":if(!t||p)return a.touched=!1,a.dirty=!1,a.validatePromise=null,a.errors=[],u&&u(),void a.refresh();break;case"setField":if(p){var h=n.data;return"touched"in h&&(a.touched=h.touched),"validating"in h&&!("originRCField"in h)&&(a.validatePromise=h.validating?Promise.resolve([]):null),"errors"in h&&(a.errors=h.errors||[]),a.dirty=!0,void a.reRender()}if(o&&!s.length&&Ot(o,e,c,f,d,n))return void a.reRender();break;case"dependenciesUpdate":if(l.map(ft).some((function(e){return mt(n.relatedFields,e)})))return void a.reRender();break;default:if(p||(!l.length||s.length||o)&&Ot(o,e,c,f,d,n))return void a.reRender()}!0===o&&a.reRender()},a.validateRules=function(e){var t=a.getNamePath(),n=a.getValue(),r=Promise.resolve().then((function(){if(!a.mounted)return[];var o=a.props,i=o.validateFirst,l=void 0!==i&&i,u=o.messageVariables,c=(e||{}).triggerName,s=a.getRules();c&&(s=s.filter((function(e){var t=e.validateTrigger;return!t||Le(t).includes(c)})));var f=function(e,t,n,r,a,o){var i,l=e.join("."),u=n.map((function(e){var t=e.validator;return t?de(de({},e),{},{validator:function(e,n,r){var a=!1,o=t(e,n,(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];Promise.resolve().then((function(){Oe(!a,"Your validator function has already return a promise. `callback` will be ignored."),a||r.apply(void 0,t)}))}));a=o&&"function"==typeof o.then&&"function"==typeof o.catch,Oe(a,"`callback` is deprecated. Please return a promise instead."),a&&o.then((function(){r()})).catch((function(e){r(e||" ")}))}}):e}));if(!0===a)i=new Promise(function(){var e=Ie(je().mark((function e(n,a){var i,c;return je().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:i=0;case 1:if(!(i<u.length)){e.next=11;break}return e.next=4,Pt(l,t,u[i],r,o);case 4:if(!(c=e.sent).length){e.next=8;break}return a(c),e.abrupt("return");case 8:i+=1,e.next=1;break;case 11:n([]);case 12:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}());else{var c=u.map((function(e){return Pt(l,t,e,r,o)}));i=(a?function(e){return Nt.apply(this,arguments)}(c):function(e){return Ft.apply(this,arguments)}(c)).then((function(e){return e.length?Promise.reject(e):[]}))}return i.catch((function(e){return e})),i}(t,n,s,e,l,u);return f.catch((function(e){return e})).then((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];a.validatePromise===r&&(a.validatePromise=null,a.errors=e,a.reRender())})),f}));return a.validatePromise=r,a.dirty=!0,a.errors=[],a.reRender(),r},a.isFieldValidating=function(){return!!a.validatePromise},a.isFieldTouched=function(){return a.touched},a.isFieldDirty=function(){return a.dirty},a.getErrors=function(){return a.errors},a.isListField=function(){return a.props.isListField},a.isList=function(){return a.props.isList},a.getMeta=function(){return a.prevValidating=a.isFieldValidating(),{touched:a.isFieldTouched(),validating:a.prevValidating,errors:a.errors,name:a.getNamePath()}},a.getOnlyChild=function(t){if("function"==typeof t){var n=a.getMeta();return de(de({},a.getOnlyChild(t(a.getControlled(),n,a.props.fieldContext))),{},{isFunction:!0})}var r=_e(t);return 1===r.length&&e.isValidElement(r[0])?{child:r[0],isFunction:!1}:{child:r,isFunction:!1}},a.getValue=function(e){var t=a.props.fieldContext.getFieldsValue,n=a.getNamePath();return dt(e||t(!0),n)},a.getControlled=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=a.props,n=t.trigger,r=t.validateTrigger,o=t.getValueFromEvent,i=t.normalize,l=t.valuePropName,u=t.getValueProps,c=t.fieldContext,s=void 0!==r?r:c.validateTrigger,f=a.getNamePath(),d=c.getInternalHooks,p=c.getFieldsValue,h=d(Te),m=h.dispatch,v=a.getValue(),g=u||function(e){return se({},l,e)},y=e[n],b=de(de({},e),g(v));b[n]=function(){var e;a.touched=!0,a.dirty=!0;for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];e=o?o.apply(void 0,n):wt.apply(void 0,[l].concat(n)),i&&(e=i(e,v,p(!0))),m({type:"updateValue",namePath:f,value:e}),y&&y.apply(void 0,n)};var w=Le(s||[]);return w.forEach((function(e){var t=b[e];b[e]=function(){t&&t.apply(void 0,arguments);var n=a.props.rules;n&&n.length&&m({type:"validateField",namePath:f,triggerName:e})}})),b},t.fieldContext&&(0,(0,t.fieldContext.getInternalHooks)(Te).initEntityValue)(we(a)),a}return be(r,[{key:"componentDidMount",value:function(){var e=this.props,t=e.shouldUpdate,n=e.fieldContext;if(this.mounted=!0,n){var r=(0,n.getInternalHooks)(Te).registerField;this.cancelRegisterFunc=r(this)}!0===t&&this.reRender()}},{key:"componentWillUnmount",value:function(){this.cancelRegister(),this.mounted=!1}},{key:"reRender",value:function(){this.mounted&&this.forceUpdate()}},{key:"render",value:function(){var t,n=this.state.resetCount,r=this.props.children,a=this.getOnlyChild(r),o=a.child;return a.isFunction?t=o:e.isValidElement(o)?t=e.cloneElement(o,this.getControlled(o.props)):(Oe(!o,"`children` of Field is not validate ReactElement."),t=o),e.createElement(e.Fragment,{key:n},t)}}]),r}(e.Component);Tt.contextType=Ae,Tt.defaultProps={trigger:"onChange",valuePropName:"value"};const Mt=function(t){var n=t.name,r=ce(t,["name"]),a=e.useContext(Ae),o=void 0!==n?ft(n):void 0,l="keep";return r.isListField||(l="_".concat((o||[]).join("_"))),e.createElement(Tt,(0,i.default)({key:l,name:o},r,{fieldContext:a}))};function At(e,t){return ut(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}}(e,t)||me(e,t)||ct()}const Lt=function(){function e(){ge(this,e),this.list=[]}return be(e,[{key:"set",value:function(e,t){var n=this.list.findIndex((function(t){return bt(t.key,e)}));-1!==n?this.list[n].value=t:this.list.push({key:e,value:t})}},{key:"get",value:function(e){var t=this.list.find((function(t){return bt(t.key,e)}));return t&&t.value}},{key:"update",value:function(e,t){var n=t(this.get(e));n?this.set(e,n):this.delete(e)}},{key:"delete",value:function(e){this.list=this.list.filter((function(t){return!bt(t.key,e)}))}},{key:"map",value:function(e){return this.list.map(e)}},{key:"toJSON",value:function(){var e={};return this.map((function(t){var n=t.key,r=t.value;return e[n.join(".")]=r,null})),e}}]),e}();var Rt=function e(t){var n=this;ge(this,e),this.formHooked=!1,this.subscribable=!0,this.store={},this.fieldEntities=[],this.initialValues={},this.callbacks={},this.validateMessages=null,this.preserve=null,this.lastValidatePromise=null,this.getForm=function(){return{getFieldValue:n.getFieldValue,getFieldsValue:n.getFieldsValue,getFieldError:n.getFieldError,getFieldsError:n.getFieldsError,isFieldsTouched:n.isFieldsTouched,isFieldTouched:n.isFieldTouched,isFieldValidating:n.isFieldValidating,isFieldsValidating:n.isFieldsValidating,resetFields:n.resetFields,setFields:n.setFields,setFieldsValue:n.setFieldsValue,validateFields:n.validateFields,submit:n.submit,getInternalHooks:n.getInternalHooks}},this.getInternalHooks=function(e){return e===Te?(n.formHooked=!0,{dispatch:n.dispatch,initEntityValue:n.initEntityValue,registerField:n.registerField,useSubscribe:n.useSubscribe,setInitialValues:n.setInitialValues,setCallbacks:n.setCallbacks,setValidateMessages:n.setValidateMessages,getFields:n.getFields,setPreserve:n.setPreserve}):(Oe(!1,"`getInternalHooks` is internal usage. Should not call directly."),null)},this.useSubscribe=function(e){n.subscribable=e},this.setInitialValues=function(e,t){n.initialValues=e||{},t&&(n.store=yt({},e,n.store))},this.getInitialValue=function(e){return dt(n.initialValues,e)},this.setCallbacks=function(e){n.callbacks=e},this.setValidateMessages=function(e){n.validateMessages=e},this.setPreserve=function(e){n.preserve=e},this.timeoutId=null,this.warningUnhooked=function(){},this.getFieldEntities=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return e?n.fieldEntities.filter((function(e){return e.getNamePath().length})):n.fieldEntities},this.getFieldsMap=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=new Lt;return n.getFieldEntities(e).forEach((function(e){var n=e.getNamePath();t.set(n,e)})),t},this.getFieldEntitiesForNamePathList=function(e){if(!e)return n.getFieldEntities(!0);var t=n.getFieldsMap(!0);return e.map((function(e){var n=ft(e);return t.get(n)||{INVALIDATE_NAME_PATH:ft(e)}}))},this.getFieldsValue=function(e,t){if(n.warningUnhooked(),!0===e&&!t)return n.store;var r=n.getFieldEntitiesForNamePathList(Array.isArray(e)?e:null),a=[];return r.forEach((function(n){var r,o="INVALIDATE_NAME_PATH"in n?n.INVALIDATE_NAME_PATH:n.getNamePath();if(e||!(null===(r=n.isListField)||void 0===r?void 0:r.call(n)))if(t){var i="getMeta"in n?n.getMeta():null;t(i)&&a.push(o)}else a.push(o)})),ht(n.store,a.map(ft))},this.getFieldValue=function(e){n.warningUnhooked();var t=ft(e);return dt(n.store,t)},this.getFieldsError=function(e){return n.warningUnhooked(),n.getFieldEntitiesForNamePathList(e).map((function(t,n){return t&&!("INVALIDATE_NAME_PATH"in t)?{name:t.getNamePath(),errors:t.getErrors()}:{name:ft(e[n]),errors:[]}}))},this.getFieldError=function(e){n.warningUnhooked();var t=ft(e);return n.getFieldsError([t])[0].errors},this.isFieldsTouched=function(){n.warningUnhooked();for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var a,o=t[0],i=t[1],l=!1;0===t.length?a=null:1===t.length?Array.isArray(o)?(a=o.map(ft),l=!1):(a=null,l=o):(a=o.map(ft),l=i);var u=n.getFieldEntities(!0),c=function(e){return e.isFieldTouched()};if(!a)return l?u.every(c):u.some(c);var s=new Lt;a.forEach((function(e){s.set(e,[])})),u.forEach((function(e){var t=e.getNamePath();a.forEach((function(n){n.every((function(e,n){return t[n]===e}))&&s.update(n,(function(t){return[].concat(ve(t),[e])}))}))}));var f=function(e){return e.some(c)},d=s.map((function(e){return e.value}));return l?d.every(f):d.some(f)},this.isFieldTouched=function(e){return n.warningUnhooked(),n.isFieldsTouched([e])},this.isFieldsValidating=function(e){n.warningUnhooked();var t=n.getFieldEntities();if(!e)return t.some((function(e){return e.isFieldValidating()}));var r=e.map(ft);return t.some((function(e){var t=e.getNamePath();return mt(r,t)&&e.isFieldValidating()}))},this.isFieldValidating=function(e){return n.warningUnhooked(),n.isFieldsValidating([e])},this.resetWithFieldInitialValue=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=new Lt,r=n.getFieldEntities(!0);r.forEach((function(e){var n=e.props.initialValue,r=e.getNamePath();if(void 0!==n){var a=t.get(r)||new Set;a.add({entity:e,value:n}),t.set(r,a)}}));var a,o=function(r){r.forEach((function(r){if(void 0!==r.props.initialValue){var a=r.getNamePath();if(void 0!==n.getInitialValue(a))Oe(!1,"Form already set 'initialValues' with path '".concat(a.join("."),"'. Field can not overwrite it."));else{var o=t.get(a);if(o&&o.size>1)Oe(!1,"Multiple Field with path '".concat(a.join("."),"' set 'initialValue'. Can not decide which one to pick."));else if(o){var i=n.getFieldValue(a);e.skipExist&&void 0!==i||(n.store=pt(n.store,a,ve(o)[0].value))}}}}))};e.entities?a=e.entities:e.namePathList?(a=[],e.namePathList.forEach((function(e){var n,r=t.get(e);r&&(n=a).push.apply(n,ve(ve(r).map((function(e){return e.entity}))))}))):a=r,o(a)},this.resetFields=function(e){n.warningUnhooked();var t=n.store;if(!e)return n.store=yt({},n.initialValues),n.resetWithFieldInitialValue(),void n.notifyObservers(t,null,{type:"reset"});var r=e.map(ft);r.forEach((function(e){var t=n.getInitialValue(e);n.store=pt(n.store,e,t)})),n.resetWithFieldInitialValue({namePathList:r}),n.notifyObservers(t,r,{type:"reset"})},this.setFields=function(e){n.warningUnhooked();var t=n.store;e.forEach((function(e){var r=e.name,a=(e.errors,ce(e,["name","errors"])),o=ft(r);"value"in a&&(n.store=pt(n.store,o,a.value)),n.notifyObservers(t,[o],{type:"setField",data:e})}))},this.getFields=function(){return n.getFieldEntities(!0).map((function(e){var t=e.getNamePath(),r=de(de({},e.getMeta()),{},{name:t,value:n.getFieldValue(t)});return Object.defineProperty(r,"originRCField",{value:!0}),r}))},this.initEntityValue=function(e){var t=e.props.initialValue;if(void 0!==t){var r=e.getNamePath();void 0===dt(n.store,r)&&(n.store=pt(n.store,r,t))}},this.registerField=function(e){if(n.fieldEntities.push(e),void 0!==e.props.initialValue){var t=n.store;n.resetWithFieldInitialValue({entities:[e],skipExist:!0}),n.notifyObservers(t,[e.getNamePath()],{type:"valueUpdate",source:"internal"})}return function(t,r){if(n.fieldEntities=n.fieldEntities.filter((function(t){return t!==e})),!1===(void 0!==r?r:n.preserve)&&!t){var a=e.getNamePath();a.length&&void 0!==n.getFieldValue(a)&&(n.store=pt(n.store,a,void 0))}}},this.dispatch=function(e){switch(e.type){case"updateValue":var t=e.namePath,r=e.value;n.updateValue(t,r);break;case"validateField":var a=e.namePath,o=e.triggerName;n.validateFields([a],{triggerName:o})}},this.notifyObservers=function(e,t,r){if(n.subscribable){var a=de(de({},r),{},{store:n.getFieldsValue(!0)});n.getFieldEntities().forEach((function(n){(0,n.onStoreChange)(e,t,a)}))}else n.forceRootUpdate()},this.updateValue=function(e,t){var r=ft(e),a=n.store;n.store=pt(n.store,r,t),n.notifyObservers(a,[r],{type:"valueUpdate",source:"internal"});var o=n.getDependencyChildrenFields(r);o.length&&n.validateFields(o),n.notifyObservers(a,o,{type:"dependenciesUpdate",relatedFields:[r].concat(ve(o))});var i=n.callbacks.onValuesChange;i&&i(ht(n.store,[r]),n.getFieldsValue()),n.triggerOnFieldsChange([r].concat(ve(o)))},this.setFieldsValue=function(e){n.warningUnhooked();var t=n.store;e&&(n.store=yt(n.store,e)),n.notifyObservers(t,null,{type:"valueUpdate",source:"external"})},this.getDependencyChildrenFields=function(e){var t=new Set,r=[],a=new Lt;return n.getFieldEntities().forEach((function(e){(e.props.dependencies||[]).forEach((function(t){var n=ft(t);a.update(n,(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Set;return t.add(e),t}))}))})),function e(n){(a.get(n)||new Set).forEach((function(n){if(!t.has(n)){t.add(n);var a=n.getNamePath();n.isFieldDirty()&&a.length&&(r.push(a),e(a))}}))}(e),r},this.triggerOnFieldsChange=function(e,t){var r=n.callbacks.onFieldsChange;if(r){var a=n.getFields();if(t){var o=new Lt;t.forEach((function(e){var t=e.name,n=e.errors;o.set(t,n)})),a.forEach((function(e){e.errors=o.get(e.name)||e.errors}))}r(a.filter((function(t){var n=t.name;return mt(e,n)})),a)}},this.validateFields=function(e,t){n.warningUnhooked();var r=!!e,a=r?e.map(ft):[],o=[];n.getFieldEntities(!0).forEach((function(i){if(r||a.push(i.getNamePath()),(null==t?void 0:t.recursive)&&r){var l=i.getNamePath();l.every((function(t,n){return e[n]===t||void 0===e[n]}))&&a.push(l)}if(i.props.rules&&i.props.rules.length){var u=i.getNamePath();if(!r||mt(a,u)){var c=i.validateRules(de({validateMessages:de(de({},xt),n.validateMessages)},t));o.push(c.then((function(){return{name:u,errors:[]}})).catch((function(e){return Promise.reject({name:u,errors:e})})))}}}));var i=function(e){var t=!1,n=e.length,r=[];return e.length?new Promise((function(a,o){e.forEach((function(e,i){e.catch((function(e){return t=!0,e})).then((function(e){n-=1,r[i]=e,n>0||(t&&o(r),a(r))}))}))})):Promise.resolve([])}(o);n.lastValidatePromise=i,i.catch((function(e){return e})).then((function(e){var t=e.map((function(e){return e.name}));n.notifyObservers(n.store,t,{type:"validateFinish"}),n.triggerOnFieldsChange(t,e)}));var l=i.then((function(){return n.lastValidatePromise===i?Promise.resolve(n.getFieldsValue(a)):Promise.reject([])})).catch((function(e){var t=e.filter((function(e){return e&&e.errors.length}));return Promise.reject({values:n.getFieldsValue(a),errorFields:t,outOfDate:n.lastValidatePromise!==i})}));return l.catch((function(e){return e})),l},this.submit=function(){n.warningUnhooked(),n.validateFields().then((function(e){var t=n.callbacks.onFinish;if(t)try{t(e)}catch(e){console.error(e)}})).catch((function(e){var t=n.callbacks.onFinishFailed;t&&t(e)}))},this.forceRootUpdate=t};const jt=function(t){var n=e.useRef(),r=At(e.useState({}),2)[1];if(!n.current)if(t)n.current=t;else{var a=new Rt((function(){r({})}));n.current=a.getForm()}return[n.current]};var zt=e.createContext({triggerFormChange:function(){},triggerFormFinish:function(){},registerForm:function(){},unregisterForm:function(){}}),It=function(t){var n=t.validateMessages,r=t.onFormChange,a=t.onFormFinish,o=t.children,i=e.useContext(zt),l=e.useRef({});return e.createElement(zt.Provider,{value:de(de({},i),{},{validateMessages:de(de({},i.validateMessages),n),triggerFormChange:function(e,t){r&&r(e,{changedFields:t,forms:l.current}),i.triggerFormChange(e,t)},triggerFormFinish:function(e,t){a&&a(e,{values:t,forms:l.current}),i.triggerFormFinish(e,t)},registerForm:function(e,t){e&&(l.current=de(de({},l.current),{},se({},e,t))),i.registerForm(e,t)},unregisterForm:function(e){var t=de({},l.current);delete t[e],l.current=t,i.unregisterForm(e)}})},o)};const $t=zt,Vt=function(t,n){var r=t.name,a=t.initialValues,o=t.fields,l=t.form,u=t.preserve,c=t.children,s=t.component,f=void 0===s?"form":s,d=t.validateMessages,p=t.validateTrigger,h=void 0===p?"onChange":p,m=t.onValuesChange,v=t.onFieldsChange,g=t.onFinish,y=t.onFinishFailed,b=ce(t,["name","initialValues","fields","form","preserve","children","component","validateMessages","validateTrigger","onValuesChange","onFieldsChange","onFinish","onFinishFailed"]),w=e.useContext($t),k=At(jt(l),1)[0],E=k.getInternalHooks(Te),x=E.useSubscribe,C=E.setInitialValues,S=E.setCallbacks,P=E.setValidateMessages,_=E.setPreserve;e.useImperativeHandle(n,(function(){return k})),e.useEffect((function(){return w.registerForm(r,k),function(){w.unregisterForm(r)}}),[w,k,r]),P(de(de({},w.validateMessages),d)),S({onValuesChange:m,onFieldsChange:function(e){if(w.triggerFormChange(r,e),v){for(var t=arguments.length,n=new Array(t>1?t-1:0),a=1;a<t;a++)n[a-1]=arguments[a];v.apply(void 0,[e].concat(n))}},onFinish:function(e){w.triggerFormFinish(r,e),g&&g(e)},onFinishFailed:y}),_(u);var F=e.useRef(null);C(a,!F.current),F.current||(F.current=!0);var N=c,O="function"==typeof c;O&&(N=c(k.getFieldsValue(!0),k)),x(!O);var T=e.useRef();e.useEffect((function(){(function(e,t){if(e===t)return!0;if(!e&&t||e&&!t)return!1;if(!e||!t||"object"!==Ce(e)||"object"!==Ce(t))return!1;var n=Object.keys(e),r=Object.keys(t),a=new Set([].concat(ve(n),ve(r)));return ve(a).every((function(n){var r=e[n],a=t[n];return"function"==typeof r&&"function"==typeof a||r===a}))})(T.current||[],o||[])||k.setFields(o||[]),T.current=o}),[o,k]);var M=e.useMemo((function(){return de(de({},k),{},{validateTrigger:h})}),[k,h]),A=e.createElement(Ae.Provider,{value:M},N);return!1===f?A:e.createElement(f,(0,i.default)({},b,{onSubmit:function(e){e.preventDefault(),e.stopPropagation(),k.submit()}}),A)};var Dt=e.forwardRef(Vt);Dt.FormProvider=It,Dt.Field=Mt,Dt.List=function(t){var n=t.name,r=t.initialValue,a=t.children,o=t.rules,i=t.validateTrigger,l=e.useContext(Ae),u=e.useRef({keys:[],id:0}).current;if("function"!=typeof a)return Oe(!1,"Form.List only accepts function as children."),null;var c=ft(l.prefixName)||[],s=[].concat(ve(c),ve(ft(n)));return e.createElement(Ae.Provider,{value:de(de({},l),{},{prefixName:s})},e.createElement(Mt,{name:[],shouldUpdate:function(e,t,n){return"internal"!==n.source&&e!==t},rules:o,validateTrigger:i,initialValue:r,isList:!0},(function(e,t){var n=e.value,r=void 0===n?[]:n,o=e.onChange,i=l.getFieldValue,c=function(){return i(s||[])||[]},f={add:function(e,t){var n=c();t>=0&&t<=n.length?(u.keys=[].concat(ve(u.keys.slice(0,t)),[u.id],ve(u.keys.slice(t))),o([].concat(ve(n.slice(0,t)),[e],ve(n.slice(t))))):(u.keys=[].concat(ve(u.keys),[u.id]),o([].concat(ve(n),[e]))),u.id+=1},remove:function(e){var t=c(),n=new Set(Array.isArray(e)?e:[e]);n.size<=0||(u.keys=u.keys.filter((function(e,t){return!n.has(t)})),o(t.filter((function(e,t){return!n.has(t)}))))},move:function(e,t){if(e!==t){var n=c();e<0||e>=n.length||t<0||t>=n.length||(u.keys=kt(u.keys,e,t),o(kt(n,e,t)))}}},d=r||[];return Array.isArray(d)||(d=[]),a(d.map((function(e,t){var n=u.keys[t];return void 0===n&&(u.keys[t]=u.id,n=u.keys[t],u.id+=1),{name:t,key:n,isListField:!0}})),f,t)})))},Dt.useForm=jt;const Ut={placeholder:"Select time",rangePlaceholder:["Start time","End time"]};var Ht={lang:(0,i.default)({placeholder:"Select date",yearPlaceholder:"Select year",quarterPlaceholder:"Select quarter",monthPlaceholder:"Select month",weekPlaceholder:"Select week",rangePlaceholder:["Start date","End date"],rangeYearPlaceholder:["Start year","End year"],rangeMonthPlaceholder:["Start month","End month"],rangeWeekPlaceholder:["Start week","End week"]},{locale:"en_US",today:"Today",now:"Now",backToToday:"Back to today",ok:"Ok",clear:"Clear",month:"Month",year:"Year",timeSelect:"select time",dateSelect:"select date",weekSelect:"Choose a week",monthSelect:"Choose a month",yearSelect:"Choose a year",decadeSelect:"Choose a decade",yearFormat:"YYYY",dateFormat:"M/D/YYYY",dayFormat:"D",dateTimeFormat:"M/D/YYYY HH:mm:ss",monthBeforeYear:!0,previousMonth:"Previous month (PageUp)",nextMonth:"Next month (PageDown)",previousYear:"Last year (Control + left)",nextYear:"Next year (Control + right)",previousDecade:"Last decade",nextDecade:"Next decade",previousCentury:"Last century",nextCentury:"Next century"}),timePickerLocale:(0,i.default)({},Ut)},Bt="${label} is not a valid ${type}";const qt={locale:"en",Pagination:{items_per_page:"/ page",jump_to:"Go to",jump_to_confirm:"confirm",page:"",prev_page:"Previous Page",next_page:"Next Page",prev_5:"Previous 5 Pages",next_5:"Next 5 Pages",prev_3:"Previous 3 Pages",next_3:"Next 3 Pages"},DatePicker:Ht,TimePicker:Ut,Calendar:Ht,global:{placeholder:"Please select"},Table:{filterTitle:"Filter menu",filterConfirm:"OK",filterReset:"Reset",filterEmptyText:"No filters",emptyText:"No data",selectAll:"Select current page",selectInvert:"Invert current page",selectNone:"Clear all data",selectionAll:"Select all data",sortTitle:"Sort",expand:"Expand row",collapse:"Collapse row",triggerDesc:"Click to sort descending",triggerAsc:"Click to sort ascending",cancelSort:"Click to cancel sorting"},Modal:{okText:"OK",cancelText:"Cancel",justOkText:"OK"},Popconfirm:{okText:"OK",cancelText:"Cancel"},Transfer:{titles:["",""],searchPlaceholder:"Search here",itemUnit:"item",itemsUnit:"items",remove:"Remove",selectCurrent:"Select current page",removeCurrent:"Remove current page",selectAll:"Select all data",removeAll:"Remove all data",selectInvert:"Invert current page"},Upload:{uploading:"Uploading...",removeFile:"Remove file",uploadError:"Upload error",previewFile:"Preview file",downloadFile:"Download file"},Empty:{description:"No Data"},Icon:{icon:"icon"},Text:{edit:"Edit",copy:"Copy",copied:"Copied",expand:"Expand"},PageHeader:{back:"Back"},Form:{optional:"(optional)",defaultValidateMessages:{default:"Field validation error for ${label}",required:"Please enter ${label}",enum:"${label} must be one of [${enum}]",whitespace:"${label} cannot be a blank character",date:{format:"${label} date format is invalid",parse:"${label} cannot be converted to a date",invalid:"${label} is an invalid date"},types:{string:Bt,method:Bt,array:Bt,object:Bt,number:Bt,date:Bt,boolean:Bt,integer:Bt,float:Bt,regexp:Bt,email:Bt,url:Bt,hex:Bt},string:{len:"${label} must be ${len} characters",min:"${label} must be at least ${min} characters",max:"${label} must be up to ${max} characters",range:"${label} must be between ${min}-${max} characters"},number:{len:"${label} must be equal to ${len}",min:"${label} must be minimum ${min}",max:"${label} must be maximum ${max}",range:"${label} must be between ${min}-${max}"},array:{len:"Must be ${len} ${label}",min:"At least ${min} ${label}",max:"At most ${max} ${label}",range:"The amount of ${label} must be between ${min}-${max}"},pattern:{mismatch:"${label} does not match the pattern ${pattern}"}}},Image:{preview:"Preview"}};var Wt=(0,i.default)({},qt.Modal);function Yt(e){Wt=e?(0,i.default)((0,i.default)({},Wt),e):(0,i.default)({},qt.Modal)}const Kt=(0,e.createContext)(void 0);var Qt="internalMark",Gt=function(t){Ee(r,t);var n=Pe(r);function r(e){var t,a;return ge(this,r),t=n.call(this,e),Yt(e.locale&&e.locale.Modal),a=e._ANT_MARK__===Qt,Oe(a,"[antd: ".concat("LocaleProvider","] ").concat("`LocaleProvider` is deprecated. Please use `locale` with `ConfigProvider` instead: http://u.ant.design/locale")),t}return be(r,[{key:"componentDidUpdate",value:function(e){var t=this.props.locale;e.locale!==t&&Yt(t&&t.Modal)}},{key:"componentWillUnmount",value:function(){Yt()}},{key:"render",value:function(){var t=this.props,n=t.locale,r=t.children;return e.createElement(Kt.Provider,{value:(0,i.default)((0,i.default)({},n),{exist:!0})},r)}}]),r}(e.Component);Gt.defaultProps={locale:{}};const Zt=qt;var Xt=function(e){Ee(n,e);var t=Pe(n);function n(){return ge(this,n),t.apply(this,arguments)}return be(n,[{key:"getLocale",value:function(){var e=this.props,t=e.componentName,n=e.defaultLocale||Zt[t||"global"],r=this.context,a=t&&r?r[t]:{};return(0,i.default)((0,i.default)({},"function"==typeof n?n():n),a||{})}},{key:"getLocaleCode",value:function(){var e=this.context,t=e&&e.locale;return e&&e.exist&&!t?Zt.locale:t}},{key:"render",value:function(){return this.props.children(this.getLocale(),this.getLocaleCode(),this.context)}}]),n}(e.Component);Xt.defaultProps={componentName:"global"},Xt.contextType=Kt;var Jt=n(184),en=n.n(Jt);const tn=function(){var t=(0,e.useContext(un).getPrefixCls)("empty-img-default");return e.createElement("svg",{className:t,width:"184",height:"152",viewBox:"0 0 184 152",xmlns:"http://www.w3.org/2000/svg"},e.createElement("g",{fill:"none",fillRule:"evenodd"},e.createElement("g",{transform:"translate(24 31.67)"},e.createElement("ellipse",{className:"".concat(t,"-ellipse"),cx:"67.797",cy:"106.89",rx:"67.797",ry:"12.668"}),e.createElement("path",{className:"".concat(t,"-path-1"),d:"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z"}),e.createElement("path",{className:"".concat(t,"-path-2"),d:"M101.537 86.214L80.63 61.102c-1.001-1.207-2.507-1.867-4.048-1.867H31.724c-1.54 0-3.047.66-4.048 1.867L6.769 86.214v13.792h94.768V86.214z",transform:"translate(13.56)"}),e.createElement("path",{className:"".concat(t,"-path-3"),d:"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z"}),e.createElement("path",{className:"".concat(t,"-path-4"),d:"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z"})),e.createElement("path",{className:"".concat(t,"-path-5"),d:"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z"}),e.createElement("g",{className:"".concat(t,"-g"),transform:"translate(149.65 15.383)"},e.createElement("ellipse",{cx:"20.654",cy:"3.167",rx:"2.849",ry:"2.815"}),e.createElement("path",{d:"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z"}))))},nn=function(){var t=(0,e.useContext(un).getPrefixCls)("empty-img-simple");return e.createElement("svg",{className:t,width:"64",height:"41",viewBox:"0 0 64 41",xmlns:"http://www.w3.org/2000/svg"},e.createElement("g",{transform:"translate(0 1)",fill:"none",fillRule:"evenodd"},e.createElement("ellipse",{className:"".concat(t,"-ellipse"),cx:"32",cy:"33",rx:"32",ry:"7"}),e.createElement("g",{className:"".concat(t,"-g"),fillRule:"nonzero"},e.createElement("path",{d:"M55 12.76L44.854 1.258C44.367.474 43.656 0 42.907 0H21.093c-.749 0-1.46.474-1.947 1.257L9 12.761V22h46v-9.24z"}),e.createElement("path",{d:"M41.613 15.931c0-1.605.994-2.93 2.227-2.931H55v18.137C55 33.26 53.68 35 52.05 35h-40.1C10.32 35 9 33.259 9 31.137V13h11.16c1.233 0 2.227 1.323 2.227 2.928v.022c0 1.605 1.005 2.901 2.237 2.901h14.752c1.232 0 2.237-1.308 2.237-2.913v-.007z",className:"".concat(t,"-path")}))))};var rn=e.createElement(tn,null),an=e.createElement(nn,null),on=function(t){var n=t.className,r=t.prefixCls,a=t.image,o=void 0===a?rn:a,l=t.description,u=t.children,c=t.imageStyle,s=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["className","prefixCls","image","description","children","imageStyle"]),f=e.useContext(un),d=f.getPrefixCls,p=f.direction;return e.createElement(Xt,{componentName:"Empty"},(function(t){var a,f,h=d("empty",r),m=void 0!==l?l:t.description,v="string"==typeof m?m:"empty";return f="string"==typeof o?e.createElement("img",{alt:v,src:o}):o,e.createElement("div",(0,i.default)({className:en()(h,(a={},se(a,"".concat(h,"-normal"),o===an),se(a,"".concat(h,"-rtl"),"rtl"===p),a),n)},s),e.createElement("div",{className:"".concat(h,"-image"),style:c},f),m&&e.createElement("p",{className:"".concat(h,"-description")},m),u&&e.createElement("div",{className:"".concat(h,"-footer")},u))}))};on.PRESENTED_IMAGE_DEFAULT=rn,on.PRESENTED_IMAGE_SIMPLE=an;const ln=on;var un=e.createContext({getPrefixCls:function(e,t){return t||(e?"ant-".concat(e):"ant")},renderEmpty:function(t){return e.createElement(cn,null,(function(n){var r=(0,n.getPrefixCls)("empty");switch(t){case"Table":case"List":return e.createElement(ln,{image:ln.PRESENTED_IMAGE_SIMPLE});case"Select":case"TreeSelect":case"Cascader":case"Transfer":case"Mentions":return e.createElement(ln,{image:ln.PRESENTED_IMAGE_SIMPLE,className:"".concat(r,"-small")});default:return e.createElement(ln,null)}}))}}),cn=un.Consumer,sn=e.createContext(void 0),fn=function(t){var n=t.children,r=t.size;return e.createElement(sn.Consumer,null,(function(t){return e.createElement(sn.Provider,{value:r||t},n)}))};function dn(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}function pn(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit".concat(e)]="webkit".concat(t),n["Moz".concat(e)]="moz".concat(t),n["ms".concat(e)]="MS".concat(t),n["O".concat(e)]="o".concat(t.toLowerCase()),n}var hn,mn,vn,gn=(hn=dn(),mn="undefined"!=typeof window?window:{},vn={animationend:pn("Animation","AnimationEnd"),transitionend:pn("Transition","TransitionEnd")},hn&&("AnimationEvent"in mn||delete vn.animationend.animation,"TransitionEvent"in mn||delete vn.transitionend.transition),vn),yn={};if(dn()){var bn=document.createElement("div");yn=bn.style}var wn={};function kn(e){if(wn[e])return wn[e];var t=gn[e];if(t)for(var n=Object.keys(t),r=n.length,a=0;a<r;a+=1){var o=n[a];if(Object.prototype.hasOwnProperty.call(t,o)&&o in yn)return wn[e]=t[o],wn[e]}return""}var En=kn("animationend"),xn=kn("transitionend"),Cn=!(!En||!xn),Sn=En||"animationend",Pn=xn||"transitionend";function _n(e,t){return e?"object"===Ce(e)?e[t.replace(/-\w/g,(function(e){return e[1].toUpperCase()}))]:"".concat(e,"-").concat(t):null}var Fn="none",Nn="appear",On="enter",Tn="leave",Mn="none",An="prepare",Ln="start",Rn="active",jn="end";function zn(t){var n=(0,e.useRef)(!1),r=At((0,e.useState)(t),2),a=r[0],o=r[1];return(0,e.useEffect)((function(){return function(){n.current=!0}}),[]),[a,function(e){n.current||o(e)}]}const In=dn()?e.useLayoutEffect:e.useEffect;var $n=function(e){return+setTimeout(e,16)},Vn=function(e){return clearTimeout(e)};function Dn(e){return $n(e)}"undefined"!=typeof window&&"requestAnimationFrame"in window&&($n=function(e){return window.requestAnimationFrame(e)},Vn=function(e){return window.cancelAnimationFrame(e)}),Dn.cancel=Vn;var Un=[An,Ln,Rn,jn];function Hn(e){return e===Rn||e===jn}function Bn(t,n,r,a){var o=a.motionEnter,i=void 0===o||o,l=a.motionAppear,u=void 0===l||l,c=a.motionLeave,s=void 0===c||c,f=a.motionDeadline,d=a.motionLeaveImmediately,p=a.onAppearPrepare,h=a.onEnterPrepare,m=a.onLeavePrepare,v=a.onAppearStart,g=a.onEnterStart,y=a.onLeaveStart,b=a.onAppearActive,w=a.onEnterActive,k=a.onLeaveActive,E=a.onAppearEnd,x=a.onEnterEnd,C=a.onLeaveEnd,S=a.onVisibleChanged,P=At(zn(),2),_=P[0],F=P[1],N=At(zn(Fn),2),O=N[0],T=N[1],M=At(zn(null),2),A=M[0],L=M[1],R=(0,e.useRef)(!1),j=(0,e.useRef)(null),z=(0,e.useRef)(!1),I=(0,e.useRef)(null);function $(){return r()||I.current}var V=(0,e.useRef)(!1);function D(e){var t,n=$();e&&!e.deadline&&e.target!==n||(O===Nn&&V.current?t=null==E?void 0:E(n,e):O===On&&V.current?t=null==x?void 0:x(n,e):O===Tn&&V.current&&(t=null==C?void 0:C(n,e)),!1===t||z.current||(T(Fn),L(null)))}var U=At(function(t){var n=(0,e.useRef)(),r=(0,e.useRef)(t);r.current=t;var a=e.useCallback((function(e){r.current(e)}),[]);function o(e){e&&(e.removeEventListener(Pn,a),e.removeEventListener(Sn,a))}return e.useEffect((function(){return function(){o(n.current)}}),[]),[function(e){n.current&&n.current!==e&&o(n.current),e&&e!==n.current&&(e.addEventListener(Pn,a),e.addEventListener(Sn,a),n.current=e)},o]}(D),1)[0],H=e.useMemo((function(){var e,t,n;switch(O){case"appear":return se(e={},An,p),se(e,Ln,v),se(e,Rn,b),e;case"enter":return se(t={},An,h),se(t,Ln,g),se(t,Rn,w),t;case"leave":return se(n={},An,m),se(n,Ln,y),se(n,Rn,k),n;default:return{}}}),[O]),B=At(function(t,n){var r=At(e.useState(Mn),2),a=r[0],o=r[1],i=At(function(){var t=e.useRef(null);function n(){Dn.cancel(t.current)}return e.useEffect((function(){return function(){n()}}),[]),[function e(r){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;n();var o=Dn((function(){a<=1?r({isCanceled:function(){return o!==t.current}}):e(r,a-1)}));t.current=o},n]}(),2),l=i[0],u=i[1];return In((function(){if(a!==Mn&&a!==jn){var e=Un.indexOf(a),t=Un[e+1],r=n(a);!1===r?o(t):l((function(e){function n(){e.isCanceled()||o(t)}!0===r?n():Promise.resolve(r).then(n)}))}}),[t,a]),e.useEffect((function(){return function(){u()}}),[]),[function(){o(An)},a]}(O,(function(e){if(e===An){var t=H.prepare;return!!t&&t($())}var n;return W in H&&L((null===(n=H[W])||void 0===n?void 0:n.call(H,$(),null))||null),W===Rn&&(U($()),f>0&&(clearTimeout(j.current),j.current=setTimeout((function(){D({deadline:!0})}),f))),!0})),2),q=B[0],W=B[1],Y=Hn(W);V.current=Y,In((function(){if(F(n),t){var e,r=R.current;R.current=!0,!r&&n&&u&&(e=Nn),r&&n&&i&&(e=On),(r&&!n&&s||!r&&d&&!n&&s)&&(e=Tn),e&&(T(e),q())}}),[n]),(0,e.useEffect)((function(){(O===Nn&&!u||O===On&&!i||O===Tn&&!s)&&T(Fn)}),[u,i,s]),(0,e.useEffect)((function(){return function(){clearTimeout(j.current),z.current=!0}}),[]),(0,e.useEffect)((function(){void 0!==_&&O===Fn&&(null==S||S(_))}),[_,O]);var K=A;return H.prepare&&W===Ln&&(K=de({transition:"none"},K)),[O,W,K,null!=_?_:n]}const qn=function(e){Ee(n,e);var t=Pe(n);function n(){return ge(this,n),t.apply(this,arguments)}return be(n,[{key:"render",value:function(){return this.props.children}}]),n}(e.Component),Wn=function(n){var r=n;function a(e){return!(!e.motionName||!r)}"object"===Ce(n)&&(r=n.transitionSupport);var o=e.forwardRef((function(n,r){var o=n.visible,i=void 0===o||o,l=n.removeOnLeave,u=void 0===l||l,c=n.forceRender,s=n.children,f=n.motionName,d=n.leavedClassName,p=n.eventProps,h=a(n),m=(0,e.useRef)(),v=(0,e.useRef)(),g=At(Bn(h,i,(function(){try{return(e=m.current||v.current)instanceof HTMLElement?e:t.findDOMNode(e)}catch(e){return null}var e}),n),4),y=g[0],b=g[1],w=g[2],k=g[3],E=(0,e.useRef)(r);E.current=r;var x,C=e.useCallback((function(e){m.current=e,function(e,t){"function"==typeof e?e(t):"object"===Ce(e)&&e&&"current"in e&&(e.current=t)}(E.current,e)}),[]),S=de(de({},p),{},{visible:i});if(s)if(y!==Fn&&a(n)){var P,_;b===An?_="prepare":Hn(b)?_="active":b===Ln&&(_="start"),x=s(de(de({},S),{},{className:en()(_n(f,y),(P={},se(P,_n(f,"".concat(y,"-").concat(_)),_),se(P,f,"string"==typeof f),P)),style:w}),C)}else x=k?s(de({},S),C):u?c?s(de(de({},S),{},{style:{display:"none"}}),C):null:s(de(de({},S),{},{className:d}),C);else x=null;return e.createElement(qn,{ref:v},x)}));return o.displayName="CSSMotion",o}(Cn);var Yn="add",Kn="keep",Qn="remove",Gn="removed";function Zn(e){var t;return de(de({},t=e&&"object"===Ce(e)&&"key"in e?e:{key:e}),{},{key:String(t.key)})}function Xn(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return e.map(Zn)}function Jn(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=[],r=0,a=t.length,o=Xn(e),i=Xn(t);o.forEach((function(e){for(var t=!1,o=r;o<a;o+=1){var l=i[o];if(l.key===e.key){r<o&&(n=n.concat(i.slice(r,o).map((function(e){return de(de({},e),{},{status:Yn})}))),r=o),n.push(de(de({},l),{},{status:Kn})),r+=1,t=!0;break}}t||n.push(de(de({},e),{},{status:Qn}))})),r<a&&(n=n.concat(i.slice(r).map((function(e){return de(de({},e),{},{status:Yn})}))));var l={};n.forEach((function(e){var t=e.key;l[t]=(l[t]||0)+1}));var u=Object.keys(l).filter((function(e){return l[e]>1}));return u.forEach((function(e){(n=n.filter((function(t){var n=t.key,r=t.status;return n!==e||r!==Qn}))).forEach((function(t){t.key===e&&(t.status=Kn)}))})),n}var er=["eventProps","visible","children","motionName","motionAppear","motionEnter","motionLeave","motionLeaveImmediately","motionDeadline","removeOnLeave","leavedClassName","onAppearStart","onAppearActive","onAppearEnd","onEnterStart","onEnterActive","onEnterEnd","onLeaveStart","onLeaveActive","onLeaveEnd"];const tr=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Wn,r=function(t){Ee(a,t);var r=Pe(a);function a(){var e;return ge(this,a),(e=r.apply(this,arguments)).state={keyEntities:[]},e.removeKey=function(t){e.setState((function(e){return{keyEntities:e.keyEntities.map((function(e){return e.key!==t?e:de(de({},e),{},{status:Gn})}))}}))},e}return be(a,[{key:"render",value:function(){var t=this,r=this.state.keyEntities,a=this.props,o=a.component,i=a.children,l=a.onVisibleChanged,u=ce(a,["component","children","onVisibleChanged"]),c=o||e.Fragment,s={};return er.forEach((function(e){s[e]=u[e],delete u[e]})),delete u.keys,e.createElement(c,Object.assign({},u),r.map((function(r){var a=r.status,o=ce(r,["status"]),u=a===Yn||a===Kn;return e.createElement(n,Object.assign({},s,{key:o.key,visible:u,eventProps:o,onVisibleChanged:function(e){null==l||l(e,{key:o.key}),e||t.removeKey(o.key)}}),i)})))}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=e.keys,r=t.keyEntities,a=Xn(n);return{keyEntities:Jn(r,a).filter((function(e){var t=r.find((function(t){var n=t.key;return e.key===n}));return!t||t.status!==Gn||e.status!==Qn}))}}}]),a}(e.Component);return r.defaultProps={component:"div"},r}(Cn);var nr=function(n){Ee(a,n);var r=Pe(a);function a(){var e;return ge(this,a),(e=r.apply(this,arguments)).closeTimer=null,e.close=function(t){t&&t.stopPropagation(),e.clearCloseTimer();var n=e.props,r=n.onClose,a=n.noticeKey;r&&r(a)},e.startCloseTimer=function(){e.props.duration&&(e.closeTimer=window.setTimeout((function(){e.close()}),1e3*e.props.duration))},e.clearCloseTimer=function(){e.closeTimer&&(clearTimeout(e.closeTimer),e.closeTimer=null)},e}return be(a,[{key:"componentDidMount",value:function(){this.startCloseTimer()}},{key:"componentDidUpdate",value:function(e){this.props.duration===e.duration&&this.props.updateMark===e.updateMark||this.restartCloseTimer()}},{key:"componentWillUnmount",value:function(){this.clearCloseTimer()}},{key:"restartCloseTimer",value:function(){this.clearCloseTimer(),this.startCloseTimer()}},{key:"render",value:function(){var n=this,r=this.props,a=r.prefixCls,o=r.className,i=r.closable,l=r.closeIcon,u=r.style,c=r.onClick,s=r.children,f=r.holder,d="".concat(a,"-notice"),p=Object.keys(this.props).reduce((function(e,t){return"data-"!==t.substr(0,5)&&"aria-"!==t.substr(0,5)&&"role"!==t||(e[t]=n.props[t]),e}),{}),h=e.createElement("div",Object.assign({className:en()(d,o,se({},"".concat(d,"-closable"),i)),style:u,onMouseEnter:this.clearCloseTimer,onMouseLeave:this.startCloseTimer,onClick:c},p),e.createElement("div",{className:"".concat(d,"-content")},s),i?e.createElement("a",{tabIndex:0,onClick:this.close,className:"".concat(d,"-close")},l||e.createElement("span",{className:"".concat(d,"-close-x")})):null);return f?t.createPortal(h,f):h}}]),a}(e.Component);function rr(t){var n=e.useRef({}),r=At(e.useState([]),2),a=r[0],o=r[1];return[function(r){t.add(r,(function(t,r){var a=r.key;if(t&&!n.current[a]){var i=e.createElement(nr,Object.assign({},r,{holder:t}));n.current[a]=i,o((function(e){return[].concat(ve(e),[i])}))}}))},e.createElement(e.Fragment,null,a)]}nr.defaultProps={onClose:function(){},duration:1.5};var ar=0,or=Date.now();function ir(){var e=ar;return ar+=1,"rcNotification_".concat(or,"_").concat(e)}var lr=function(t){Ee(r,t);var n=Pe(r);function r(){var e;return ge(this,r),(e=n.apply(this,arguments)).state={notices:[]},e.hookRefs=new Map,e.add=function(t,n){var r=t.key||ir(),a=de(de({},t),{},{key:r}),o=e.props.maxCount;e.setState((function(e){var t=e.notices,i=t.map((function(e){return e.notice.key})).indexOf(r),l=t.concat();return-1!==i?l.splice(i,1,{notice:a,holderCallback:n}):(o&&t.length>=o&&(a.key=l[0].notice.key,a.updateMark=ir(),a.userPassKey=r,l.shift()),l.push({notice:a,holderCallback:n})),{notices:l}}))},e.remove=function(t){e.setState((function(e){return{notices:e.notices.filter((function(e){var n=e.notice,r=n.key;return(n.userPassKey||r)!==t}))}}))},e.noticePropsMap={},e}return be(r,[{key:"getTransitionName",value:function(){var e=this.props,t=e.prefixCls,n=e.animation,r=this.props.transitionName;return!r&&n&&(r="".concat(t,"-").concat(n)),r}},{key:"render",value:function(){var t=this,n=this.state.notices,r=this.props,a=r.prefixCls,o=r.className,i=r.closeIcon,l=r.style,u=[];return n.forEach((function(e,r){var o=e.notice,l=e.holderCallback,c=r===n.length-1?o.updateMark:void 0,s=o.key,f=o.userPassKey,d=de(de(de({prefixCls:a,closeIcon:i},o),o.props),{},{key:s,noticeKey:f||s,updateMark:c,onClose:function(e){var n;t.remove(e),null===(n=o.onClose)||void 0===n||n.call(o)},onClick:o.onClick,children:o.content});u.push(s),t.noticePropsMap[s]={props:d,holderCallback:l}})),e.createElement("div",{className:en()(a,o),style:l},e.createElement(tr,{keys:u,motionName:this.getTransitionName(),onVisibleChanged:function(e,n){var r=n.key;e||delete t.noticePropsMap[r]}},(function(n){var r=n.key,o=n.className,i=n.style,l=t.noticePropsMap[r],u=l.props,c=l.holderCallback;return c?e.createElement("div",{key:r,className:en()(o,"".concat(a,"-hook-holder")),style:de({},i),ref:function(e){void 0!==r&&(e?(t.hookRefs.set(r,e),c(e,u)):t.hookRefs.delete(r))}}):e.createElement(nr,Object.assign({},u,{className:en()(o,null==u?void 0:u.className),style:de(de({},i),null==u?void 0:u.style)}))})))}}]),r}(e.Component);lr.defaultProps={prefixCls:"rc-notification",animation:"fade",style:{top:65,left:"50%"}},lr.newInstance=function(n,r){var a=n||{},o=a.getContainer,i=ce(a,["getContainer"]),l=document.createElement("div");o?o().appendChild(l):document.body.appendChild(l);var u=!1;t.render(e.createElement(lr,Object.assign({},i,{ref:function(e){u||(u=!0,r({notice:function(t){e.add(t)},removeNotice:function(t){e.remove(t)},component:e,destroy:function(){t.unmountComponentAtNode(l),l.parentNode&&l.parentNode.removeChild(l)},useNotification:function(){return rr(e)}}))}})),l)};const ur=lr,cr={icon:{tag:"svg",attrs:{viewBox:"0 0 1024 1024",focusable:"false"},children:[{tag:"path",attrs:{d:"M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z"}}]},name:"loading",theme:"outlined"};function sr(e,t){(function(e){return"string"==typeof e&&e.includes(".")&&1===parseFloat(e)})(e)&&(e="100%");var n=function(e){return"string"==typeof e&&e.includes("%")}(e);return e=360===t?e:Math.min(t,Math.max(0,parseFloat(e))),n&&(e=parseInt(String(e*t),10)/100),Math.abs(e-t)<1e-6?1:e=360===t?(e<0?e%t+t:e%t)/parseFloat(String(t)):e%t/parseFloat(String(t))}function fr(e){return Math.min(1,Math.max(0,e))}function dr(e){return e=parseFloat(e),(isNaN(e)||e<0||e>1)&&(e=1),e}function pr(e){return e<=1?100*Number(e)+"%":e}function hr(e){return 1===e.length?"0"+e:String(e)}function mr(e,t,n){e=sr(e,255),t=sr(t,255),n=sr(n,255);var r=Math.max(e,t,n),a=Math.min(e,t,n),o=0,i=0,l=(r+a)/2;if(r===a)i=0,o=0;else{var u=r-a;switch(i=l>.5?u/(2-r-a):u/(r+a),r){case e:o=(t-n)/u+(t<n?6:0);break;case t:o=(n-e)/u+2;break;case n:o=(e-t)/u+4}o/=6}return{h:o,s:i,l}}function vr(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*n*(t-e):n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}function gr(e,t,n){e=sr(e,255),t=sr(t,255),n=sr(n,255);var r=Math.max(e,t,n),a=Math.min(e,t,n),o=0,i=r,l=r-a,u=0===r?0:l/r;if(r===a)o=0;else{switch(r){case e:o=(t-n)/l+(t<n?6:0);break;case t:o=(n-e)/l+2;break;case n:o=(e-t)/l+4}o/=6}return{h:o,s:u,v:i}}function yr(e,t,n,r){var a=[hr(Math.round(e).toString(16)),hr(Math.round(t).toString(16)),hr(Math.round(n).toString(16))];return r&&a[0].startsWith(a[0].charAt(1))&&a[1].startsWith(a[1].charAt(1))&&a[2].startsWith(a[2].charAt(1))?a[0].charAt(0)+a[1].charAt(0)+a[2].charAt(0):a.join("")}function br(e){return wr(e)/255}function wr(e){return parseInt(e,16)}var kr={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",goldenrod:"#daa520",gold:"#ffd700",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavenderblush:"#fff0f5",lavender:"#e6e6fa",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"};var Er="(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)",xr="[\\s|\\(]+("+Er+")[,|\\s]+("+Er+")[,|\\s]+("+Er+")\\s*\\)?",Cr="[\\s|\\(]+("+Er+")[,|\\s]+("+Er+")[,|\\s]+("+Er+")[,|\\s]+("+Er+")\\s*\\)?",Sr={CSS_UNIT:new RegExp(Er),rgb:new RegExp("rgb"+xr),rgba:new RegExp("rgba"+Cr),hsl:new RegExp("hsl"+xr),hsla:new RegExp("hsla"+Cr),hsv:new RegExp("hsv"+xr),hsva:new RegExp("hsva"+Cr),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/};function Pr(e){return Boolean(Sr.CSS_UNIT.exec(String(e)))}var _r=function(){function e(t,n){var r;if(void 0===t&&(t=""),void 0===n&&(n={}),t instanceof e)return t;"number"==typeof t&&(t=function(e){return{r:e>>16,g:(65280&e)>>8,b:255&e}}(t)),this.originalInput=t;var a=function(e){var t,n,r,a={r:0,g:0,b:0},o=1,i=null,l=null,u=null,c=!1,s=!1;return"string"==typeof e&&(e=function(e){if(0===(e=e.trim().toLowerCase()).length)return!1;var t=!1;if(kr[e])e=kr[e],t=!0;else if("transparent"===e)return{r:0,g:0,b:0,a:0,format:"name"};var n=Sr.rgb.exec(e);return n?{r:n[1],g:n[2],b:n[3]}:(n=Sr.rgba.exec(e))?{r:n[1],g:n[2],b:n[3],a:n[4]}:(n=Sr.hsl.exec(e))?{h:n[1],s:n[2],l:n[3]}:(n=Sr.hsla.exec(e))?{h:n[1],s:n[2],l:n[3],a:n[4]}:(n=Sr.hsv.exec(e))?{h:n[1],s:n[2],v:n[3]}:(n=Sr.hsva.exec(e))?{h:n[1],s:n[2],v:n[3],a:n[4]}:(n=Sr.hex8.exec(e))?{r:wr(n[1]),g:wr(n[2]),b:wr(n[3]),a:br(n[4]),format:t?"name":"hex8"}:(n=Sr.hex6.exec(e))?{r:wr(n[1]),g:wr(n[2]),b:wr(n[3]),format:t?"name":"hex"}:(n=Sr.hex4.exec(e))?{r:wr(n[1]+n[1]),g:wr(n[2]+n[2]),b:wr(n[3]+n[3]),a:br(n[4]+n[4]),format:t?"name":"hex8"}:!!(n=Sr.hex3.exec(e))&&{r:wr(n[1]+n[1]),g:wr(n[2]+n[2]),b:wr(n[3]+n[3]),format:t?"name":"hex"}}(e)),"object"==typeof e&&(Pr(e.r)&&Pr(e.g)&&Pr(e.b)?(t=e.r,n=e.g,r=e.b,a={r:255*sr(t,255),g:255*sr(n,255),b:255*sr(r,255)},c=!0,s="%"===String(e.r).substr(-1)?"prgb":"rgb"):Pr(e.h)&&Pr(e.s)&&Pr(e.v)?(i=pr(e.s),l=pr(e.v),a=function(e,t,n){e=6*sr(e,360),t=sr(t,100),n=sr(n,100);var r=Math.floor(e),a=e-r,o=n*(1-t),i=n*(1-a*t),l=n*(1-(1-a)*t),u=r%6;return{r:255*[n,i,o,o,l,n][u],g:255*[l,n,n,i,o,o][u],b:255*[o,o,l,n,n,i][u]}}(e.h,i,l),c=!0,s="hsv"):Pr(e.h)&&Pr(e.s)&&Pr(e.l)&&(i=pr(e.s),u=pr(e.l),a=function(e,t,n){var r,a,o;if(e=sr(e,360),t=sr(t,100),n=sr(n,100),0===t)a=n,o=n,r=n;else{var i=n<.5?n*(1+t):n+t-n*t,l=2*n-i;r=vr(l,i,e+1/3),a=vr(l,i,e),o=vr(l,i,e-1/3)}return{r:255*r,g:255*a,b:255*o}}(e.h,i,u),c=!0,s="hsl"),Object.prototype.hasOwnProperty.call(e,"a")&&(o=e.a)),o=dr(o),{ok:c,format:e.format||s,r:Math.min(255,Math.max(a.r,0)),g:Math.min(255,Math.max(a.g,0)),b:Math.min(255,Math.max(a.b,0)),a:o}}(t);this.originalInput=t,this.r=a.r,this.g=a.g,this.b=a.b,this.a=a.a,this.roundA=Math.round(100*this.a)/100,this.format=null!==(r=n.format)&&void 0!==r?r:a.format,this.gradientType=n.gradientType,this.r<1&&(this.r=Math.round(this.r)),this.g<1&&(this.g=Math.round(this.g)),this.b<1&&(this.b=Math.round(this.b)),this.isValid=a.ok}return e.prototype.isDark=function(){return this.getBrightness()<128},e.prototype.isLight=function(){return!this.isDark()},e.prototype.getBrightness=function(){var e=this.toRgb();return(299*e.r+587*e.g+114*e.b)/1e3},e.prototype.getLuminance=function(){var e=this.toRgb(),t=e.r/255,n=e.g/255,r=e.b/255;return.2126*(t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4))+.7152*(n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4))+.0722*(r<=.03928?r/12.92:Math.pow((r+.055)/1.055,2.4))},e.prototype.getAlpha=function(){return this.a},e.prototype.setAlpha=function(e){return this.a=dr(e),this.roundA=Math.round(100*this.a)/100,this},e.prototype.toHsv=function(){var e=gr(this.r,this.g,this.b);return{h:360*e.h,s:e.s,v:e.v,a:this.a}},e.prototype.toHsvString=function(){var e=gr(this.r,this.g,this.b),t=Math.round(360*e.h),n=Math.round(100*e.s),r=Math.round(100*e.v);return 1===this.a?"hsv("+t+", "+n+"%, "+r+"%)":"hsva("+t+", "+n+"%, "+r+"%, "+this.roundA+")"},e.prototype.toHsl=function(){var e=mr(this.r,this.g,this.b);return{h:360*e.h,s:e.s,l:e.l,a:this.a}},e.prototype.toHslString=function(){var e=mr(this.r,this.g,this.b),t=Math.round(360*e.h),n=Math.round(100*e.s),r=Math.round(100*e.l);return 1===this.a?"hsl("+t+", "+n+"%, "+r+"%)":"hsla("+t+", "+n+"%, "+r+"%, "+this.roundA+")"},e.prototype.toHex=function(e){return void 0===e&&(e=!1),yr(this.r,this.g,this.b,e)},e.prototype.toHexString=function(e){return void 0===e&&(e=!1),"#"+this.toHex(e)},e.prototype.toHex8=function(e){return void 0===e&&(e=!1),function(e,t,n,r,a){var o,i=[hr(Math.round(e).toString(16)),hr(Math.round(t).toString(16)),hr(Math.round(n).toString(16)),hr((o=r,Math.round(255*parseFloat(o)).toString(16)))];return a&&i[0].startsWith(i[0].charAt(1))&&i[1].startsWith(i[1].charAt(1))&&i[2].startsWith(i[2].charAt(1))&&i[3].startsWith(i[3].charAt(1))?i[0].charAt(0)+i[1].charAt(0)+i[2].charAt(0)+i[3].charAt(0):i.join("")}(this.r,this.g,this.b,this.a,e)},e.prototype.toHex8String=function(e){return void 0===e&&(e=!1),"#"+this.toHex8(e)},e.prototype.toRgb=function(){return{r:Math.round(this.r),g:Math.round(this.g),b:Math.round(this.b),a:this.a}},e.prototype.toRgbString=function(){var e=Math.round(this.r),t=Math.round(this.g),n=Math.round(this.b);return 1===this.a?"rgb("+e+", "+t+", "+n+")":"rgba("+e+", "+t+", "+n+", "+this.roundA+")"},e.prototype.toPercentageRgb=function(){var e=function(e){return Math.round(100*sr(e,255))+"%"};return{r:e(this.r),g:e(this.g),b:e(this.b),a:this.a}},e.prototype.toPercentageRgbString=function(){var e=function(e){return Math.round(100*sr(e,255))};return 1===this.a?"rgb("+e(this.r)+"%, "+e(this.g)+"%, "+e(this.b)+"%)":"rgba("+e(this.r)+"%, "+e(this.g)+"%, "+e(this.b)+"%, "+this.roundA+")"},e.prototype.toName=function(){if(0===this.a)return"transparent";if(this.a<1)return!1;for(var e="#"+yr(this.r,this.g,this.b,!1),t=0,n=Object.entries(kr);t<n.length;t++){var r=n[t],a=r[0];if(e===r[1])return a}return!1},e.prototype.toString=function(e){var t=Boolean(e);e=null!=e?e:this.format;var n=!1,r=this.a<1&&this.a>=0;return t||!r||!e.startsWith("hex")&&"name"!==e?("rgb"===e&&(n=this.toRgbString()),"prgb"===e&&(n=this.toPercentageRgbString()),"hex"!==e&&"hex6"!==e||(n=this.toHexString()),"hex3"===e&&(n=this.toHexString(!0)),"hex4"===e&&(n=this.toHex8String(!0)),"hex8"===e&&(n=this.toHex8String()),"name"===e&&(n=this.toName()),"hsl"===e&&(n=this.toHslString()),"hsv"===e&&(n=this.toHsvString()),n||this.toHexString()):"name"===e&&0===this.a?this.toName():this.toRgbString()},e.prototype.toNumber=function(){return(Math.round(this.r)<<16)+(Math.round(this.g)<<8)+Math.round(this.b)},e.prototype.clone=function(){return new e(this.toString())},e.prototype.lighten=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.l+=t/100,n.l=fr(n.l),new e(n)},e.prototype.brighten=function(t){void 0===t&&(t=10);var n=this.toRgb();return n.r=Math.max(0,Math.min(255,n.r-Math.round(-t/100*255))),n.g=Math.max(0,Math.min(255,n.g-Math.round(-t/100*255))),n.b=Math.max(0,Math.min(255,n.b-Math.round(-t/100*255))),new e(n)},e.prototype.darken=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.l-=t/100,n.l=fr(n.l),new e(n)},e.prototype.tint=function(e){return void 0===e&&(e=10),this.mix("white",e)},e.prototype.shade=function(e){return void 0===e&&(e=10),this.mix("black",e)},e.prototype.desaturate=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.s-=t/100,n.s=fr(n.s),new e(n)},e.prototype.saturate=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.s+=t/100,n.s=fr(n.s),new e(n)},e.prototype.greyscale=function(){return this.desaturate(100)},e.prototype.spin=function(t){var n=this.toHsl(),r=(n.h+t)%360;return n.h=r<0?360+r:r,new e(n)},e.prototype.mix=function(t,n){void 0===n&&(n=50);var r=this.toRgb(),a=new e(t).toRgb(),o=n/100;return new e({r:(a.r-r.r)*o+r.r,g:(a.g-r.g)*o+r.g,b:(a.b-r.b)*o+r.b,a:(a.a-r.a)*o+r.a})},e.prototype.analogous=function(t,n){void 0===t&&(t=6),void 0===n&&(n=30);var r=this.toHsl(),a=360/n,o=[this];for(r.h=(r.h-(a*t>>1)+720)%360;--t;)r.h=(r.h+a)%360,o.push(new e(r));return o},e.prototype.complement=function(){var t=this.toHsl();return t.h=(t.h+180)%360,new e(t)},e.prototype.monochromatic=function(t){void 0===t&&(t=6);for(var n=this.toHsv(),r=n.h,a=n.s,o=n.v,i=[],l=1/t;t--;)i.push(new e({h:r,s:a,v:o})),o=(o+l)%1;return i},e.prototype.splitcomplement=function(){var t=this.toHsl(),n=t.h;return[this,new e({h:(n+72)%360,s:t.s,l:t.l}),new e({h:(n+216)%360,s:t.s,l:t.l})]},e.prototype.onBackground=function(t){var n=this.toRgb(),r=new e(t).toRgb();return new e({r:r.r+(n.r-r.r)*n.a,g:r.g+(n.g-r.g)*n.a,b:r.b+(n.b-r.b)*n.a})},e.prototype.triad=function(){return this.polyad(3)},e.prototype.tetrad=function(){return this.polyad(4)},e.prototype.polyad=function(t){for(var n=this.toHsl(),r=n.h,a=[this],o=360/t,i=1;i<t;i++)a.push(new e({h:(r+i*o)%360,s:n.s,l:n.l}));return a},e.prototype.equals=function(t){return this.toRgbString()===new e(t).toRgbString()},e}(),Fr=[{index:7,opacity:.15},{index:6,opacity:.25},{index:5,opacity:.3},{index:5,opacity:.45},{index:5,opacity:.65},{index:5,opacity:.85},{index:4,opacity:.9},{index:3,opacity:.95},{index:2,opacity:.97},{index:1,opacity:.98}];function Nr(e,t,n){var r;return(r=Math.round(e.h)>=60&&Math.round(e.h)<=240?n?Math.round(e.h)-2*t:Math.round(e.h)+2*t:n?Math.round(e.h)+2*t:Math.round(e.h)-2*t)<0?r+=360:r>=360&&(r-=360),r}function Or(e,t,n){return 0===e.h&&0===e.s?e.s:((r=n?e.s-.16*t:4===t?e.s+.16:e.s+.05*t)>1&&(r=1),n&&5===t&&r>.1&&(r=.1),r<.06&&(r=.06),Number(r.toFixed(2)));var r}function Tr(e,t,n){var r;return(r=n?e.v+.05*t:e.v-.15*t)>1&&(r=1),Number(r.toFixed(2))}function Mr(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=[],r=new _r(e),a=5;a>0;a-=1){var o=r.toHsv(),i=new _r({h:Nr(o,a,!0),s:Or(o,a,!0),v:Tr(o,a,!0)}).toHexString();n.push(i)}n.push(r.toHexString());for(var l=1;l<=4;l+=1){var u=r.toHsv(),c=new _r({h:Nr(u,l),s:Or(u,l),v:Tr(u,l)}).toHexString();n.push(c)}return"dark"===t.theme?Fr.map((function(e){var r=e.index,a=e.opacity;return new _r(t.backgroundColor||"#141414").mix(n[r],100*a).toHexString()})):n}var Ar={red:"#F5222D",volcano:"#FA541C",orange:"#FA8C16",gold:"#FAAD14",yellow:"#FADB14",lime:"#A0D911",green:"#52C41A",cyan:"#13C2C2",blue:"#1890FF",geekblue:"#2F54EB",purple:"#722ED1",magenta:"#EB2F96",grey:"#666666"},Lr={},Rr={};Object.keys(Ar).forEach((function(e){Lr[e]=Mr(Ar[e]),Lr[e].primary=Lr[e][5],Rr[e]=Mr(Ar[e],{theme:"dark",backgroundColor:"#141414"}),Rr[e].primary=Rr[e][5]})),Lr.red,Lr.volcano,Lr.gold,Lr.orange,Lr.yellow,Lr.lime,Lr.green,Lr.cyan,Lr.blue,Lr.geekblue,Lr.purple,Lr.magenta,Lr.grey;var jr=n(186);function zr(e){return"object"===Ce(e)&&"string"==typeof e.name&&"string"==typeof e.theme&&("object"===Ce(e.icon)||"function"==typeof e.icon)}function Ir(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.keys(e).reduce((function(t,n){var r=e[n];switch(n){case"class":t.className=r,delete t.class;break;default:t[n]=r}return t}),{})}function $r(t,n,r){return r?e.createElement(t.tag,de(de({key:n},Ir(t.attrs)),r),(t.children||[]).map((function(e,r){return $r(e,"".concat(n,"-").concat(t.tag,"-").concat(r))}))):e.createElement(t.tag,de({key:n},Ir(t.attrs)),(t.children||[]).map((function(e,r){return $r(e,"".concat(n,"-").concat(t.tag,"-").concat(r))})))}function Vr(e){return Mr(e)[0]}function Dr(e){return e?Array.isArray(e)?e:[e]:[]}var Ur="\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n",Hr=!1,Br={primaryColor:"#333",secondaryColor:"#E6E6E6",calculated:!1},qr=function(t){var n=t.icon,r=t.className,a=t.onClick,o=t.style,i=t.primaryColor,l=t.secondaryColor,u=ce(t,["icon","className","onClick","style","primaryColor","secondaryColor"]),c=Br;if(i&&(c={primaryColor:i,secondaryColor:l||Vr(i)}),function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ur;(0,e.useEffect)((function(){Hr||((0,jr.insertCss)(t,{prepend:!0}),Hr=!0)}),[])}(),function(e,t){Oe(e,"[@ant-design/icons] ".concat(t))}(zr(n),"icon should be icon definiton, but got ".concat(n)),!zr(n))return null;var s=n;return s&&"function"==typeof s.icon&&(s=de(de({},s),{},{icon:s.icon(c.primaryColor,c.secondaryColor)})),$r(s.icon,"svg-".concat(s.name),de({className:r,onClick:a,style:o,"data-icon":s.name,width:"1em",height:"1em",fill:"currentColor","aria-hidden":"true"},u))};qr.displayName="IconReact",qr.getTwoToneColors=function(){return de({},Br)},qr.setTwoToneColors=function(e){var t=e.primaryColor,n=e.secondaryColor;Br.primaryColor=t,Br.secondaryColor=n||Vr(t),Br.calculated=!!n};const Wr=qr;function Yr(e){var t=At(Dr(e),2),n=t[0],r=t[1];return Wr.setTwoToneColors({primaryColor:n,secondaryColor:r})}Yr("#1890ff");var Kr=e.forwardRef((function(t,n){var r=t.className,a=t.icon,o=t.spin,i=t.rotate,l=t.tabIndex,u=t.onClick,c=t.twoToneColor,s=ce(t,["className","icon","spin","rotate","tabIndex","onClick","twoToneColor"]),f=en()("anticon",se({},"anticon-".concat(a.name),Boolean(a.name)),{"anticon-spin":!!o||"loading"===a.name},r),d=l;void 0===d&&u&&(d=-1);var p=i?{msTransform:"rotate(".concat(i,"deg)"),transform:"rotate(".concat(i,"deg)")}:void 0,h=At(Dr(c),2),m=h[0],v=h[1];return e.createElement("span",Object.assign({role:"img","aria-label":a.name},s,{ref:n,tabIndex:d,onClick:u,className:f}),e.createElement(Wr,{icon:a,primaryColor:m,secondaryColor:v,style:p}))}));Kr.displayName="AntdIcon",Kr.getTwoToneColor=function(){var e=Wr.getTwoToneColors();return e.calculated?[e.primaryColor,e.secondaryColor]:e.primaryColor},Kr.setTwoToneColor=Yr;const Qr=Kr;var Gr=function(t,n){return e.createElement(Qr,Object.assign({},t,{ref:n,icon:cr}))};Gr.displayName="LoadingOutlined";const Zr=e.forwardRef(Gr),Xr={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"}}]},name:"exclamation-circle",theme:"filled"};var Jr=function(t,n){return e.createElement(Qr,Object.assign({},t,{ref:n,icon:Xr}))};Jr.displayName="ExclamationCircleFilled";const ea=e.forwardRef(Jr),ta={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"}}]},name:"close-circle",theme:"filled"};var na=function(t,n){return e.createElement(Qr,Object.assign({},t,{ref:n,icon:ta}))};na.displayName="CloseCircleFilled";const ra=e.forwardRef(na),aa={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z"}}]},name:"check-circle",theme:"filled"};var oa=function(t,n){return e.createElement(Qr,Object.assign({},t,{ref:n,icon:aa}))};oa.displayName="CheckCircleFilled";const ia=e.forwardRef(oa),la={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm32 664c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272zm-32-344a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"}}]},name:"info-circle",theme:"filled"};var ua=function(t,n){return e.createElement(Qr,Object.assign({},t,{ref:n,icon:la}))};ua.displayName="InfoCircleFilled";var ca,sa,fa,da,pa=3,ha=1,ma="ant-message",va="move-up",ga=!1;function ya(e,t){var n=e.prefixCls||ma;ca?t({prefixCls:n,instance:ca}):ur.newInstance({prefixCls:n,transitionName:va,style:{top:sa},getContainer:fa,maxCount:da},(function(e){ca?t({prefixCls:n,instance:ca}):(ca=e,t({prefixCls:n,instance:e}))}))}var ba={info:e.forwardRef(ua),success:ia,error:ra,warning:ea,loading:Zr};function wa(t,n){var r,a=void 0!==t.duration?t.duration:pa,o=ba[t.type],i=en()("".concat(n,"-custom-content"),(se(r={},"".concat(n,"-").concat(t.type),t.type),se(r,"".concat(n,"-rtl"),!0===ga),r));return{key:t.key,duration:a,style:t.style||{},className:t.className,content:e.createElement("div",{className:i},t.icon||o&&e.createElement(o,null),e.createElement("span",null,t.content)),onClose:t.onClose,onClick:t.onClick}}var ka={open:function(e){var t=e.key||ha++,n=new Promise((function(n){var r=function(){return"function"==typeof e.onClose&&e.onClose(),n(!0)};ya(e,(function(n){var a=n.prefixCls;n.instance.notice(wa((0,i.default)((0,i.default)({},e),{key:t,onClose:r}),a))}))})),r=function(){ca&&ca.removeNotice(t)};return r.then=function(e,t){return n.then(e,t)},r.promise=n,r},config:function(e){void 0!==e.top&&(sa=e.top,ca=null),void 0!==e.duration&&(pa=e.duration),void 0!==e.prefixCls&&(ma=e.prefixCls),void 0!==e.getContainer&&(fa=e.getContainer),void 0!==e.transitionName&&(va=e.transitionName,ca=null),void 0!==e.maxCount&&(da=e.maxCount,ca=null),void 0!==e.rtl&&(ga=e.rtl)},destroy:function(e){if(ca)if(e)(0,ca.removeNotice)(e);else{(0,ca.destroy)(),ca=null}}};function Ea(e,t){e[t]=function(n,r,a){return function(e){return"[object Object]"===Object.prototype.toString.call(e)&&!!e.content}(n)?e.open((0,i.default)((0,i.default)({},n),{type:t})):("function"==typeof r&&(a=r,r=void 0),e.open({content:n,duration:r,type:t,onClose:a}))}}["success","info","warning","error","loading"].forEach((function(e){return Ea(ka,e)})),ka.warn=ka.warning,ka.useMessage=function(t,n){return function(){var r,a=null,o=At(rr({add:function(e,t){null==a||a.component.add(e,t)}}),2),l=o[0],u=o[1],c=e.useRef({});return c.current.open=function(e){var o=e.prefixCls,u=r("message",o),c=e.key||ha++,s=new Promise((function(r){var o=function(){return"function"==typeof e.onClose&&e.onClose(),r(!0)};t((0,i.default)((0,i.default)({},e),{prefixCls:u}),(function(t){var r=t.prefixCls,u=t.instance;a=u,l(n((0,i.default)((0,i.default)({},e),{key:c,onClose:o}),r))}))})),f=function(){a&&a.removeNotice(c)};return f.then=function(e,t){return s.then(e,t)},f.promise=s,f},["success","info","warning","error","loading"].forEach((function(e){return Ea(c.current,e)})),[c.current,e.createElement(cn,{key:"holder"},(function(e){return r=e.getPrefixCls,u}))]}}(ya,wa);const xa=ka,Ca={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"}}]},name:"close",theme:"outlined"};var Sa=function(t,n){return e.createElement(Qr,Object.assign({},t,{ref:n,icon:Ca}))};Sa.displayName="CloseOutlined";const Pa=e.forwardRef(Sa),_a={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0051.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z"}},{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}}]},name:"check-circle",theme:"outlined"};var Fa=function(t,n){return e.createElement(Qr,Object.assign({},t,{ref:n,icon:_a}))};Fa.displayName="CheckCircleOutlined";const Na=e.forwardRef(Fa),Oa={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M685.4 354.8c0-4.4-3.6-8-8-8l-66 .3L512 465.6l-99.3-118.4-66.1-.3c-4.4 0-8 3.5-8 8 0 1.9.7 3.7 1.9 5.2l130.1 155L340.5 670a8.32 8.32 0 00-1.9 5.2c0 4.4 3.6 8 8 8l66.1-.3L512 564.4l99.3 118.4 66 .3c4.4 0 8-3.5 8-8 0-1.9-.7-3.7-1.9-5.2L553.5 515l130.1-155c1.2-1.4 1.8-3.3 1.8-5.2z"}},{tag:"path",attrs:{d:"M512 65C264.6 65 64 265.6 64 513s200.6 448 448 448 448-200.6 448-448S759.4 65 512 65zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}}]},name:"close-circle",theme:"outlined"};var Ta=function(t,n){return e.createElement(Qr,Object.assign({},t,{ref:n,icon:Oa}))};Ta.displayName="CloseCircleOutlined";const Ma=e.forwardRef(Ta),Aa={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}},{tag:"path",attrs:{d:"M464 688a48 48 0 1096 0 48 48 0 10-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z"}}]},name:"exclamation-circle",theme:"outlined"};var La=function(t,n){return e.createElement(Qr,Object.assign({},t,{ref:n,icon:Aa}))};La.displayName="ExclamationCircleOutlined";const Ra=e.forwardRef(La),ja={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}},{tag:"path",attrs:{d:"M464 336a48 48 0 1096 0 48 48 0 10-96 0zm72 112h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V456c0-4.4-3.6-8-8-8z"}}]},name:"info-circle",theme:"outlined"};var za=function(t,n){return e.createElement(Qr,Object.assign({},t,{ref:n,icon:ja}))};za.displayName="InfoCircleOutlined";var Ia,$a,Va={},Da=4.5,Ua=24,Ha=24,Ba="ant-notification",qa="topRight",Wa=!1;function Ya(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Ua,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Ha;switch(e){case"topLeft":t={left:0,top:n,bottom:"auto"};break;case"topRight":t={right:0,top:n,bottom:"auto"};break;case"bottomLeft":t={left:0,top:"auto",bottom:r};break;default:t={right:0,top:"auto",bottom:r}}return t}function Ka(t,n){var r=t.placement,a=void 0===r?qa:r,o=t.top,i=t.bottom,l=t.getContainer,u=void 0===l?Ia:l,c=t.closeIcon,s=void 0===c?$a:c,f=t.prefixCls||Ba,d="".concat(f,"-notice"),p="".concat(f,"-").concat(a),h=Va[p];if(h)Promise.resolve(h).then((function(e){n({prefixCls:d,instance:e})}));else{var m=e.createElement("span",{className:"".concat(f,"-close-x")},s||e.createElement(Pa,{className:"".concat(f,"-close-icon")})),v=en()("".concat(f,"-").concat(a),se({},"".concat(f,"-rtl"),!0===Wa));Va[p]=new Promise((function(e){ur.newInstance({prefixCls:f,className:v,style:Ya(a,o,i),getContainer:u,closeIcon:m},(function(t){e(t),n({prefixCls:d,instance:t})}))}))}}var Qa={success:Na,info:e.forwardRef(za),error:Ma,warning:Ra};function Ga(t,n){var r=void 0===t.duration?Da:t.duration,a=null;t.icon?a=e.createElement("span",{className:"".concat(n,"-icon")},t.icon):t.type&&(a=e.createElement(Qa[t.type]||null,{className:"".concat(n,"-icon ").concat(n,"-icon-").concat(t.type)}));var o=!t.description&&a?e.createElement("span",{className:"".concat(n,"-message-single-line-auto-margin")}):null;return{content:e.createElement("div",{className:a?"".concat(n,"-with-icon"):"",role:"alert"},a,e.createElement("div",{className:"".concat(n,"-message")},o,t.message),e.createElement("div",{className:"".concat(n,"-description")},t.description),t.btn?e.createElement("span",{className:"".concat(n,"-btn")},t.btn):null),duration:r,closable:!0,onClose:t.onClose,onClick:t.onClick,key:t.key,style:t.style||{},className:t.className}}var Za={open:function(e){Ka(e,(function(t){var n=t.prefixCls;t.instance.notice(Ga(e,n))}))},close:function(e){Object.keys(Va).forEach((function(t){return Promise.resolve(Va[t]).then((function(t){t.removeNotice(e)}))}))},config:function(e){var t=e.duration,n=e.placement,r=e.bottom,a=e.top,o=e.getContainer,i=e.closeIcon,l=e.prefixCls;void 0!==l&&(Ba=l),void 0!==t&&(Da=t),void 0!==n?qa=n:e.rtl&&(qa="topLeft"),void 0!==r&&(Ha=r),void 0!==a&&(Ua=a),void 0!==o&&(Ia=o),void 0!==i&&($a=i),void 0!==e.rtl&&(Wa=e.rtl)},destroy:function(){Object.keys(Va).forEach((function(e){Promise.resolve(Va[e]).then((function(e){e.destroy()})),delete Va[e]}))}};["success","info","warning","error"].forEach((function(e){Za[e]=function(t){return Za.open((0,i.default)((0,i.default)({},t),{type:e}))}})),Za.warn=Za.warning,Za.useNotification=function(t,n){return function(){var r,a=null,o=At(rr({add:function(e,t){null==a||a.component.add(e,t)}}),2),l=o[0],u=o[1],c=e.useRef({});return c.current.open=function(e){var o=e.prefixCls,u=r("notification",o);t((0,i.default)((0,i.default)({},e),{prefixCls:u}),(function(t){var r=t.prefixCls,o=t.instance;a=o,l(n(e,r))}))},["success","info","warning","error"].forEach((function(e){c.current[e]=function(t){return c.current.open((0,i.default)((0,i.default)({},t),{type:e}))}})),[c.current,e.createElement(cn,{key:"holder"},(function(e){return r=e.getPrefixCls,u}))]}}(Ka,Ga);const Xa=Za;var Ja=function(t){e.useEffect((function(){t.direction&&(xa.config({rtl:"rtl"===t.direction}),Xa.config({rtl:"rtl"===t.direction}))}),[t.direction]);var n=function(e){return function(n,r){var a=t.prefixCls;if(r)return r;var o=a||e.getPrefixCls("");return n?"".concat(o,"-").concat(n):o}};return e.createElement(Xt,null,(function(r,a,o){return e.createElement(cn,null,(function(r){return function(r,a){var o=t.children,l=t.getTargetContainer,u=t.getPopupContainer,c=t.renderEmpty,s=t.csp,f=t.autoInsertSpaceInButton,d=t.form,p=t.input,h=t.locale,m=t.pageHeader,v=t.componentSize,g=t.direction,y=t.space,b=t.virtual,w=t.dropdownMatchSelectWidth,k=(0,i.default)((0,i.default)({},r),{getPrefixCls:n(r),csp:s,autoInsertSpaceInButton:f,locale:h||a,direction:g,space:y,virtual:b,dropdownMatchSelectWidth:w});l&&(k.getTargetContainer=l),u&&(k.getPopupContainer=u),c&&(k.renderEmpty=c),m&&(k.pageHeader=m),p&&(k.input=p),d&&(k.form=d);var E=o,x={};h&&h.Form&&h.Form.defaultValidateMessages&&(x=h.Form.defaultValidateMessages),d&&d.validateMessages&&(x=(0,i.default)((0,i.default)({},x),d.validateMessages)),Object.keys(x).length>0&&(E=e.createElement(It,{validateMessages:x},o));var C=void 0===h?E:e.createElement(Gt,{locale:h||a,_ANT_MARK__:Qt},E);return e.createElement(fn,{size:v},e.createElement(un.Provider,{value:k},C))}(r,o)}))}))};Ja.ConfigContext=un;const eo=Ja;var to=n(754);t.render(e.createElement(eo,{locale:to.Z},e.createElement(ue,null)),document.getElementById("app"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0Ly4vc3JjL2NvbXBvbmVudHMvZm9vdGVyL2Zvb3Rlci5zY3NzIiwid2VicGFjazovL3JlYWN0Ly4vc3JjL2NvbXBvbmVudHMvaGVhZGVyL2hlYWRlci5zY3NzIiwid2VicGFjazovL3JlYWN0Ly4vc3JjL2NvbXBvbmVudHMvaG9tZS9ob21lLnNjc3MiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvY2FsZW5kYXIvbG9jYWxlL3poX0NOLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL2FudGQvbGliL2RhdGUtcGlja2VyL2xvY2FsZS96aF9DTi5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9sb2NhbGUtcHJvdmlkZXIvemhfQ04uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvbG9jYWxlL3poX0NOLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL2FudGQvbGliL3RpbWUtcGlja2VyL2xvY2FsZS96aF9DTi5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL2luc2VydC1jc3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JjLXBhZ2luYXRpb24vbGliL2xvY2FsZS96aF9DTi5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yYy1waWNrZXIvbGliL2xvY2FsZS96aF9DTi5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3JlYWN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3JlYWN0L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3JlYWN0L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9yZWFjdC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3JlYWN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vcmVhY3Qvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvZXNtL3Jlc29sdmUtcGF0aG5hbWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvdGlueS1pbnZhcmlhbnQvZGlzdC90aW55LWludmFyaWFudC5lc20uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lc20vaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9taW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0L2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzbS9yZWFjdC1yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lc20vcmVhY3Qtcm91dGVyLWRvbS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL3NyYy9jb21wb25lbnRzL2hlYWRlci9oZWFkZXIuc2Nzcz8wYTI1Iiwid2VicGFjazovL3JlYWN0Ly4vc3JjL2NvbXBvbmVudHMvaGVhZGVyL0hlYWRlci50c3giLCJ3ZWJwYWNrOi8vcmVhY3QvLi9zcmMvY29tcG9uZW50cy9mb290ZXIvZm9vdGVyLnNjc3M/NTVmMSIsIndlYnBhY2s6Ly9yZWFjdC8uL3NyYy9jb21wb25lbnRzL2Zvb3Rlci9Gb290ZXIudHN4Iiwid2VicGFjazovL3JlYWN0Ly4vc3JjL2NvbXBvbmVudHMvaG9tZS9ob21lLnNjc3M/YTBkZiIsIndlYnBhY2s6Ly9yZWFjdC8uL3NyYy9jb21wb25lbnRzL2hvbWUvSG9tZS50c3giLCJ3ZWJwYWNrOi8vcmVhY3QvLi9zcmMvcm91dGVycy9Sb290LnRzeCIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5TGlrZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVTdXBlci5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9DaGlsZHJlbi90b0FycmF5LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvd2FybmluZy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yYy1maWVsZC1mb3JtL2VzL0ZpZWxkQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yYy1maWVsZC1mb3JtL2VzL3V0aWxzL3R5cGVVdGlsLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvYXN5bmMtdmFsaWRhdG9yL2Rpc3Qtd2ViL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aEhvbGVzLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlUmVzdC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL3V0aWxzL3NldC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0FycmF5LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JjLWZpZWxkLWZvcm0vZXMvdXRpbHMvdmFsdWVVdGlsLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvdXRpbHMvZ2V0LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JjLWZpZWxkLWZvcm0vZXMvdXRpbHMvbWVzc2FnZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvcmMtZmllbGQtZm9ybS9lcy91dGlscy92YWxpZGF0ZVV0aWwuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvcmMtZmllbGQtZm9ybS9lcy9GaWVsZC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JjLWZpZWxkLWZvcm0vZXMvdXRpbHMvTmFtZU1hcC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yYy1maWVsZC1mb3JtL2VzL3VzZUZvcm0uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvcmMtZmllbGQtZm9ybS9lcy91dGlscy9hc3luY1V0aWwuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvcmMtZmllbGQtZm9ybS9lcy9Gb3JtQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yYy1maWVsZC1mb3JtL2VzL0Zvcm0uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvcmMtZmllbGQtZm9ybS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yYy1maWVsZC1mb3JtL2VzL0xpc3QuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvcmMtcGlja2VyL2VzL2xvY2FsZS9lbl9VUy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL3RpbWUtcGlja2VyL2xvY2FsZS9lbl9VUy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2RhdGUtcGlja2VyL2xvY2FsZS9lbl9VUy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2xvY2FsZS9kZWZhdWx0LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JjLXBhZ2luYXRpb24vZXMvbG9jYWxlL2VuX1VTLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL2FudGQvZXMvbW9kYWwvbG9jYWxlLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL2FudGQvZXMvbG9jYWxlLXByb3ZpZGVyL2NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9sb2NhbGUtcHJvdmlkZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9fdXRpbC9kZXZXYXJuaW5nLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL2FudGQvZXMvbG9jYWxlLXByb3ZpZGVyL2RlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9sb2NhbGUtcHJvdmlkZXIvTG9jYWxlUmVjZWl2ZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9lbXB0eS9lbXB0eS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2VtcHR5L3NpbXBsZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2VtcHR5L2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL2FudGQvZXMvY29uZmlnLXByb3ZpZGVyL2NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9jb25maWctcHJvdmlkZXIvcmVuZGVyRW1wdHkuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9jb25maWctcHJvdmlkZXIvU2l6ZUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9Eb20vY2FuVXNlRG9tLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JjLW1vdGlvbi9lcy91dGlsL21vdGlvbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvaW50ZXJmYWNlLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JjLW1vdGlvbi9lcy9ob29rcy91c2VTdGF0ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvaG9va3MvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL3JhZi5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvaG9va3MvdXNlU3RlcFF1ZXVlLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JjLW1vdGlvbi9lcy9ob29rcy91c2VTdGF0dXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvcmMtbW90aW9uL2VzL2hvb2tzL3VzZURvbU1vdGlvbkV2ZW50cy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvaG9va3MvdXNlTmV4dEZyYW1lLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JjLW1vdGlvbi9lcy9Eb21XcmFwcGVyLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JjLW1vdGlvbi9lcy9DU1NNb3Rpb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9Eb20vZmluZERPTU5vZGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9yZWYuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvcmMtbW90aW9uL2VzL3V0aWwvZGlmZi5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvQ1NTTW90aW9uTGlzdC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yYy1ub3RpZmljYXRpb24vZXMvTm90aWNlLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JjLW5vdGlmaWNhdGlvbi9lcy91c2VOb3RpZmljYXRpb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvcmMtbm90aWZpY2F0aW9uL2VzL05vdGlmaWNhdGlvbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yYy1ub3RpZmljYXRpb24vZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9Mb2FkaW5nT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQGN0cmwvdGlueWNvbG9yL2Rpc3QvbW9kdWxlL3V0aWwuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQGN0cmwvdGlueWNvbG9yL2Rpc3QvbW9kdWxlL2NvbnZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQGN0cmwvdGlueWNvbG9yL2Rpc3QvbW9kdWxlL2Nzcy1jb2xvci1uYW1lcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AY3RybC90aW55Y29sb3IvZGlzdC9tb2R1bGUvZm9ybWF0LWlucHV0LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BjdHJsL3Rpbnljb2xvci9kaXN0L21vZHVsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9jb2xvcnMvZGlzdC9pbmRleC5lc20uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvZXMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvZXMvY29tcG9uZW50cy9JY29uQmFzZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9jb21wb25lbnRzL3R3b1RvbmVQcmltYXJ5Q29sb3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvZXMvY29tcG9uZW50cy9BbnRkSWNvbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9Mb2FkaW5nT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9FeGNsYW1hdGlvbkNpcmNsZUZpbGxlZC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9FeGNsYW1hdGlvbkNpcmNsZUZpbGxlZC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0Nsb3NlQ2lyY2xlRmlsbGVkLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0Nsb3NlQ2lyY2xlRmlsbGVkLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vQ2hlY2tDaXJjbGVGaWxsZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvQ2hlY2tDaXJjbGVGaWxsZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9JbmZvQ2lyY2xlRmlsbGVkLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0luZm9DaXJjbGVGaWxsZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9tZXNzYWdlL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL2FudGQvZXMvbWVzc2FnZS9ob29rcy91c2VNZXNzYWdlLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vQ2xvc2VPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9DbG9zZU91dGxpbmVkLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vQ2hlY2tDaXJjbGVPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9DaGVja0NpcmNsZU91dGxpbmVkLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vQ2xvc2VDaXJjbGVPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9DbG9zZUNpcmNsZU91dGxpbmVkLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9FeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vSW5mb0NpcmNsZU91dGxpbmVkLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0luZm9DaXJjbGVPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL25vdGlmaWNhdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL25vdGlmaWNhdGlvbi9ob29rcy91c2VOb3RpZmljYXRpb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9jb25maWctcHJvdmlkZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9zcmMvaW5kZXgudHN4Il0sIm5hbWVzIjpbIl9leHRlbmRzIiwiT2JqZWN0IiwiYXNzaWduIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwidGhpcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwiaWQiLCJsb2NhbHMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIl9kZWZhdWx0IiwiX2V4dGVuZHMyIiwiX3poX0NOIiwiX3poX0NOMiIsImxvY2FsZSIsImxhbmciLCJwbGFjZWhvbGRlciIsInllYXJQbGFjZWhvbGRlciIsInF1YXJ0ZXJQbGFjZWhvbGRlciIsIm1vbnRoUGxhY2Vob2xkZXIiLCJ3ZWVrUGxhY2Vob2xkZXIiLCJyYW5nZVBsYWNlaG9sZGVyIiwicmFuZ2VZZWFyUGxhY2Vob2xkZXIiLCJyYW5nZU1vbnRoUGxhY2Vob2xkZXIiLCJyYW5nZVdlZWtQbGFjZWhvbGRlciIsInRpbWVQaWNrZXJMb2NhbGUiLCJvayIsIl96aF9DTjMiLCJfemhfQ040IiwidHlwZVRlbXBsYXRlIiwiUGFnaW5hdGlvbiIsIkRhdGVQaWNrZXIiLCJUaW1lUGlja2VyIiwiQ2FsZW5kYXIiLCJnbG9iYWwiLCJUYWJsZSIsImZpbHRlclRpdGxlIiwiZmlsdGVyQ29uZmlybSIsImZpbHRlclJlc2V0IiwiZmlsdGVyRW1wdHlUZXh0Iiwic2VsZWN0QWxsIiwic2VsZWN0SW52ZXJ0Iiwic2VsZWN0Tm9uZSIsInNlbGVjdGlvbkFsbCIsInNvcnRUaXRsZSIsImV4cGFuZCIsImNvbGxhcHNlIiwidHJpZ2dlckRlc2MiLCJ0cmlnZ2VyQXNjIiwiY2FuY2VsU29ydCIsIk1vZGFsIiwib2tUZXh0IiwiY2FuY2VsVGV4dCIsImp1c3RPa1RleHQiLCJQb3Bjb25maXJtIiwiVHJhbnNmZXIiLCJzZWFyY2hQbGFjZWhvbGRlciIsIml0ZW1Vbml0IiwiaXRlbXNVbml0IiwicmVtb3ZlIiwic2VsZWN0Q3VycmVudCIsInJlbW92ZUN1cnJlbnQiLCJyZW1vdmVBbGwiLCJVcGxvYWQiLCJ1cGxvYWRpbmciLCJyZW1vdmVGaWxlIiwidXBsb2FkRXJyb3IiLCJwcmV2aWV3RmlsZSIsImRvd25sb2FkRmlsZSIsIkVtcHR5IiwiZGVzY3JpcHRpb24iLCJJY29uIiwiaWNvbiIsIlRleHQiLCJlZGl0IiwiY29weSIsImNvcGllZCIsIlBhZ2VIZWFkZXIiLCJiYWNrIiwiRm9ybSIsIm9wdGlvbmFsIiwiZGVmYXVsdFZhbGlkYXRlTWVzc2FnZXMiLCJyZXF1aXJlZCIsIndoaXRlc3BhY2UiLCJkYXRlIiwiZm9ybWF0IiwicGFyc2UiLCJpbnZhbGlkIiwidHlwZXMiLCJzdHJpbmciLCJtZXRob2QiLCJhcnJheSIsIm9iamVjdCIsIm51bWJlciIsImludGVnZXIiLCJyZWdleHAiLCJlbWFpbCIsInVybCIsImhleCIsImxlbiIsIm1pbiIsIm1heCIsInJhbmdlIiwicGF0dGVybiIsIm1pc21hdGNoIiwiSW1hZ2UiLCJwcmV2aWV3IiwiaGFzT3duIiwiY2xhc3NOYW1lcyIsImNsYXNzZXMiLCJhcmciLCJhcmdUeXBlIiwiQXJyYXkiLCJpc0FycmF5IiwiaW5uZXIiLCJqb2luIiwiZGVmYXVsdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJtYXAiLCJpdGVtIiwiY29udGVudCIsImNvbmNhdCIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIl9pIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJhcnIyIiwiX2l0ZW0iLCJfYXJyYXlXaXRoSG9sZXMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJ1bmRlZmluZWQiLCJfcyIsIm5leHQiLCJkb25lIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibyIsIm1pbkxlbiIsIm4iLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiVHlwZUVycm9yIiwiX25vbkl0ZXJhYmxlUmVzdCIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJyZWFjdElzIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGUiLCJjb250ZXh0VHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJkaXNwbGF5TmFtZSIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsInR5cGUiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJNZW1vIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJrZXlzIiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJkZXNjcmlwdG9yIiwiZSIsImNvbnRhaW5lcnMiLCJzdHlsZUVsZW1lbnRzIiwiaW5zZXJ0Q3NzIiwiY3NzIiwib3B0aW9ucyIsIkVycm9yIiwic3R5bGVFbGVtZW50IiwicG9zaXRpb24iLCJwcmVwZW5kIiwiY29udGFpbmVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGFpbmVySWQiLCJpbmRleE9mIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImluc2VydEJlZm9yZSIsImNoaWxkTm9kZXMiLCJhcHBlbmRDaGlsZCIsImNoYXJDb2RlQXQiLCJzdWJzdHIiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsInRleHRDb250ZW50IiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ2YWwiLCJ0ZXN0MSIsIlN0cmluZyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwidGVzdDMiLCJzcGxpdCIsImZvckVhY2giLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJzeW1ib2xzIiwidG8iLCJzIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BzIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwibG9jYXRpb24iLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiaXNSZXF1aXJlZCIsIlJlYWN0UHJvcFR5cGVzIiwiYm9vbCIsImZ1bmMiLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiZWxlbWVudCIsImVsZW1lbnRUeXBlIiwiaW5zdGFuY2VPZiIsIm5vZGUiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiaXRlbXNfcGVyX3BhZ2UiLCJqdW1wX3RvIiwianVtcF90b19jb25maXJtIiwicGFnZSIsInByZXZfcGFnZSIsIm5leHRfcGFnZSIsInByZXZfNSIsIm5leHRfNSIsInByZXZfMyIsIm5leHRfMyIsInRvZGF5Iiwibm93IiwiYmFja1RvVG9kYXkiLCJ0aW1lU2VsZWN0IiwiZGF0ZVNlbGVjdCIsIndlZWtTZWxlY3QiLCJjbGVhciIsIm1vbnRoIiwieWVhciIsInByZXZpb3VzTW9udGgiLCJuZXh0TW9udGgiLCJtb250aFNlbGVjdCIsInllYXJTZWxlY3QiLCJkZWNhZGVTZWxlY3QiLCJ5ZWFyRm9ybWF0IiwiZGF5Rm9ybWF0IiwiZGF0ZUZvcm1hdCIsImRhdGVUaW1lRm9ybWF0IiwicHJldmlvdXNZZWFyIiwibmV4dFllYXIiLCJwcmV2aW91c0RlY2FkZSIsIm5leHREZWNhZGUiLCJwcmV2aW91c0NlbnR1cnkiLCJuZXh0Q2VudHVyeSIsImFhIiwibSIsInIiLCJ5IiwiYSIsImIiLCJjIiwiYmEiLCJTZXQiLCJjYSIsImRhIiwiZWEiLCJhZGQiLCJmYSIsIndpbmRvdyIsImhhIiwiaWEiLCJqYSIsImthIiwiQiIsImQiLCJmIiwiZyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwiRCIsInRvTG93ZXJDYXNlIiwib2EiLCJwYSIsInRvVXBwZXJDYXNlIiwicWEiLCJtYSIsImlzTmFOIiwibmEiLCJsYSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwicmVwbGFjZSIsInhsaW5rSHJlZiIsInJhIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJzYSIsInRhIiwidWEiLCJ3YSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiZm9yIiwiRSIsIk1hIiwiS2EiLCJMYSIsIk5hIiwic3RhY2siLCJ0cmltIiwibWF0Y2giLCJPYSIsIlBhIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJzZXQiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiayIsImgiLCJRYSIsInRhZyIsIl9yZW5kZXIiLCJSYSIsIiQkdHlwZW9mIiwiX2NvbnRleHQiLCJfcGF5bG9hZCIsIl9pbml0IiwiU2EiLCJUYSIsIm5vZGVOYW1lIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwiZ2V0IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJVYSIsIldhIiwiY2hlY2tlZCIsIlhhIiwiYWN0aXZlRWxlbWVudCIsImJvZHkiLCJZYSIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiWmEiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJvd25lckRvY3VtZW50IiwiZWIiLCJjaGlsZHJlbiIsIkNoaWxkcmVuIiwiZGIiLCJmYiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGlzYWJsZWQiLCJnYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiaGIiLCJpYiIsImpiIiwia2IiLCJsYiIsIm1iIiwibmIiLCJvYiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwicGIiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsInFiIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJyYiIsInNiIiwidGIiLCJzdHlsZSIsInNldFByb3BlcnR5IiwiY2hhckF0Iiwic3Vic3RyaW5nIiwidWIiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJ2YiIsIndiIiwiaXMiLCJ4YiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInBhcmVudE5vZGUiLCJ5YiIsInpiIiwiQWIiLCJCYiIsIkNiIiwic3RhdGVOb2RlIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJPYiIsIlBiIiwiUWIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIlJiIiwibCIsIm9uRXJyb3IiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJaYiIsImFsdGVybmF0ZSIsInJldHVybiIsImZsYWdzIiwiJGIiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImFjIiwiY2MiLCJjaGlsZCIsInNpYmxpbmciLCJjdXJyZW50IiwiYmMiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm5jIiwiTWFwIiwib2MiLCJwYyIsInFjIiwicmMiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwibmF0aXZlRXZlbnQiLCJ0YXJnZXRDb250YWluZXJzIiwic2MiLCJkZWxldGUiLCJwb2ludGVySWQiLCJ0YyIsInZjIiwid2MiLCJsYW5lUHJpb3JpdHkiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsImh5ZHJhdGUiLCJjb250YWluZXJJbmZvIiwieGMiLCJ5YyIsInNoaWZ0IiwiemMiLCJBYyIsIkJjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiQ2MiLCJEYyIsIkVjIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiRmMiLCJHYyIsIkhjIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiUGMiLCJRYyIsInVuc3RhYmxlX25vdyIsIkYiLCJSYyIsIlVjIiwicGVuZGluZ0xhbmVzIiwiZXhwaXJlZExhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsIlZjIiwiZW50YW5nbGVkTGFuZXMiLCJlbnRhbmdsZW1lbnRzIiwiV2MiLCJYYyIsIlljIiwiWmMiLCIkYyIsImV2ZW50VGltZXMiLCJNYXRoIiwiY2x6MzIiLCJiZCIsImNkIiwibG9nIiwiTE4yIiwiZGQiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsImVkIiwiZmQiLCJnZCIsImhkIiwiYmluZCIsInVjIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwia2V5Q29kZSIsImNoYXJDb2RlIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ4ZCIsInlkIiwic2QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwiaXNUcnVzdGVkIiwidGQiLCJ1ZCIsInZpZXciLCJkZXRhaWwiLCJ2ZCIsIkFkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInpkIiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIkJkIiwiRGQiLCJkYXRhVHJhbnNmZXIiLCJGZCIsIkhkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIkpkIiwiY2xpcGJvYXJkRGF0YSIsIkxkIiwiTWQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiTmQiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJSZCIsImNvZGUiLCJyZXBlYXQiLCJ3aGljaCIsIlRkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiWGQiLCJaZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsImNvbG9yIiwiZGF0ZXRpbWUiLCJwYXNzd29yZCIsInNlYXJjaCIsInRlbCIsInRleHQiLCJ0aW1lIiwid2VlayIsIm1lIiwibmUiLCJvZSIsImV2ZW50IiwibGlzdGVuZXJzIiwicGUiLCJxZSIsInJlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIm9uaW5wdXQiLCJBZSIsImRldGFjaEV2ZW50IiwiQmUiLCJDZSIsImF0dGFjaEV2ZW50IiwiRGUiLCJFZSIsIkZlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJMZSIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiTWUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTmUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiT2UiLCJjb250ZW50RWRpdGFibGUiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJzdGFydCIsInNlbGVjdGlvblN0YXJ0IiwiZW5kIiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImRlZmF1bHRWaWV3IiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJWZSIsIldlIiwiWGUiLCJZZSIsIlplIiwiWWIiLCJpbnN0YW5jZSIsImxpc3RlbmVyIiwiRyIsIiRlIiwiaGFzIiwiYWYiLCJiZiIsInJhbmRvbSIsImNmIiwiZGYiLCJjYXB0dXJlIiwicGFzc2l2ZSIsIk5iIiwieCIsInciLCJ6IiwidSIsInEiLCJ0IiwidiIsImVmIiwiZmYiLCJwYXJlbnRXaW5kb3ciLCJnZiIsImhmIiwiSiIsIksiLCJRIiwiTCIsImplIiwiY2hhciIsImtlIiwidW5zaGlmdCIsImpmIiwia2YiLCJsZiIsIm1mIiwiYXV0b0ZvY3VzIiwibmYiLCJfX2h0bWwiLCJvZiIsInNldFRpbWVvdXQiLCJwZiIsImNsZWFyVGltZW91dCIsInFmIiwicmYiLCJzZiIsInByZXZpb3VzU2libGluZyIsInRmIiwidmYiLCJ3ZiIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJIIiwiSSIsIkNmIiwiTSIsIk4iLCJEZiIsIkVmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJnZXRDaGlsZENvbnRleHQiLCJKZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIlBmIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJRZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiUmYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJTZiIsIlRmIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJVZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiVmYiLCJXZiIsIlhmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJZZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsIk8iLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJfY3VycmVudFZhbHVlIiwic2ciLCJjaGlsZExhbmVzIiwidGciLCJkZXBlbmRlbmNpZXMiLCJmaXJzdENvbnRleHQiLCJsYW5lcyIsInVnIiwidmciLCJjb250ZXh0Iiwib2JzZXJ2ZWRCaXRzIiwicmVzcG9uZGVycyIsIndnIiwieGciLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJ5ZyIsInpnIiwiZXZlbnRUaW1lIiwibGFuZSIsInBheWxvYWQiLCJjYWxsYmFjayIsIkFnIiwiQmciLCJDZyIsIkEiLCJwIiwiQyIsIkRnIiwiRWciLCJGZyIsIkNvbXBvbmVudCIsInJlZnMiLCJHZyIsIktnIiwiaXNNb3VudGVkIiwiX3JlYWN0SW50ZXJuYWxzIiwiZW5xdWV1ZVNldFN0YXRlIiwiSGciLCJJZyIsIkpnIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIkxnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJNZyIsInN0YXRlIiwidXBkYXRlciIsIk5nIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiT2ciLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsIlBnIiwiUWciLCJyZWYiLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwiUmciLCJTZyIsImxhc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJpbmRleCIsIlRnIiwiVWciLCJtb2RlIiwiVmciLCJpbXBsZW1lbnRhdGlvbiIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImVoIiwiZG9jdW1lbnRFbGVtZW50IiwidGFnTmFtZSIsImZoIiwiZ2giLCJoaCIsIlAiLCJpaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBlbmRpbmdQcm9wcyIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwidmgiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwid2giLCJ4aCIsIlIiLCJTIiwiVCIsInloIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiYmFzZVF1ZXVlIiwicXVldWUiLCJJaCIsIkpoIiwiS2giLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiYWN0aW9uIiwiZWFnZXJSZWR1Y2VyIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZGlzcGF0Y2giLCJMaCIsIk1oIiwiX2dldFZlcnNpb24iLCJfc291cmNlIiwibXV0YWJsZVJlYWRMYW5lcyIsIk5oIiwiVSIsInVzZVN0YXRlIiwiZ2V0U25hcHNob3QiLCJzdWJzY3JpYmUiLCJ1c2VFZmZlY3QiLCJzZXRTbmFwc2hvdCIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiY3JlYXRlIiwiZGVzdHJveSIsImRlcHMiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJkaSIsInJlYWRDb250ZXh0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZU9wYXF1ZUlkZW50aWZpZXIiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJ1ZiIsImVpIiwiUmVhY3RDdXJyZW50T3duZXIiLCJmaSIsImdpIiwiaGkiLCJpaSIsImppIiwia2kiLCJsaSIsIm1pIiwiYmFzZUxhbmVzIiwibmkiLCJvaSIsInBpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicWkiLCJyaSIsInBlbmRpbmdDb250ZXh0IiwiQmkiLCJEaSIsIkVpIiwic2kiLCJyZXRyeUxhbmUiLCJ0aSIsImZhbGxiYWNrIiwidW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2siLCJ1aSIsInVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJsYXN0IiwidGFpbCIsInRhaWxNb2RlIiwiQWkiLCJGaSIsIkdpIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIm9uQ2xpY2siLCJvbmNsaWNrIiwic2l6ZSIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZVRleHROb2RlIiwiViIsIkhpIiwiSWkiLCJXIiwiSmkiLCJLaSIsIkxpIiwiTWkiLCJtZXNzYWdlIiwiTmkiLCJjb25zb2xlIiwiZXJyb3IiLCJPaSIsIldlYWtNYXAiLCJQaSIsIlFpIiwiUmkiLCJTaSIsImNvbXBvbmVudERpZENhdGNoIiwiVGkiLCJjb21wb25lbnRTdGFjayIsIlVpIiwiV2Vha1NldCIsIlZpIiwiV2kiLCJYaSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiWWkiLCJaaSIsIiRpIiwiZm9jdXMiLCJhaiIsImRpc3BsYXkiLCJiaiIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJjaiIsImRqIiwiZWoiLCJmaiIsImdqIiwiaGoiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiaWoiLCJqaiIsImtqIiwibGoiLCJ0aGVuIiwibWoiLCJuaiIsImNlaWwiLCJvaiIsInBqIiwiWCIsIlkiLCJxaiIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJJbmZpbml0eSIsIndqIiwiY2siLCJaIiwieGoiLCJ5aiIsInpqIiwiQWoiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsIklqIiwiSmoiLCJTYyIsIktqIiwiTGoiLCJNaiIsImNhbGxiYWNrTm9kZSIsImV4cGlyYXRpb25UaW1lcyIsImNhbGxiYWNrUHJpb3JpdHkiLCJUYyIsIk5qIiwiT2oiLCJQaiIsIlFqIiwiUmoiLCJTaiIsIlRqIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRMYW5lcyIsIlVqIiwidGltZW91dEhhbmRsZSIsIlhqIiwicGluZ0NhY2hlIiwiWWoiLCJaaiIsInZhIiwiYWsiLCJiayIsImRrIiwicmFuZ2VDb3VudCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJlayIsImV4dGVuZCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwib25Db21taXRGaWJlclJvb3QiLCJmayIsImdrIiwiaWsiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiamsiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwia2siLCJsayIsIm1rIiwibmsiLCJxayIsImh5ZHJhdGlvbk9wdGlvbnMiLCJtdXRhYmxlU291cmNlcyIsIl9pbnRlcm5hbFJvb3QiLCJyayIsInRrIiwiaGFzQXR0cmlidXRlIiwic2siLCJoayIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsInVubW91bnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsIlZqIiwid2siLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJ2ZXJzaW9uIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInhrIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJ5ayIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0IiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwiY2hlY2tEQ0UiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGcmFnbWVudCIsIkxhenkiLCJQb3J0YWwiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGVPZiIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHAiLCJwYXRoIiwiUmVnRXhwIiwiZ3JvdXBzIiwicHJlZml4IiwiZGVsaW1pdGVyIiwicGFydGlhbCIsImFzdGVyaXNrIiwiYXR0YWNoS2V5cyIsInJlZ2V4cFRvUmVnZXhwIiwicGFydHMiLCJhcnJheVRvUmVnZXhwIiwidG9rZW5zVG9SZWdFeHAiLCJzdHJpbmdUb1JlZ2V4cCIsImNvbXBpbGUiLCJzdHIiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwiUEFUSF9SRUdFWFAiLCJyZXMiLCJ0b2tlbnMiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZXhlYyIsImVzY2FwZWQiLCJncm91cCIsIm1vZGlmaWVyIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJtYXRjaGVzIiwib3B0cyIsImVuY29kZSIsInByZXR0eSIsInRva2VuIiwic2VnbWVudCIsImoiLCJzZW5zaXRpdmUiLCJzdHJpY3QiLCJyb3V0ZSIsImVuZHNXaXRoRGVsaW1pdGVyIiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsIl9fc2VsZiIsIl9fc291cmNlIiwiZXNjYXBlIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsImNvdW50IiwidG9BcnJheSIsIm9ubHkiLCJQdXJlQ29tcG9uZW50IiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwibWVtbyIsInJ1bnRpbWUiLCJPcCIsIiRTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsIndyaXRhYmxlIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwic2VsZiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJDb250ZXh0IiwiX2ludm9rZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwibWFrZUludm9rZU1ldGhvZCIsImZuIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsInZhbHVlcyIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwiaW52b2tlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlc3VsdCIsIl9fYXdhaXQiLCJ1bndyYXBwZWQiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsImFzeW5jIiwiUHJvbWlzZSIsIml0ZXIiLCJyZXZlcnNlIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsIkZ1bmN0aW9uIiwicGVyZm9ybWFuY2UiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJmbG9vciIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInNvcnRJbmRleCIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsImdldFRhcmdldCIsInN0eWxlVGFyZ2V0IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJpbnNlcnQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJjc3NOb2RlIiwiYXBwbHlUb1RhZyIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwiYWxsIiwiYXRvYiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaW5kZXgiLCJzcGxpY2UiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiZGVmaW5pdGlvbiIsImdsb2JhbFRoaXMiLCJwcm9wIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJpc0Fic29sdXRlIiwicGF0aG5hbWUiLCJzcGxpY2VPbmUiLCJjb25kaXRpb24iLCJhZGRMZWFkaW5nU2xhc2giLCJzdHJpcExlYWRpbmdTbGFzaCIsInN0cmlwQmFzZW5hbWUiLCJoYXNCYXNlbmFtZSIsInN0cmlwVHJhaWxpbmdTbGFzaCIsImNyZWF0ZVBhdGgiLCJoYXNoIiwiY3VycmVudExvY2F0aW9uIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsImhhc1RyYWlsaW5nU2xhc2giLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJ1cCIsInBhcnQiLCJjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImFwcGVuZExpc3RlbmVyIiwiaXNBY3RpdmUiLCJub3RpZnlMaXN0ZW5lcnMiLCJfbGVuIiwiYXJncyIsIl9rZXkiLCJjYW5Vc2VET00iLCJnZXRDb25maXJtYXRpb24iLCJjb25maXJtIiwiSGFzaENoYW5nZUV2ZW50JDEiLCJIYXNoUGF0aENvZGVycyIsImhhc2hiYW5nIiwiZW5jb2RlUGF0aCIsImRlY29kZVBhdGgiLCJub3NsYXNoIiwic2xhc2giLCJzdHJpcEhhc2giLCJnZXRIYXNoUGF0aCIsInJlcGxhY2VIYXNoUGF0aCIsImNyZWF0ZUhhc2hIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsImhpc3RvcnkiLCJfcHJvcHMiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMkaGFzaFR5cGUiLCJoYXNoVHlwZSIsImJhc2VuYW1lIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiZ2V0RE9NTG9jYXRpb24iLCJ0cmFuc2l0aW9uTWFuYWdlciIsIm5leHRTdGF0ZSIsImZvcmNlTmV4dFBvcCIsImlnbm9yZVBhdGgiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZW5jb2RlZFBhdGgiLCJwcmV2TG9jYXRpb24iLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwidG9JbmRleCIsImFsbFBhdGhzIiwibGFzdEluZGV4T2YiLCJmcm9tSW5kZXgiLCJkZWx0YSIsImdvIiwicmV2ZXJ0UG9wIiwiaGFuZGxlUG9wIiwiaW5pdGlhbExvY2F0aW9uIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwiaXNCbG9ja2VkIiwiY3JlYXRlSHJlZiIsImJhc2VUYWciLCJnZXRBdHRyaWJ1dGUiLCJwdXNoSGFzaFBhdGgiLCJwcmV2SW5kZXgiLCJuZXh0UGF0aHMiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJibG9jayIsInVuYmxvY2siLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsIk1BWF9TSUdORURfMzFfQklUX0lOVCIsImNvbW1vbmpzR2xvYmFsIiwiY3JlYXRlRXZlbnRFbWl0dGVyIiwiaGFuZGxlcnMiLCJvbiIsImhhbmRsZXIiLCJvZmYiLCJuZXdWYWx1ZSIsImNoYW5nZWRCaXRzIiwiY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJfQ29uc3VtZXIkY29udGV4dFR5cGUiLCJjb250ZXh0UHJvcCIsIl9Db21wb25lbnQiLCJfdGhpcyIsImVtaXR0ZXIiLCJfcHJvdG8iLCJfcmVmIiwibmV4dFByb3BzIiwib2xkVmFsdWUiLCJfQ29tcG9uZW50MiIsIl90aGlzMiIsIm9uVXBkYXRlIiwiX3Byb3RvMiIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsImhpc3RvcnlDb250ZXh0IiwiY3JlYXRlTmFtZWRDb250ZXh0IiwiY3JlYXRlTmFtZWRDb250ZXh0JDEiLCJSb3V0ZXIiLCJfUmVhY3QkQ29tcG9uZW50IiwiX2lzTW91bnRlZCIsIl9wZW5kaW5nTG9jYXRpb24iLCJzdGF0aWNDb250ZXh0IiwiY29tcHV0ZVJvb3RNYXRjaCIsInBhcmFtcyIsImlzRXhhY3QiLCJjYWNoZSQxIiwiY2FjaGVDb3VudCQxIiwibWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsInJlZHVjZSIsIm1hdGNoZWQiLCJfY29tcGlsZVBhdGgiLCJjYWNoZUtleSIsInBhdGhDYWNoZSIsImNvbXBpbGVQYXRoJDEiLCJSb3V0ZSIsImNvbnRleHQkMSIsImNvbXB1dGVkTWF0Y2giLCJfdGhpcyRwcm9wcyIsIlN3aXRjaCIsIkhhc2hSb3V0ZXIiLCJyZXNvbHZlVG9Mb2NhdGlvbiIsIm5vcm1hbGl6ZVRvTG9jYXRpb24iLCJmb3J3YXJkUmVmU2hpbSIsIkxpbmtBbmNob3IiLCJmb3J3YXJkZWRSZWYiLCJpbm5lclJlZiIsIm5hdmlnYXRlIiwiX29uQ2xpY2siLCJyZXN0IiwiZXgiLCJpc01vZGlmaWVkRXZlbnQiLCJMaW5rIiwiX3JlZjIiLCJfcmVmMiRjb21wb25lbnQiLCJmb3J3YXJkUmVmU2hpbSQxIiwiZm9yd2FyZFJlZiQxIiwiX3JlZiRhcmlhQ3VycmVudCIsImFyaWFDdXJyZW50IiwiX3JlZiRhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsImNsYXNzTmFtZVByb3AiLCJjbGFzc05hbWUiLCJpc0FjdGl2ZVByb3AiLCJsb2NhdGlvblByb3AiLCJzdHlsZVByb3AiLCJlc2NhcGVkUGF0aCIsImNsYXNzbmFtZXMiLCJqb2luQ2xhc3NuYW1lcyIsIk1FU1NBR0VUWVBFIiwic2V0VGV4dCIsInNob3dNZXNzYWdlIiwiYWxlcnQiLCJpbm5lclRleHQiLCJpbnB1dFRleHQiLCJnb3RvVVJMIiwibWVzc2FnZUhhbmRsZXIiLCJ3ZWJraXQiLCJtZXNzYWdlSGFuZGxlcnMiLCJqc0Z1bmMiLCJtZXNzYWdlSGFuZGxlcldpdGhSZXBseSIsImpzQ29uc29sZSIsInJlbG9hZCIsImlPU0NhbGxGdW5jdGlvbiIsInNyYyIsIm1hcmdpbiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsInNvdXJjZVN5bWJvbEtleXMiLCJfZGVmaW5lUHJvcGVydHkiLCJvd25LZXlzIiwiZW51bWVyYWJsZU9ubHkiLCJzeW0iLCJfb2JqZWN0U3ByZWFkMiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl90b0NvbnN1bWFibGVBcnJheSIsIl9jbGFzc0NhbGxDaGVjayIsIkNvbnN0cnVjdG9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiUmVmZXJlbmNlRXJyb3IiLCJfc2V0UHJvdG90eXBlT2YiLCJfaW5oZXJpdHMiLCJfZ2V0UHJvdG90eXBlT2YiLCJfdHlwZW9mIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsInNoYW0iLCJQcm94eSIsIlN1cGVyIiwiTmV3VGFyZ2V0Iiwib3B0aW9uIiwicmV0Iiwia2VlcEVtcHR5Iiwid2FybmVkIiwid2FybmluZyIsInZhbGlkIiwiSE9PS19NQVJLIiwid2FybmluZ0Z1bmMiLCJnZXRGaWVsZFZhbHVlIiwiZ2V0RmllbGRzVmFsdWUiLCJnZXRGaWVsZEVycm9yIiwiZ2V0RmllbGRzRXJyb3IiLCJpc0ZpZWxkc1RvdWNoZWQiLCJpc0ZpZWxkVG91Y2hlZCIsImlzRmllbGRWYWxpZGF0aW5nIiwiaXNGaWVsZHNWYWxpZGF0aW5nIiwicmVzZXRGaWVsZHMiLCJzZXRGaWVsZHMiLCJzZXRGaWVsZHNWYWx1ZSIsInZhbGlkYXRlRmllbGRzIiwic3VibWl0IiwiZ2V0SW50ZXJuYWxIb29rcyIsImluaXRFbnRpdHlWYWx1ZSIsInJlZ2lzdGVyRmllbGQiLCJ1c2VTdWJzY3JpYmUiLCJzZXRJbml0aWFsVmFsdWVzIiwic2V0Q2FsbGJhY2tzIiwiZ2V0RmllbGRzIiwic2V0VmFsaWRhdGVNZXNzYWdlcyIsInNldFByZXNlcnZlIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwiX25leHQiLCJfdGhyb3ciLCJfYXN5bmNUb0dlbmVyYXRvciIsIl9jb25zdHJ1Y3QiLCJQYXJlbnQiLCJDbGFzcyIsIl93cmFwTmF0aXZlU3VwZXIiLCJfY2FjaGUiLCJXcmFwcGVyIiwiZm9ybWF0UmVnRXhwIiwiY29udmVydEZpZWxkc0Vycm9yIiwiZXJyb3JzIiwiZmllbGRzIiwiZmllbGQiLCJOdW1iZXIiLCJfIiwiaXNFbXB0eVZhbHVlIiwiaXNOYXRpdmVTdHJpbmdUeXBlIiwiYXN5bmNTZXJpYWxBcnJheSIsImFyckxlbmd0aCIsIm9yaWdpbmFsIiwicHJvY2VzcyIsImVudiIsIkFzeW5jVmFsaWRhdGlvbkVycm9yIiwiX0Vycm9yIiwiY29tcGxlbWVudEVycm9yIiwicnVsZSIsImZ1bGxGaWVsZCIsImRlZXBNZXJnZSIsIm1lc3NhZ2VzIiwicGFyc2VJbnQiLCJnZXRUaW1lIiwiZ2V0TW9udGgiLCJnZXRZZWFyIiwicnVsZXMiLCJydWxlVHlwZSIsIm51bSIsImxhc3RJbmRleCIsInR5cGUkMSIsInZhbGlkYXRvcnMiLCJkYXRlT2JqZWN0IiwibmV3TWVzc2FnZXMiLCJjbG9uZSIsImNsb25lZCIsIlNjaGVtYSIsIl9tZXNzYWdlcyIsImVudGl0eSIsInBhdGhzIiwiX3BhdGhzIiwicmVzdFBhdGgiLCJnZXROYW1lUGF0aCIsInN0b3JlIiwibmFtZVBhdGgiLCJjbG9uZUJ5TmFtZVBhdGhMaXN0IiwibmFtZVBhdGhMaXN0IiwibmV3U3RvcmUiLCJjb250YWluc05hbWVQYXRoIiwic29tZSIsIm1hdGNoTmFtZVBhdGgiLCJpc09iamVjdCIsImludGVybmFsU2V0VmFsdWVzIiwicHJldlZhbHVlIiwicmVjdXJzaXZlIiwic2V0VmFsdWVzIiwicmVzdFZhbHVlcyIsImNoYW5nZWROYW1lUGF0aCIsImV2ZXJ5IiwibmFtZVVuaXQiLCJkZWZhdWx0R2V0VmFsdWVGcm9tRXZlbnQiLCJ2YWx1ZVByb3BOYW1lIiwibW92ZUluZGV4IiwiZGlmZiIsInZhbGlkYXRlIiwic291cmNlXyIsIm1lc3NhZ2VzJDEiLCJzZXJpZXMiLCJ0cmFuc2Zvcm0iLCJ2YWxpZGF0b3IiLCJnZXRWYWxpZGF0aW9uTWV0aG9kIiwiZ2V0VHlwZSIsImVycm9yRmllbGRzIiwib2JqQXJyIiwiZmlyc3QiLCJfcGVuZGluZyIsImZsYXR0ZW5PYmpBcnIiLCJmaXJzdEZpZWxkcyIsIm9iakFycktleXMiLCJvYmpBcnJMZW5ndGgiLCJ0b3RhbCIsInJlc3VsdHMiLCJhc3luY1BhcmFsbGVsQXJyYXkiLCJhc3luY01hcCIsImRvSXQiLCJkZWVwIiwiZGVmYXVsdEZpZWxkIiwiYWRkRnVsbGZpZWxkIiwic2NoZW1hIiwic3VwcHJlc3NXYXJuaW5nIiwiZmllbGRzU2NoZW1hIiwiZmllbGRTY2hlbWEiLCJlcnJzIiwiZmluYWxFcnJvcnMiLCJhc3luY1ZhbGlkYXRvciIsIl9lcnJvcnMiLCJtZXNzYWdlSW5kZXgiLCJyZWdpc3RlciIsImVudW0iLCJib29sZWFuIiwiZmxvYXQiLCJBc3luY1ZhbGlkYXRvciIsImNvbnZlcnRNZXNzYWdlcyIsIm1lc3NhZ2VWYXJpYWJsZXMiLCJrdiIsInJlcGxhY2VGdW5jIiwidGVtcGxhdGUiLCJhZGRpdGlvbmFsS1YiLCJyZXBsYWNlTWVzc2FnZSIsImZpbGxUZW1wbGF0ZSIsInJ1bGVOYW1lIiwidmFsaWRhdGVSdWxlIiwiX3giLCJfeDIiLCJfeDMiLCJfeDQiLCJfeDUiLCJfdmFsaWRhdGVSdWxlIiwiX2NhbGxlZTIiLCJjbG9uZVJ1bGUiLCJzdWJSdWxlRmllbGQiLCJzdWJSZXN1bHRzIiwiX2NvbnRleHQyIiwidmFsaWRhdGVNZXNzYWdlcyIsInQwIiwic3ViVmFsdWUiLCJfZmluaXNoT25BbGxGYWlsZWQiLCJfY2FsbGVlMyIsInJ1bGVQcm9taXNlcyIsIl9jb250ZXh0MyIsImVycm9yc0xpc3QiLCJfcmVmMyIsIl9maW5pc2hPbkZpcnN0RmFpbGVkIiwiX2NhbGxlZTQiLCJfY29udGV4dDQiLCJwcm9taXNlIiwicmVxdWlyZVVwZGF0ZSIsInNob3VsZFVwZGF0ZSIsIm5leHRWYWx1ZSIsIkZpZWxkIiwiX3N1cGVyIiwicmVzZXRDb3VudCIsImNhbmNlbFJlZ2lzdGVyRnVuYyIsIm1vdW50ZWQiLCJ0b3VjaGVkIiwiZGlydHkiLCJ2YWxpZGF0ZVByb21pc2UiLCJjYW5jZWxSZWdpc3RlciIsInByZXNlcnZlIiwiaXNMaXN0RmllbGQiLCJfdGhpcyRwcm9wczIiLCJfZmllbGRDb250ZXh0JHByZWZpeE4iLCJmaWVsZENvbnRleHQiLCJwcmVmaXhOYW1lIiwiZ2V0UnVsZXMiLCJfdGhpcyRwcm9wczMiLCJfdGhpcyRwcm9wczMkcnVsZXMiLCJyZWZyZXNoIiwib25TdG9yZUNoYW5nZSIsInByZXZTdG9yZSIsIl90aGlzJHByb3BzNCIsIl90aGlzJHByb3BzNCRkZXBlbmRlbiIsIm9uUmVzZXQiLCJjdXJWYWx1ZSIsIm5hbWVQYXRoTWF0Y2giLCJ2YWxpZGF0aW5nIiwicmVSZW5kZXIiLCJkZXBlbmRlbmN5IiwicmVsYXRlZEZpZWxkcyIsInZhbGlkYXRlUnVsZXMiLCJjdXJyZW50VmFsdWUiLCJyb290UHJvbWlzZSIsIl90aGlzJHByb3BzNSIsIl90aGlzJHByb3BzNSR2YWxpZGF0ZSIsInZhbGlkYXRlRmlyc3QiLCJ0cmlnZ2VyTmFtZSIsImZpbHRlcmVkUnVsZXMiLCJ2YWxpZGF0ZVRyaWdnZXIiLCJpbmNsdWRlcyIsInN1bW1hcnlQcm9taXNlIiwiZmlsbGVkUnVsZXMiLCJjdXJyZW50UnVsZSIsIm9yaWdpblZhbGlkYXRvckZ1bmMiLCJoYXNQcm9taXNlIiwiY2F0Y2giLCJfY2FsbGVlIiwiX3g2IiwiX3g3IiwiX3g5IiwiZmluaXNoT25GaXJzdEZhaWxlZCIsIl94OCIsImZpbmlzaE9uQWxsRmFpbGVkIiwiaXNGaWVsZERpcnR5IiwiZ2V0RXJyb3JzIiwiaXNMaXN0IiwiZ2V0TWV0YSIsInByZXZWYWxpZGF0aW5nIiwiZ2V0T25seUNoaWxkIiwiZ2V0Q29udHJvbGxlZCIsImlzRnVuY3Rpb24iLCJjaGlsZExpc3QiLCJjaGlsZFByb3BzIiwiX3RoaXMkcHJvcHM2IiwidHJpZ2dlciIsImdldFZhbHVlRnJvbUV2ZW50Iiwibm9ybWFsaXplIiwiZ2V0VmFsdWVQcm9wcyIsIm1lcmdlZFZhbGlkYXRlVHJpZ2dlciIsIl9nZXRJbnRlcm5hbEhvb2tzIiwibWVyZ2VkR2V0VmFsdWVQcm9wcyIsIm9yaWdpblRyaWdnZXJGdW5jIiwiY29udHJvbCIsInZhbGlkYXRlVHJpZ2dlckxpc3QiLCJvcmlnaW5UcmlnZ2VyIiwiX3RoaXMkcHJvcHM3IiwicmV0dXJuQ2hpbGROb2RlIiwiX3RoaXMkZ2V0T25seUNoaWxkIiwiRmllbGRDb250ZXh0IiwiX3JlZjQiLCJyZXN0UHJvcHMiLCJOYW1lTWFwIiwiZmluZEluZGV4IiwiZmluZCIsImpzb24iLCJGb3JtU3RvcmUiLCJmb3JjZVJvb3RVcGRhdGUiLCJmb3JtSG9va2VkIiwic3Vic2NyaWJhYmxlIiwiZmllbGRFbnRpdGllcyIsImluaXRpYWxWYWx1ZXMiLCJjYWxsYmFja3MiLCJsYXN0VmFsaWRhdGVQcm9taXNlIiwiZ2V0Rm9ybSIsImluaXQiLCJnZXRJbml0aWFsVmFsdWUiLCJ0aW1lb3V0SWQiLCJ3YXJuaW5nVW5ob29rZWQiLCJnZXRGaWVsZEVudGl0aWVzIiwicHVyZSIsImdldEZpZWxkc01hcCIsImNhY2hlIiwiZ2V0RmllbGRFbnRpdGllc0Zvck5hbWVQYXRoTGlzdCIsIm5hbWVMaXN0IiwiSU5WQUxJREFURV9OQU1FX1BBVEgiLCJmaWx0ZXJGdW5jIiwiZmlsdGVyZWROYW1lTGlzdCIsIl9lbnRpdHkkaXNMaXN0RmllbGQiLCJhcmcwIiwiYXJnMSIsImlzQWxsRmllbGRzVG91Y2hlZCIsInNob3J0TmFtZVBhdGgiLCJmaWVsZE5hbWVQYXRoIiwiaXNOYW1lUGF0aExpc3RUb3VjaGVkIiwiZW50aXRpZXMiLCJuYW1lUGF0aExpc3RFbnRpdGllcyIsInRlc3RGaWVsZCIsInJlc2V0V2l0aEZpZWxkSW5pdGlhbFZhbHVlIiwicmVjb3JkcyIsInJlcXVpcmVkRmllbGRFbnRpdGllcyIsInJlc2V0V2l0aEZpZWxkcyIsIm9yaWdpblZhbHVlIiwic2tpcEV4aXN0IiwiX3JlcXVpcmVkRmllbGRFbnRpdGllIiwibm90aWZ5T2JzZXJ2ZXJzIiwiZmllbGREYXRhIiwidXBkYXRlVmFsdWUiLCJfbmFtZVBhdGgiLCJtZXJnZWRJbmZvIiwiY2hpbGRyZW5GaWVsZHMiLCJnZXREZXBlbmRlbmN5Q2hpbGRyZW5GaWVsZHMiLCJvblZhbHVlc0NoYW5nZSIsInRyaWdnZXJPbkZpZWxkc0NoYW5nZSIsInJvb3ROYW1lUGF0aCIsImRlcGVuZGVuY2llczJmaWVsZHMiLCJkZXBlbmRlbmN5TmFtZVBhdGgiLCJmaWxsQ2hpbGRyZW4iLCJmaWxlZEVycm9ycyIsIm9uRmllbGRzQ2hhbmdlIiwiZmllbGROYW1lIiwicHJvdmlkZU5hbWVMaXN0IiwicHJvbWlzZUxpc3QiLCJoYXNFcnJvciIsImFsbFByb21pc2VGaW5pc2giLCJyZXN1bHROYW1lUGF0aExpc3QiLCJfcmVmNSIsInJldHVyblByb21pc2UiLCJlcnJvckxpc3QiLCJvdXRPZkRhdGUiLCJvbkZpbmlzaCIsIm9uRmluaXNoRmFpbGVkIiwiZm9ybVJlZiIsImZvcm1TdG9yZSIsIkZvcm1Db250ZXh0IiwidHJpZ2dlckZvcm1DaGFuZ2UiLCJ0cmlnZ2VyRm9ybUZpbmlzaCIsInJlZ2lzdGVyRm9ybSIsInVucmVnaXN0ZXJGb3JtIiwiRm9ybVByb3ZpZGVyIiwib25Gb3JtQ2hhbmdlIiwib25Gb3JtRmluaXNoIiwiZm9ybUNvbnRleHQiLCJmb3Jtc1JlZiIsImNoYW5nZWRGaWVsZHMiLCJmb3JtcyIsIm5ld0Zvcm1zIiwiX3JlZiRjb21wb25lbnQiLCJfcmVmJHZhbGlkYXRlVHJpZ2dlciIsIl9vbkZpZWxkc0NoYW5nZSIsIl9vbkZpbmlzaCIsImZvcm1JbnN0YW5jZSIsIl9mb3JtSW5zdGFuY2UkZ2V0SW50ZSIsIm1vdW50UmVmIiwiY2hpbGRyZW5Ob2RlIiwiY2hpbGRyZW5SZW5kZXJQcm9wcyIsInByZXZGaWVsZHNSZWYiLCJ0YXJnZXRLZXlzIiwic291cmNlVmFsdWUiLCJ0YXJnZXRWYWx1ZSIsImlzU2ltaWxhciIsImZvcm1Db250ZXh0VmFsdWUiLCJ3cmFwcGVyTm9kZSIsIm9uU3VibWl0IiwiUmVmRm9ybSIsIkxpc3QiLCJrZXlNYW5hZ2VyIiwicGFyZW50UHJlZml4TmFtZSIsIl9yZWYzJHZhbHVlIiwib25DaGFuZ2UiLCJnZXROZXdWYWx1ZSIsIm9wZXJhdGlvbnMiLCJpbmRleFNldCIsImtleXNJbmRleCIsInZhbHVlSW5kZXgiLCJtb3ZlIiwibGlzdFZhbHVlIiwiX18iLCJ1c2VGb3JtIiwibW9udGhCZWZvcmVZZWFyIiwiZW1wdHlUZXh0IiwidGl0bGVzIiwicnVudGltZUxvY2FsZSIsImNoYW5nZUNvbmZpcm1Mb2NhbGUiLCJuZXdMb2NhbGUiLCJBTlRfTUFSSyIsIkxvY2FsZVByb3ZpZGVyIiwiX0FOVF9NQVJLX18iLCJwcmV2UHJvcHMiLCJleGlzdCIsIkxvY2FsZVJlY2VpdmVyIiwiZGVmYXVsdExvY2FsZSIsImFudExvY2FsZSIsImxvY2FsZUZyb21Db250ZXh0IiwibG9jYWxlQ29kZSIsImdldExvY2FsZSIsImdldExvY2FsZUNvZGUiLCJwcmVmaXhDbHMiLCJnZXRQcmVmaXhDbHMiLCJDb25maWdDb250ZXh0Iiwidmlld0JveCIsInhtbG5zIiwiZmlsbCIsImZpbGxSdWxlIiwiY3giLCJjeSIsInJ4IiwicnkiLCJkZWZhdWx0RW1wdHlJbWciLCJzaW1wbGVFbXB0eUltZyIsIl9hIiwiY3VzdG9taXplUHJlZml4Q2xzIiwiX2EkaW1hZ2UiLCJpbWFnZSIsImltYWdlU3R5bGUiLCJfX3Jlc3QiLCJfUmVhY3QkdXNlQ29udGV4dCIsImRpcmVjdGlvbiIsIl9jbGFzc05hbWVzIiwiaW1hZ2VOb2RlIiwiZGVzIiwiYWx0IiwiUFJFU0VOVEVEX0lNQUdFX0RFRkFVTFQiLCJQUkVTRU5URURfSU1BR0VfU0lNUExFIiwic3VmZml4Q2xzIiwicmVuZGVyRW1wdHkiLCJDb25maWdDb25zdW1lciIsIlNpemVDb250ZXh0IiwiU2l6ZUNvbnRleHRQcm92aWRlciIsIm9yaWdpblNpemUiLCJjYW5Vc2VEb20iLCJtYWtlUHJlZml4TWFwIiwiZXZlbnROYW1lIiwicHJlZml4ZXMiLCJkb21TdXBwb3J0Iiwid2luIiwidmVuZG9yUHJlZml4ZXMiLCJfZG9jdW1lbnQkY3JlYXRlRWxlbWUiLCJwcmVmaXhlZEV2ZW50TmFtZXMiLCJnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSIsInByZWZpeE1hcCIsInN0eWxlUHJvcExpc3QiLCJpbnRlcm5hbEFuaW1hdGlvbkVuZE5hbWUiLCJpbnRlcm5hbFRyYW5zaXRpb25FbmROYW1lIiwic3VwcG9ydFRyYW5zaXRpb24iLCJhbmltYXRpb25FbmROYW1lIiwidHJhbnNpdGlvbkVuZE5hbWUiLCJnZXRUcmFuc2l0aW9uTmFtZSIsInRyYW5zaXRpb25OYW1lIiwidHJhbnNpdGlvblR5cGUiLCJTVEFUVVNfTk9ORSIsIlNUQVRVU19BUFBFQVIiLCJTVEFUVVNfRU5URVIiLCJTVEFUVVNfTEVBVkUiLCJTVEVQX05PTkUiLCJTVEVQX1BSRVBBUkUiLCJTVEVQX1NUQVJUIiwiU1RFUF9BQ1RJVkUiLCJTVEVQX0FDVElWQVRFRCIsInVzZU1vdW50U3RhdHVzIiwiZGVzdHJveVJlZiIsIl91c2VTdGF0ZTIiLCJzZXRWYWwiLCJyYWYiLCJjYWYiLCJ3cmFwcGVyUmFmIiwiY2FuY2VsIiwiU1RFUF9RVUVVRSIsInN0ZXAiLCJ1c2VTdGF0dXMiLCJzdXBwb3J0TW90aW9uIiwidmlzaWJsZSIsImdldEVsZW1lbnQiLCJfcmVmJG1vdGlvbkVudGVyIiwibW90aW9uRW50ZXIiLCJfcmVmJG1vdGlvbkFwcGVhciIsIm1vdGlvbkFwcGVhciIsIl9yZWYkbW90aW9uTGVhdmUiLCJtb3Rpb25MZWF2ZSIsIm1vdGlvbkRlYWRsaW5lIiwibW90aW9uTGVhdmVJbW1lZGlhdGVseSIsIm9uQXBwZWFyUHJlcGFyZSIsIm9uRW50ZXJQcmVwYXJlIiwib25MZWF2ZVByZXBhcmUiLCJvbkFwcGVhclN0YXJ0Iiwib25FbnRlclN0YXJ0Iiwib25MZWF2ZVN0YXJ0Iiwib25BcHBlYXJBY3RpdmUiLCJvbkVudGVyQWN0aXZlIiwib25MZWF2ZUFjdGl2ZSIsIm9uQXBwZWFyRW5kIiwib25FbnRlckVuZCIsIm9uTGVhdmVFbmQiLCJvblZpc2libGVDaGFuZ2VkIiwiYXN5bmNWaXNpYmxlIiwic2V0QXN5bmNWaXNpYmxlIiwiX3VzZVN0YXRlNCIsInN0YXR1cyIsInNldFN0YXR1cyIsIl91c2VTdGF0ZTYiLCJzZXRTdHlsZSIsIm1vdW50ZWRSZWYiLCJkZWFkbGluZVJlZiIsImRlc3Ryb3llZFJlZiIsImNhY2hlRWxlbWVudFJlZiIsImdldERvbUVsZW1lbnQiLCJhY3RpdmVSZWYiLCJvbkludGVybmFsTW90aW9uRW5kIiwiY2FuRW5kIiwiZGVhZGxpbmUiLCJwYXRjaE1vdGlvbkV2ZW50cyIsImNhbGxiYWNrUmVmIiwicmVtb3ZlTW90aW9uRXZlbnRzIiwidXNlRG9tTW90aW9uRXZlbnRzIiwiZXZlbnRIYW5kbGVycyIsIl91c2VTdGVwUXVldWUyIiwiX1JlYWN0JHVzZVN0YXRlMiIsInNldFN0ZXAiLCJfdXNlTmV4dEZyYW1lMiIsIm5leHRGcmFtZVJlZiIsImNhbmNlbE5leHRGcmFtZSIsIm5leHRGcmFtZSIsIm5leHRGcmFtZUlkIiwiaXNDYW5jZWxlZCIsInVzZU5leHRGcmFtZSIsIm5leHRTdGVwIiwiZG9OZXh0IiwidXNlU3RlcFF1ZXVlIiwibmV3U3RlcCIsIm9uUHJlcGFyZSIsIl9ldmVudEhhbmRsZXJzJHN0ZXAiLCJzdGFydFN0ZXAiLCJhY3RpdmUiLCJuZXh0U3RhdHVzIiwibWVyZ2VkU3R5bGUiLCJEb21XcmFwcGVyIiwiY29uZmlnIiwidHJhbnNpdGlvblN1cHBvcnQiLCJpc1N1cHBvcnRUcmFuc2l0aW9uIiwibW90aW9uTmFtZSIsIkNTU01vdGlvbiIsIl9wcm9wcyR2aXNpYmxlIiwiX3Byb3BzJHJlbW92ZU9uTGVhdmUiLCJyZW1vdmVPbkxlYXZlIiwiZm9yY2VSZW5kZXIiLCJsZWF2ZWRDbGFzc05hbWUiLCJldmVudFByb3BzIiwibm9kZVJlZiIsIndyYXBwZXJOb2RlUmVmIiwiX3VzZVN0YXR1czIiLCJIVE1MRWxlbWVudCIsInN0YXR1c1N0ZXAiLCJzdGF0dXNTdHlsZSIsIm1lcmdlZFZpc2libGUiLCJvcmlnaW5SZWYiLCJtb3Rpb25DaGlsZHJlbiIsInNldE5vZGVSZWYiLCJmaWxsUmVmIiwibWVyZ2VkUHJvcHMiLCJzdGF0dXNTdWZmaXgiLCJTVEFUVVNfQUREIiwiU1RBVFVTX0tFRVAiLCJTVEFUVVNfUkVNT1ZFIiwiU1RBVFVTX1JFTU9WRUQiLCJ3cmFwS2V5VG9PYmplY3QiLCJrZXlPYmoiLCJwYXJzZUtleXMiLCJkaWZmS2V5cyIsInByZXZLZXlzIiwiY3VycmVudEtleXMiLCJjdXJyZW50SW5kZXgiLCJjdXJyZW50TGVuIiwicHJldktleU9iamVjdHMiLCJjdXJyZW50S2V5T2JqZWN0cyIsImhpdCIsImN1cnJlbnRLZXlPYmoiLCJkdXBsaWNhdGVkS2V5cyIsIm1hdGNoS2V5IiwiTU9USU9OX1BST1BfTkFNRVMiLCJDU1NNb3Rpb25MaXN0Iiwia2V5RW50aXRpZXMiLCJyZW1vdmVLZXkiLCJfb25WaXNpYmxlQ2hhbmdlZCIsIm1vdGlvblByb3BzIiwiY2hhbmdlZFZpc2libGUiLCJwYXJzZWRLZXlPYmplY3RzIiwicHJldkVudGl0eSIsIk5vdGljZSIsImNsb3NlVGltZXIiLCJjbG9zZSIsImNsZWFyQ2xvc2VUaW1lciIsIm9uQ2xvc2UiLCJub3RpY2VLZXkiLCJzdGFydENsb3NlVGltZXIiLCJkdXJhdGlvbiIsInVwZGF0ZU1hcmsiLCJyZXN0YXJ0Q2xvc2VUaW1lciIsImNsb3NhYmxlIiwiY2xvc2VJY29uIiwiaG9sZGVyIiwiY29tcG9uZW50Q2xhc3MiLCJkYXRhT3JBcmlhQXR0cmlidXRlUHJvcHMiLCJhY2MiLCJvbk1vdXNlRW50ZXIiLCJvbk1vdXNlTGVhdmUiLCJ0YWJJbmRleCIsIm5vdGlmaWNhdGlvbkluc3RhbmNlIiwiY3JlYXRlZFJlZiIsImVsZW1lbnRzIiwic2V0RWxlbWVudHMiLCJub3RpY2VQcm9wcyIsImRpdiIsIm5vdGljZUVsZSIsIm9yaWdpbkVsZW1lbnRzIiwic2VlZCIsImdldFV1aWQiLCJOb3RpZmljYXRpb24iLCJub3RpY2VzIiwiaG9va1JlZnMiLCJvcmlnaW5Ob3RpY2UiLCJob2xkZXJDYWxsYmFjayIsIm5vdGljZSIsIm1heENvdW50IiwicHJldmlvdXNTdGF0ZSIsIm5vdGljZUluZGV4IiwidXBkYXRlZE5vdGljZXMiLCJ1c2VyUGFzc0tleSIsIl9yZWYyJG5vdGljZSIsIm5vdGljZVByb3BzTWFwIiwibm90aWNlS2V5cyIsIl9ub3RpY2Ukb25DbG9zZSIsIm1vdGlvbkNsYXNzTmFtZSIsIm1vdGlvblN0eWxlIiwiX3RoaXMyJG5vdGljZVByb3BzTWFwIiwibmV3SW5zdGFuY2UiLCJwcm9wZXJ0aWVzIiwiX3JlZjYiLCJnZXRDb250YWluZXIiLCJjYWxsZWQiLCJub3RpZmljYXRpb24iLCJyZW1vdmVOb3RpY2UiLCJ1c2VOb3RpZmljYXRpb24iLCJib3VuZDAxIiwicGFyc2VGbG9hdCIsImlzT25lUG9pbnRaZXJvIiwiaXNQZXJjZW50IiwiaXNQZXJjZW50YWdlIiwiYWJzIiwiY2xhbXAwMSIsImJvdW5kQWxwaGEiLCJjb252ZXJ0VG9QZXJjZW50YWdlIiwicmdiVG9Ic2wiLCJodWUycmdiIiwicmdiVG9Ic3YiLCJyZ2JUb0hleCIsImFsbG93M0NoYXIiLCJyb3VuZCIsInN0YXJ0c1dpdGgiLCJjb252ZXJ0SGV4VG9EZWNpbWFsIiwicGFyc2VJbnRGcm9tSGV4IiwibmFtZXMiLCJhbGljZWJsdWUiLCJhbnRpcXVld2hpdGUiLCJhcXVhIiwiYXF1YW1hcmluZSIsImF6dXJlIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFjayIsImJsYW5jaGVkYWxtb25kIiwiYmx1ZSIsImJsdWV2aW9sZXQiLCJicm93biIsImJ1cmx5d29vZCIsImNhZGV0Ymx1ZSIsImNoYXJ0cmV1c2UiLCJjaG9jb2xhdGUiLCJjb3JhbCIsImNvcm5mbG93ZXJibHVlIiwiY29ybnNpbGsiLCJjcmltc29uIiwiY3lhbiIsImRhcmtibHVlIiwiZGFya2N5YW4iLCJkYXJrZ29sZGVucm9kIiwiZGFya2dyYXkiLCJkYXJrZ3JlZW4iLCJkYXJrZ3JleSIsImRhcmtraGFraSIsImRhcmttYWdlbnRhIiwiZGFya29saXZlZ3JlZW4iLCJkYXJrb3JhbmdlIiwiZGFya29yY2hpZCIsImRhcmtyZWQiLCJkYXJrc2FsbW9uIiwiZGFya3NlYWdyZWVuIiwiZGFya3NsYXRlYmx1ZSIsImRhcmtzbGF0ZWdyYXkiLCJkYXJrc2xhdGVncmV5IiwiZGFya3R1cnF1b2lzZSIsImRhcmt2aW9sZXQiLCJkZWVwcGluayIsImRlZXBza3libHVlIiwiZGltZ3JheSIsImRpbWdyZXkiLCJkb2RnZXJibHVlIiwiZmlyZWJyaWNrIiwiZmxvcmFsd2hpdGUiLCJmb3Jlc3RncmVlbiIsImZ1Y2hzaWEiLCJnYWluc2Jvcm8iLCJnaG9zdHdoaXRlIiwiZ29sZGVucm9kIiwiZ29sZCIsImdyYXkiLCJncmVlbiIsImdyZWVueWVsbG93IiwiZ3JleSIsImhvbmV5ZGV3IiwiaG90cGluayIsImluZGlhbnJlZCIsImluZGlnbyIsIml2b3J5Iiwia2hha2kiLCJsYXZlbmRlcmJsdXNoIiwibGF2ZW5kZXIiLCJsYXduZ3JlZW4iLCJsZW1vbmNoaWZmb24iLCJsaWdodGJsdWUiLCJsaWdodGNvcmFsIiwibGlnaHRjeWFuIiwibGlnaHRnb2xkZW5yb2R5ZWxsb3ciLCJsaWdodGdyYXkiLCJsaWdodGdyZWVuIiwibGlnaHRncmV5IiwibGlnaHRwaW5rIiwibGlnaHRzYWxtb24iLCJsaWdodHNlYWdyZWVuIiwibGlnaHRza3libHVlIiwibGlnaHRzbGF0ZWdyYXkiLCJsaWdodHNsYXRlZ3JleSIsImxpZ2h0c3RlZWxibHVlIiwibGlnaHR5ZWxsb3ciLCJsaW1lIiwibGltZWdyZWVuIiwibGluZW4iLCJtYWdlbnRhIiwibWFyb29uIiwibWVkaXVtYXF1YW1hcmluZSIsIm1lZGl1bWJsdWUiLCJtZWRpdW1vcmNoaWQiLCJtZWRpdW1wdXJwbGUiLCJtZWRpdW1zZWFncmVlbiIsIm1lZGl1bXNsYXRlYmx1ZSIsIm1lZGl1bXNwcmluZ2dyZWVuIiwibWVkaXVtdHVycXVvaXNlIiwibWVkaXVtdmlvbGV0cmVkIiwibWlkbmlnaHRibHVlIiwibWludGNyZWFtIiwibWlzdHlyb3NlIiwibW9jY2FzaW4iLCJuYXZham93aGl0ZSIsIm5hdnkiLCJvbGRsYWNlIiwib2xpdmUiLCJvbGl2ZWRyYWIiLCJvcmFuZ2UiLCJvcmFuZ2VyZWQiLCJvcmNoaWQiLCJwYWxlZ29sZGVucm9kIiwicGFsZWdyZWVuIiwicGFsZXR1cnF1b2lzZSIsInBhbGV2aW9sZXRyZWQiLCJwYXBheWF3aGlwIiwicGVhY2hwdWZmIiwicGVydSIsInBpbmsiLCJwbHVtIiwicG93ZGVyYmx1ZSIsInB1cnBsZSIsInJlYmVjY2FwdXJwbGUiLCJyZWQiLCJyb3N5YnJvd24iLCJyb3lhbGJsdWUiLCJzYWRkbGVicm93biIsInNhbG1vbiIsInNhbmR5YnJvd24iLCJzZWFncmVlbiIsInNlYXNoZWxsIiwic2llbm5hIiwic2lsdmVyIiwic2t5Ymx1ZSIsInNsYXRlYmx1ZSIsInNsYXRlZ3JheSIsInNsYXRlZ3JleSIsInNub3ciLCJzcHJpbmdncmVlbiIsInN0ZWVsYmx1ZSIsInRhbiIsInRlYWwiLCJ0aGlzdGxlIiwidG9tYXRvIiwidHVycXVvaXNlIiwidmlvbGV0Iiwid2hlYXQiLCJ3aGl0ZSIsIndoaXRlc21va2UiLCJ5ZWxsb3ciLCJ5ZWxsb3dncmVlbiIsIkNTU19VTklUIiwiUEVSTUlTU0lWRV9NQVRDSDMiLCJQRVJNSVNTSVZFX01BVENINCIsIm1hdGNoZXJzIiwicmdiIiwicmdiYSIsImhzbCIsImhzbGEiLCJoc3YiLCJoc3ZhIiwiaGV4MyIsImhleDYiLCJoZXg0IiwiaGV4OCIsImlzVmFsaWRDU1NVbml0IiwiVGlueUNvbG9yIiwibnVtYmVySW5wdXRUb09iamVjdCIsIm9yaWdpbmFsSW5wdXQiLCJuYW1lZCIsInN0cmluZ0lucHV0VG9PYmplY3QiLCJtb2QiLCJoc3ZUb1JnYiIsImhzbFRvUmdiIiwiaW5wdXRUb1JHQiIsInJvdW5kQSIsImdyYWRpZW50VHlwZSIsImlzVmFsaWQiLCJpc0RhcmsiLCJnZXRCcmlnaHRuZXNzIiwiaXNMaWdodCIsInRvUmdiIiwiZ2V0THVtaW5hbmNlIiwiUnNSR0IiLCJHc1JHQiIsIkJzUkdCIiwicG93IiwiZ2V0QWxwaGEiLCJzZXRBbHBoYSIsImFscGhhIiwidG9Ic3YiLCJ0b0hzdlN0cmluZyIsInRvSHNsIiwidG9Ic2xTdHJpbmciLCJ0b0hleCIsInRvSGV4U3RyaW5nIiwidG9IZXg4IiwiYWxsb3c0Q2hhciIsInJnYmFUb0hleCIsInRvSGV4OFN0cmluZyIsInRvUmdiU3RyaW5nIiwidG9QZXJjZW50YWdlUmdiIiwiZm10IiwidG9QZXJjZW50YWdlUmdiU3RyaW5nIiwicm5kIiwidG9OYW1lIiwiZW50cmllcyIsIl9iIiwiZm9ybWF0U2V0IiwiZm9ybWF0dGVkU3RyaW5nIiwiaGFzQWxwaGEiLCJ0b051bWJlciIsImxpZ2h0ZW4iLCJhbW91bnQiLCJicmlnaHRlbiIsImRhcmtlbiIsInRpbnQiLCJtaXgiLCJzaGFkZSIsImRlc2F0dXJhdGUiLCJzYXR1cmF0ZSIsImdyZXlzY2FsZSIsInNwaW4iLCJodWUiLCJyZ2IxIiwicmdiMiIsImFuYWxvZ291cyIsInNsaWNlcyIsImNvbXBsZW1lbnQiLCJtb25vY2hyb21hdGljIiwibW9kaWZpY2F0aW9uIiwic3BsaXRjb21wbGVtZW50Iiwib25CYWNrZ3JvdW5kIiwiYmFja2dyb3VuZCIsInRyaWFkIiwicG9seWFkIiwidGV0cmFkIiwiaW5jcmVtZW50IiwiZXF1YWxzIiwiZGFya0NvbG9yTWFwIiwiZ2V0SHVlIiwibGlnaHQiLCJnZXRTYXR1cmF0aW9uIiwic2F0dXJhdGlvbiIsInRvRml4ZWQiLCJnZW5lcmF0ZSIsInBhdHRlcm5zIiwicENvbG9yIiwiY29sb3JTdHJpbmciLCJfaHN2IiwiX2NvbG9yU3RyaW5nIiwidGhlbWUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJwcmVzZXRQcmltYXJ5Q29sb3JzIiwidm9sY2FubyIsImdlZWtibHVlIiwicHJlc2V0UGFsZXR0ZXMiLCJwcmVzZXREYXJrUGFsZXR0ZXMiLCJwcmltYXJ5IiwiaXNJY29uRGVmaW5pdGlvbiIsIm5vcm1hbGl6ZUF0dHJzIiwiYXR0cnMiLCJjbGFzcyIsInJvb3RQcm9wcyIsImdldFNlY29uZGFyeUNvbG9yIiwicHJpbWFyeUNvbG9yIiwibm9ybWFsaXplVHdvVG9uZUNvbG9ycyIsInR3b1RvbmVDb2xvciIsImljb25TdHlsZXMiLCJjc3NJbmplY3RlZEZsYWciLCJ0d29Ub25lQ29sb3JQYWxldHRlIiwic2Vjb25kYXJ5Q29sb3IiLCJjYWxjdWxhdGVkIiwiSWNvbkJhc2UiLCJjb2xvcnMiLCJzdHlsZVN0ciIsInVzZUluc2VydFN0eWxlcyIsImdldFR3b1RvbmVDb2xvcnMiLCJzZXRUd29Ub25lQ29sb3JzIiwic2V0VHdvVG9uZUNvbG9yIiwiX25vcm1hbGl6ZVR3b1RvbmVDb2xvMiIsInJvdGF0ZSIsImNsYXNzU3RyaW5nIiwiaWNvblRhYkluZGV4Iiwic3ZnU3R5bGUiLCJtc1RyYW5zZm9ybSIsInJvbGUiLCJnZXRUd29Ub25lQ29sb3IiLCJBbnRkSWNvbiIsIm1lc3NhZ2VJbnN0YW5jZSIsImRlZmF1bHRUb3AiLCJkZWZhdWx0RHVyYXRpb24iLCJsb2NhbFByZWZpeENscyIsInJ0bCIsImdldFJDTm90aWZpY2F0aW9uSW5zdGFuY2UiLCJ0eXBlVG9JY29uIiwic3VjY2VzcyIsImxvYWRpbmciLCJnZXRSQ05vdGljZVByb3BzIiwiSWNvbkNvbXBvbmVudCIsIm1lc3NhZ2VDbGFzcyIsImFwaSIsIm9wZW4iLCJjbG9zZVByb21pc2UiLCJmaWxsZWQiLCJyZWplY3RlZCIsIm1lc3NhZ2VLZXkiLCJhdHRhY2hUeXBlQXBpIiwib3JpZ2luYWxBcGkiLCJpc0FyZ3NQcm9wcyIsIndhcm4iLCJ1c2VNZXNzYWdlIiwiZ2V0UmNOb3RpZmljYXRpb25JbnN0YW5jZSIsImlubmVySW5zdGFuY2UiLCJfdXNlUkNOb3RpZmljYXRpb24yIiwiaG9va05vdGlmeSIsImhvb2tBcGlSZWYiLCJtZXJnZWRQcmVmaXhDbHMiLCJjcmVhdGVVc2VNZXNzYWdlIiwiZGVmYXVsdEdldENvbnRhaW5lciIsImRlZmF1bHRDbG9zZUljb24iLCJkZWZhdWx0Qm90dG9tIiwiZGVmYXVsdFByZWZpeENscyIsImRlZmF1bHRQbGFjZW1lbnQiLCJnZXRQbGFjZW1lbnRTdHlsZSIsInBsYWNlbWVudCIsImJvdHRvbSIsInJpZ2h0IiwiZ2V0Tm90aWZpY2F0aW9uSW5zdGFuY2UiLCJfYXJncyRwbGFjZW1lbnQiLCJfYXJncyRnZXRDb250YWluZXIiLCJfYXJncyRjbG9zZUljb24iLCJvdXRlclByZWZpeENscyIsImNhY2hlSW5zdGFuY2UiLCJjbG9zZUljb25Ub1JlbmRlciIsIm5vdGlmaWNhdGlvbkNsYXNzIiwiaWNvbk5vZGUiLCJhdXRvTWFyZ2luVGFnIiwiYnRuIiwiY3JlYXRlVXNlTm90aWZpY2F0aW9uIiwiQ29uZmlnUHJvdmlkZXIiLCJnZXRQcmVmaXhDbHNXcmFwcGVyIiwibGVnYWN5TG9jYWxlIiwiZ2V0VGFyZ2V0Q29udGFpbmVyIiwiZ2V0UG9wdXBDb250YWluZXIiLCJjc3AiLCJhdXRvSW5zZXJ0U3BhY2VJbkJ1dHRvbiIsInBhZ2VIZWFkZXIiLCJjb21wb25lbnRTaXplIiwic3BhY2UiLCJ2aXJ0dWFsIiwiZHJvcGRvd25NYXRjaFNlbGVjdFdpZHRoIiwiY2hpbGROb2RlIiwiY2hpbGRyZW5XaXRoTG9jYWxlIiwicmVuZGVyUHJvdmlkZXIiLCJ6aF9DTiIsImdldEVsZW1lbnRCeUlkIl0sIm1hcHBpbmdzIjoiO3dDQUFlLFNBQVNBLElBZXRCLE9BZEFBLEVBQVdDLE9BQU9DLFFBQVUsU0FBVUMsR0FDcEMsSUFBSyxJQUFJQyxFQUFJLEVBQUdBLEVBQUlDLFVBQVVDLE9BQVFGLElBQUssQ0FDekMsSUFBSUcsRUFBU0YsVUFBVUQsR0FFdkIsSUFBSyxJQUFJSSxLQUFPRCxFQUNWTixPQUFPUSxVQUFVQyxlQUFlQyxLQUFLSixFQUFRQyxLQUMvQ0wsRUFBT0ssR0FBT0QsRUFBT0MsSUFLM0IsT0FBT0wsSUFHT1MsTUFBTUMsS0FBTVIsVyx1Q0NUOUJTLEVBQU9DLFFBTlAsU0FBZ0NDLEdBQzlCLE9BQU9BLEdBQU9BLEVBQUlDLFdBQWFELEVBQU0sQ0FDbkMsUUFBV0EsSyxjQ0ZmRixFQUFPQyxRQUFVLEVBQWpCLE0sMEVDR0lHLEUsTUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCQyxLQUFLLENBQUNMLEVBQU9NLEdBQUksbUdBQW9HLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLGlEQUFpRCxNQUFRLEdBQUcsU0FBVyx1REFBdUQsZUFBaUIsQ0FBQyxzSUFBc0ksV0FBYSxNQUUzY0YsRUFBd0JHLE9BQVMsQ0FD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dCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgXCJkZWZhdWx0XCI6IG9ialxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmZvb3Rlcl8xQ3J6entkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7YmFja2dyb3VuZC1jb2xvcjojNWRjNGZjfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL2Zvb3Rlci9mb290ZXIuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxjQUNJLFlBQWEsQ0FDYixzQkFBdUIsQ0FDdkIsa0JBQW1CLENBQ25CLHdCQUFtQ1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuZm9vdGVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYig5MywgMTk2LCAyNTIpO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJmb290ZXJcIjogXCJmb290ZXJfMUNyenpcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuaGVhZGVyXzNUVFRXe2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtiYWNrZ3JvdW5kLWNvbG9yOiM1ZGM0ZmN9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvaGVhZGVyL2hlYWRlci5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLGNBQ0ksWUFBYSxDQUNiLHNCQUF1QixDQUN2QixrQkFBbUIsQ0FDbkIsd0JBQW1DXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5oZWFkZXIge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDkzLCAxOTYsIDI1Mik7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImhlYWRlclwiOiBcImhlYWRlcl8zVFRUV1wiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5ob21lXzFSS0VIe2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpmbGV4LXN0YXJ0fS5ob21lXzFSS0VIIC5pbWdfMVQ5REx7aGVpZ2h0OjUwcHh9LmhvbWVfMVJLRUggLml0ZW1EaXZfMngwazUsLmhvbWVfMVJLRUggLm1lc3NhZ2VIYW5kbGVyXzFLOVZFe3dpZHRoOjEwMCU7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYXJvdW5kO2FsaWduLWl0ZW1zOmNlbnRlcn0uaG9tZV8xUktFSCAubWVzc2FnZUhhbmRsZXJfMUs5VkV7ZmxleC1kaXJlY3Rpb246Y29sdW1ufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL2hvbWUvaG9tZS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLFlBQ0ksWUFBYSxDQUNiLHFCQUFzQixDQUN0QixzQkFBdUIsQ0FDdkIsc0JBQXVCLENBSjNCLHVCQU1RLFdBQVksQ0FOcEIsNkRBU1EsVUFBVyxDQUNYLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsNEJBQTZCLENBQzdCLGtCQUFtQixDQWIzQixrQ0FpQlEscUJBQXNCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5ob21lIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAgICAuaW1nIHtcXG4gICAgICAgIGhlaWdodDogNTBweDtcXG4gICAgfVxcbiAgICAuaXRlbURpdiB7XFxuICAgICAgICB3aWR0aDogMTAwJTtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICB9XFxuICAgIC5tZXNzYWdlSGFuZGxlciB7XFxuICAgICAgICBAZXh0ZW5kIC5pdGVtRGl2O1xcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgfVxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJob21lXCI6IFwiaG9tZV8xUktFSFwiLFxuXHRcImltZ1wiOiBcImltZ18xVDlETFwiLFxuXHRcIml0ZW1EaXZcIjogXCJpdGVtRGl2XzJ4MGs1XCIsXG5cdFwibWVzc2FnZUhhbmRsZXJcIjogXCJtZXNzYWdlSGFuZGxlcl8xSzlWRVwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF96aF9DTiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL2RhdGUtcGlja2VyL2xvY2FsZS96aF9DTlwiKSk7XG5cbnZhciBfZGVmYXVsdCA9IF96aF9DTltcImRlZmF1bHRcIl07XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiKSk7XG5cbnZhciBfemhfQ04gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyYy1waWNrZXIvbGliL2xvY2FsZS96aF9DTlwiKSk7XG5cbnZhciBfemhfQ04yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vdGltZS1waWNrZXIvbG9jYWxlL3poX0NOXCIpKTtcblxuLy8g57uf5LiA5ZCI5bm25Li65a6M5pW055qEIExvY2FsZVxudmFyIGxvY2FsZSA9IHtcbiAgbGFuZzogKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHtcbiAgICBwbGFjZWhvbGRlcjogJ+ivt+mAieaLqeaXpeacnycsXG4gICAgeWVhclBsYWNlaG9sZGVyOiAn6K+36YCJ5oup5bm05Lu9JyxcbiAgICBxdWFydGVyUGxhY2Vob2xkZXI6ICfor7fpgInmi6nlraPluqYnLFxuICAgIG1vbnRoUGxhY2Vob2xkZXI6ICfor7fpgInmi6nmnIjku70nLFxuICAgIHdlZWtQbGFjZWhvbGRlcjogJ+ivt+mAieaLqeWRqCcsXG4gICAgcmFuZ2VQbGFjZWhvbGRlcjogWyflvIDlp4vml6XmnJ8nLCAn57uT5p2f5pel5pyfJ10sXG4gICAgcmFuZ2VZZWFyUGxhY2Vob2xkZXI6IFsn5byA5aeL5bm05Lu9JywgJ+e7k+adn+W5tOS7vSddLFxuICAgIHJhbmdlTW9udGhQbGFjZWhvbGRlcjogWyflvIDlp4vmnIjku70nLCAn57uT5p2f5pyI5Lu9J10sXG4gICAgcmFuZ2VXZWVrUGxhY2Vob2xkZXI6IFsn5byA5aeL5ZGoJywgJ+e7k+adn+WRqCddXG4gIH0sIF96aF9DTltcImRlZmF1bHRcIl0pLFxuICB0aW1lUGlja2VyTG9jYWxlOiAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sIF96aF9DTjJbXCJkZWZhdWx0XCJdKVxufTsgLy8gc2hvdWxkIGFkZCB3aGl0ZXNwYWNlIGJldHdlZW4gY2hhciBpbiBCdXR0b25cblxubG9jYWxlLmxhbmcub2sgPSAn56GuIOWumic7IC8vIEFsbCBzZXR0aW5ncyBhdDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vYmxvYi9tYXN0ZXIvY29tcG9uZW50cy9kYXRlLXBpY2tlci9sb2NhbGUvZXhhbXBsZS5qc29uXG5cbnZhciBfZGVmYXVsdCA9IGxvY2FsZTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfemhfQ04gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9sb2NhbGUvemhfQ05cIikpO1xuXG52YXIgX2RlZmF1bHQgPSBfemhfQ05bXCJkZWZhdWx0XCJdO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF96aF9DTiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJjLXBhZ2luYXRpb24vbGliL2xvY2FsZS96aF9DTlwiKSk7XG5cbnZhciBfemhfQ04yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vZGF0ZS1waWNrZXIvbG9jYWxlL3poX0NOXCIpKTtcblxudmFyIF96aF9DTjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90aW1lLXBpY2tlci9sb2NhbGUvemhfQ05cIikpO1xuXG52YXIgX3poX0NONCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NhbGVuZGFyL2xvY2FsZS96aF9DTlwiKSk7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXRlbXBsYXRlLWN1cmx5LWluLXN0cmluZyAqL1xudmFyIHR5cGVUZW1wbGF0ZSA9ICcke2xhYmVsfeS4jeaYr+S4gOS4quacieaViOeahCR7dHlwZX0nO1xudmFyIGxvY2FsZVZhbHVlcyA9IHtcbiAgbG9jYWxlOiAnemgtY24nLFxuICBQYWdpbmF0aW9uOiBfemhfQ05bXCJkZWZhdWx0XCJdLFxuICBEYXRlUGlja2VyOiBfemhfQ04yW1wiZGVmYXVsdFwiXSxcbiAgVGltZVBpY2tlcjogX3poX0NOM1tcImRlZmF1bHRcIl0sXG4gIENhbGVuZGFyOiBfemhfQ040W1wiZGVmYXVsdFwiXSxcbiAgLy8gbG9jYWxlcyBmb3IgYWxsIGNvbXBvbmVudHNcbiAgZ2xvYmFsOiB7XG4gICAgcGxhY2Vob2xkZXI6ICfor7fpgInmi6knXG4gIH0sXG4gIFRhYmxlOiB7XG4gICAgZmlsdGVyVGl0bGU6ICfnrZvpgIknLFxuICAgIGZpbHRlckNvbmZpcm06ICfnoa7lrponLFxuICAgIGZpbHRlclJlc2V0OiAn6YeN572uJyxcbiAgICBmaWx0ZXJFbXB0eVRleHQ6ICfml6DnrZvpgInpobknLFxuICAgIHNlbGVjdEFsbDogJ+WFqOmAieW9k+mhtScsXG4gICAgc2VsZWN0SW52ZXJ0OiAn5Y+N6YCJ5b2T6aG1JyxcbiAgICBzZWxlY3ROb25lOiAn5riF56m65omA5pyJJyxcbiAgICBzZWxlY3Rpb25BbGw6ICflhajpgInmiYDmnIknLFxuICAgIHNvcnRUaXRsZTogJ+aOkuW6jycsXG4gICAgZXhwYW5kOiAn5bGV5byA6KGMJyxcbiAgICBjb2xsYXBzZTogJ+WFs+mXreihjCcsXG4gICAgdHJpZ2dlckRlc2M6ICfngrnlh7vpmY3luo8nLFxuICAgIHRyaWdnZXJBc2M6ICfngrnlh7vljYfluo8nLFxuICAgIGNhbmNlbFNvcnQ6ICflj5bmtojmjpLluo8nXG4gIH0sXG4gIE1vZGFsOiB7XG4gICAgb2tUZXh0OiAn56Gu5a6aJyxcbiAgICBjYW5jZWxUZXh0OiAn5Y+W5raIJyxcbiAgICBqdXN0T2tUZXh0OiAn55+l6YGT5LqGJ1xuICB9LFxuICBQb3Bjb25maXJtOiB7XG4gICAgY2FuY2VsVGV4dDogJ+WPlua2iCcsXG4gICAgb2tUZXh0OiAn56Gu5a6aJ1xuICB9LFxuICBUcmFuc2Zlcjoge1xuICAgIHNlYXJjaFBsYWNlaG9sZGVyOiAn6K+36L6T5YWl5pCc57Si5YaF5a65JyxcbiAgICBpdGVtVW5pdDogJ+mhuScsXG4gICAgaXRlbXNVbml0OiAn6aG5JyxcbiAgICByZW1vdmU6ICfliKDpmaQnLFxuICAgIHNlbGVjdEN1cnJlbnQ6ICflhajpgInlvZPpobUnLFxuICAgIHJlbW92ZUN1cnJlbnQ6ICfliKDpmaTlvZPpobUnLFxuICAgIHNlbGVjdEFsbDogJ+WFqOmAieaJgOaciScsXG4gICAgcmVtb3ZlQWxsOiAn5Yig6Zmk5YWo6YOoJyxcbiAgICBzZWxlY3RJbnZlcnQ6ICflj43pgInlvZPpobUnXG4gIH0sXG4gIFVwbG9hZDoge1xuICAgIHVwbG9hZGluZzogJ+aWh+S7tuS4iuS8oOS4rScsXG4gICAgcmVtb3ZlRmlsZTogJ+WIoOmZpOaWh+S7ticsXG4gICAgdXBsb2FkRXJyb3I6ICfkuIrkvKDplJnor68nLFxuICAgIHByZXZpZXdGaWxlOiAn6aKE6KeI5paH5Lu2JyxcbiAgICBkb3dubG9hZEZpbGU6ICfkuIvovb3mlofku7YnXG4gIH0sXG4gIEVtcHR5OiB7XG4gICAgZGVzY3JpcHRpb246ICfmmoLml6DmlbDmja4nXG4gIH0sXG4gIEljb246IHtcbiAgICBpY29uOiAn5Zu+5qCHJ1xuICB9LFxuICBUZXh0OiB7XG4gICAgZWRpdDogJ+e8lui+kScsXG4gICAgY29weTogJ+WkjeWIticsXG4gICAgY29waWVkOiAn5aSN5Yi25oiQ5YqfJyxcbiAgICBleHBhbmQ6ICflsZXlvIAnXG4gIH0sXG4gIFBhZ2VIZWFkZXI6IHtcbiAgICBiYWNrOiAn6L+U5ZueJ1xuICB9LFxuICBGb3JtOiB7XG4gICAgb3B0aW9uYWw6ICfvvIjlj6/pgInvvIknLFxuICAgIGRlZmF1bHRWYWxpZGF0ZU1lc3NhZ2VzOiB7XG4gICAgICBcImRlZmF1bHRcIjogJ+Wtl+autemqjOivgemUmeivryR7bGFiZWx9JyxcbiAgICAgIHJlcXVpcmVkOiAn6K+36L6T5YWlJHtsYWJlbH0nLFxuICAgICAgXCJlbnVtXCI6ICcke2xhYmVsfeW/hemhu+aYr+WFtuS4reS4gOS4qlske2VudW19XScsXG4gICAgICB3aGl0ZXNwYWNlOiAnJHtsYWJlbH3kuI3og73kuLrnqbrlrZfnrKYnLFxuICAgICAgZGF0ZToge1xuICAgICAgICBmb3JtYXQ6ICcke2xhYmVsfeaXpeacn+agvOW8j+aXoOaViCcsXG4gICAgICAgIHBhcnNlOiAnJHtsYWJlbH3kuI3og73ovazmjaLkuLrml6XmnJ8nLFxuICAgICAgICBpbnZhbGlkOiAnJHtsYWJlbH3mmK/kuIDkuKrml6DmlYjml6XmnJ8nXG4gICAgICB9LFxuICAgICAgdHlwZXM6IHtcbiAgICAgICAgc3RyaW5nOiB0eXBlVGVtcGxhdGUsXG4gICAgICAgIG1ldGhvZDogdHlwZVRlbXBsYXRlLFxuICAgICAgICBhcnJheTogdHlwZVRlbXBsYXRlLFxuICAgICAgICBvYmplY3Q6IHR5cGVUZW1wbGF0ZSxcbiAgICAgICAgbnVtYmVyOiB0eXBlVGVtcGxhdGUsXG4gICAgICAgIGRhdGU6IHR5cGVUZW1wbGF0ZSxcbiAgICAgICAgXCJib29sZWFuXCI6IHR5cGVUZW1wbGF0ZSxcbiAgICAgICAgaW50ZWdlcjogdHlwZVRlbXBsYXRlLFxuICAgICAgICBcImZsb2F0XCI6IHR5cGVUZW1wbGF0ZSxcbiAgICAgICAgcmVnZXhwOiB0eXBlVGVtcGxhdGUsXG4gICAgICAgIGVtYWlsOiB0eXBlVGVtcGxhdGUsXG4gICAgICAgIHVybDogdHlwZVRlbXBsYXRlLFxuICAgICAgICBoZXg6IHR5cGVUZW1wbGF0ZVxuICAgICAgfSxcbiAgICAgIHN0cmluZzoge1xuICAgICAgICBsZW46ICcke2xhYmVsfemhu+S4uiR7bGVufeS4quWtl+espicsXG4gICAgICAgIG1pbjogJyR7bGFiZWx95pyA5bCRJHttaW595Liq5a2X56ymJyxcbiAgICAgICAgbWF4OiAnJHtsYWJlbH3mnIDlpJoke21heH3kuKrlrZfnrKYnLFxuICAgICAgICByYW5nZTogJyR7bGFiZWx96aG75ZyoJHttaW59LSR7bWF4feWtl+espuS5i+mXtCdcbiAgICAgIH0sXG4gICAgICBudW1iZXI6IHtcbiAgICAgICAgbGVuOiAnJHtsYWJlbH3lv4XpobvnrYnkuo4ke2xlbn0nLFxuICAgICAgICBtaW46ICcke2xhYmVsfeacgOWwj+WAvOS4uiR7bWlufScsXG4gICAgICAgIG1heDogJyR7bGFiZWx95pyA5aSn5YC85Li6JHttYXh9JyxcbiAgICAgICAgcmFuZ2U6ICcke2xhYmVsfemhu+WcqCR7bWlufS0ke21heH3kuYvpl7QnXG4gICAgICB9LFxuICAgICAgYXJyYXk6IHtcbiAgICAgICAgbGVuOiAn6aG75Li6JHtsZW595LiqJHtsYWJlbH0nLFxuICAgICAgICBtaW46ICfmnIDlsJEke21pbn3kuKoke2xhYmVsfScsXG4gICAgICAgIG1heDogJ+acgOWkmiR7bWF4feS4qiR7bGFiZWx9JyxcbiAgICAgICAgcmFuZ2U6ICcke2xhYmVsfeaVsOmHj+mhu+WcqCR7bWlufS0ke21heH3kuYvpl7QnXG4gICAgICB9LFxuICAgICAgcGF0dGVybjoge1xuICAgICAgICBtaXNtYXRjaDogJyR7bGFiZWx95LiO5qih5byP5LiN5Yy56YWNJHtwYXR0ZXJufSdcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIEltYWdlOiB7XG4gICAgcHJldmlldzogJ+mihOiniCdcbiAgfVxufTtcbnZhciBfZGVmYXVsdCA9IGxvY2FsZVZhbHVlcztcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbnZhciBsb2NhbGUgPSB7XG4gIHBsYWNlaG9sZGVyOiAn6K+36YCJ5oup5pe26Ze0JyxcbiAgcmFuZ2VQbGFjZWhvbGRlcjogWyflvIDlp4vml7bpl7QnLCAn57uT5p2f5pe26Ze0J11cbn07XG52YXIgX2RlZmF1bHQgPSBsb2NhbGU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTcgSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykgJiYgYXJnLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdGlmIChpbm5lcikge1xuXHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCAnJykuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5NZW1vXSA9IE1FTU9fU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgLy8gUmVhY3QgdjE2LjExIGFuZCBiZWxvd1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH0gLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuXG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsInZhciBjb250YWluZXJzID0gW107IC8vIHdpbGwgc3RvcmUgY29udGFpbmVyIEhUTUxFbGVtZW50IHJlZmVyZW5jZXNcbnZhciBzdHlsZUVsZW1lbnRzID0gW107IC8vIHdpbGwgc3RvcmUge3ByZXBlbmQ6IEhUTUxFbGVtZW50LCBhcHBlbmQ6IEhUTUxFbGVtZW50fVxuXG52YXIgdXNhZ2UgPSAnaW5zZXJ0LWNzczogWW91IG5lZWQgdG8gcHJvdmlkZSBhIENTUyBzdHJpbmcuIFVzYWdlOiBpbnNlcnRDc3MoY3NzU3RyaW5nWywgb3B0aW9uc10pLic7XG5cbmZ1bmN0aW9uIGluc2VydENzcyhjc3MsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIGlmIChjc3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IodXNhZ2UpO1xuICAgIH1cblxuICAgIHZhciBwb3NpdGlvbiA9IG9wdGlvbnMucHJlcGVuZCA9PT0gdHJ1ZSA/ICdwcmVwZW5kJyA6ICdhcHBlbmQnO1xuICAgIHZhciBjb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5jb250YWluZXIgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkJyk7XG4gICAgdmFyIGNvbnRhaW5lcklkID0gY29udGFpbmVycy5pbmRleE9mKGNvbnRhaW5lcik7XG5cbiAgICAvLyBmaXJzdCB0aW1lIHdlIHNlZSB0aGlzIGNvbnRhaW5lciwgY3JlYXRlIHRoZSBuZWNlc3NhcnkgZW50cmllc1xuICAgIGlmIChjb250YWluZXJJZCA9PT0gLTEpIHtcbiAgICAgICAgY29udGFpbmVySWQgPSBjb250YWluZXJzLnB1c2goY29udGFpbmVyKSAtIDE7XG4gICAgICAgIHN0eWxlRWxlbWVudHNbY29udGFpbmVySWRdID0ge307XG4gICAgfVxuXG4gICAgLy8gdHJ5IHRvIGdldCB0aGUgY29ycmVwb25kaW5nIGNvbnRhaW5lciArIHBvc2l0aW9uIHN0eWxlRWxlbWVudCwgY3JlYXRlIGl0IG90aGVyd2lzZVxuICAgIHZhciBzdHlsZUVsZW1lbnQ7XG5cbiAgICBpZiAoc3R5bGVFbGVtZW50c1tjb250YWluZXJJZF0gIT09IHVuZGVmaW5lZCAmJiBzdHlsZUVsZW1lbnRzW2NvbnRhaW5lcklkXVtwb3NpdGlvbl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzdHlsZUVsZW1lbnQgPSBzdHlsZUVsZW1lbnRzW2NvbnRhaW5lcklkXVtwb3NpdGlvbl07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3R5bGVFbGVtZW50ID0gc3R5bGVFbGVtZW50c1tjb250YWluZXJJZF1bcG9zaXRpb25dID0gY3JlYXRlU3R5bGVFbGVtZW50KCk7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAncHJlcGVuZCcpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5pbnNlcnRCZWZvcmUoc3R5bGVFbGVtZW50LCBjb250YWluZXIuY2hpbGROb2Rlc1swXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIHN0cmlwIHBvdGVudGlhbCBVVEYtOCBCT00gaWYgY3NzIHdhcyByZWFkIGZyb20gYSBmaWxlXG4gICAgaWYgKGNzcy5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHsgY3NzID0gY3NzLnN1YnN0cigxLCBjc3MubGVuZ3RoKTsgfVxuXG4gICAgLy8gYWN0dWFsbHkgYWRkIHRoZSBzdHlsZXNoZWV0XG4gICAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgKz0gY3NzXG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3R5bGVFbGVtZW50LnRleHRDb250ZW50ICs9IGNzcztcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGVFbGVtZW50O1xufTtcblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50KCkge1xuICAgIHZhciBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9jc3MnKTtcbiAgICByZXR1cm4gc3R5bGVFbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydENzcztcbm1vZHVsZS5leHBvcnRzLmluc2VydENzcyA9IGluc2VydENzcztcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2RlZmF1bHQgPSB7XG4gIC8vIE9wdGlvbnMuanN4XG4gIGl0ZW1zX3Blcl9wYWdlOiAn5p2hL+mhtScsXG4gIGp1bXBfdG86ICfot7Poh7MnLFxuICBqdW1wX3RvX2NvbmZpcm06ICfnoa7lrponLFxuICBwYWdlOiAn6aG1JyxcbiAgLy8gUGFnaW5hdGlvbi5qc3hcbiAgcHJldl9wYWdlOiAn5LiK5LiA6aG1JyxcbiAgbmV4dF9wYWdlOiAn5LiL5LiA6aG1JyxcbiAgcHJldl81OiAn5ZCR5YmNIDUg6aG1JyxcbiAgbmV4dF81OiAn5ZCR5ZCOIDUg6aG1JyxcbiAgcHJldl8zOiAn5ZCR5YmNIDMg6aG1JyxcbiAgbmV4dF8zOiAn5ZCR5ZCOIDMg6aG1J1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIGxvY2FsZSA9IHtcbiAgbG9jYWxlOiAnemhfQ04nLFxuICB0b2RheTogJ+S7iuWkqScsXG4gIG5vdzogJ+atpOWIuycsXG4gIGJhY2tUb1RvZGF5OiAn6L+U5Zue5LuK5aSpJyxcbiAgb2s6ICfnoa7lrponLFxuICB0aW1lU2VsZWN0OiAn6YCJ5oup5pe26Ze0JyxcbiAgZGF0ZVNlbGVjdDogJ+mAieaLqeaXpeacnycsXG4gIHdlZWtTZWxlY3Q6ICfpgInmi6nlkagnLFxuICBjbGVhcjogJ+a4hemZpCcsXG4gIG1vbnRoOiAn5pyIJyxcbiAgeWVhcjogJ+W5tCcsXG4gIHByZXZpb3VzTW9udGg6ICfkuIrkuKrmnIggKOe/u+mhteS4iumUriknLFxuICBuZXh0TW9udGg6ICfkuIvkuKrmnIggKOe/u+mhteS4i+mUriknLFxuICBtb250aFNlbGVjdDogJ+mAieaLqeaciOS7vScsXG4gIHllYXJTZWxlY3Q6ICfpgInmi6nlubTku70nLFxuICBkZWNhZGVTZWxlY3Q6ICfpgInmi6nlubTku6MnLFxuICB5ZWFyRm9ybWF0OiAnWVlZWeW5tCcsXG4gIGRheUZvcm1hdDogJ0Tml6UnLFxuICBkYXRlRm9ybWF0OiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgZGF0ZVRpbWVGb3JtYXQ6ICdZWVlZ5bm0TeaciETml6UgSEjml7ZtbeWIhnNz56eSJyxcbiAgcHJldmlvdXNZZWFyOiAn5LiK5LiA5bm0IChDb250cm9s6ZSu5Yqg5bem5pa55ZCR6ZSuKScsXG4gIG5leHRZZWFyOiAn5LiL5LiA5bm0IChDb250cm9s6ZSu5Yqg5Y+z5pa55ZCR6ZSuKScsXG4gIHByZXZpb3VzRGVjYWRlOiAn5LiK5LiA5bm05LujJyxcbiAgbmV4dERlY2FkZTogJ+S4i+S4gOW5tOS7oycsXG4gIHByZXZpb3VzQ2VudHVyeTogJ+S4iuS4gOS4lue6qicsXG4gIG5leHRDZW50dXJ5OiAn5LiL5LiA5LiW57qqJ1xufTtcbnZhciBfZGVmYXVsdCA9IGxvY2FsZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4xXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxtPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHI9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiB5KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifWlmKCFhYSl0aHJvdyBFcnJvcih5KDIyNykpO3ZhciBiYT1uZXcgU2V0LGNhPXt9O2Z1bmN0aW9uIGRhKGEsYil7ZWEoYSxiKTtlYShhK1wiQ2FwdHVyZVwiLGIpfVxuZnVuY3Rpb24gZWEoYSxiKXtjYVthXT1iO2ZvcihhPTA7YTxiLmxlbmd0aDthKyspYmEuYWRkKGJbYV0pfVxudmFyIGZhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxoYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8saWE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxcbmphPXt9LGthPXt9O2Z1bmN0aW9uIGxhKGEpe2lmKGlhLmNhbGwoa2EsYSkpcmV0dXJuITA7aWYoaWEuY2FsbChqYSxhKSlyZXR1cm4hMTtpZihoYS50ZXN0KGEpKXJldHVybiBrYVthXT0hMDtqYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBtYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIG5hKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fG1hKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gQihhLGIsYyxkLGUsZixnKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zjt0aGlzLnJlbW92ZUVtcHR5U3RyaW5nPWd9dmFyIEQ9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwwLCExLGEsbnVsbCwhMSwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07RFtiXT1uZXcgQihiLDEsITEsYVsxXSxudWxsLCExLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEsbnVsbCwhMSwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBkaXNhYmxlUmVtb3RlUGxheWJhY2sgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMywhMCxhLG51bGwsITEsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNCwhMSxhLG51bGwsITEsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw2LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO3ZhciBvYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHBhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLFxucGEpO0RbYl09bmV3IEIoYiwxLCExLGEsbnVsbCwhMSwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxwYSk7RFtiXT1uZXcgQihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxwYSk7RFtiXT1uZXcgQihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuRC54bGlua0hyZWY9bmV3IEIoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwLCExKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwLCEwKX0pO1xuZnVuY3Rpb24gcWEoYSxiLGMsZCl7dmFyIGU9RC5oYXNPd25Qcm9wZXJ0eShiKT9EW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwobmEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP2xhKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG52YXIgcmE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsc2E9NjAxMDMsdGE9NjAxMDYsdWE9NjAxMDcsd2E9NjAxMDgseGE9NjAxMTQseWE9NjAxMDksemE9NjAxMTAsQWE9NjAxMTIsQmE9NjAxMTMsQ2E9NjAxMjAsRGE9NjAxMTUsRWE9NjAxMTYsRmE9NjAxMjEsR2E9NjAxMjgsSGE9NjAxMjksSWE9NjAxMzAsSmE9NjAxMzE7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgRT1TeW1ib2wuZm9yO3NhPUUoXCJyZWFjdC5lbGVtZW50XCIpO3RhPUUoXCJyZWFjdC5wb3J0YWxcIik7dWE9RShcInJlYWN0LmZyYWdtZW50XCIpO3dhPUUoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTt4YT1FKFwicmVhY3QucHJvZmlsZXJcIik7eWE9RShcInJlYWN0LnByb3ZpZGVyXCIpO3phPUUoXCJyZWFjdC5jb250ZXh0XCIpO0FhPUUoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtCYT1FKFwicmVhY3Quc3VzcGVuc2VcIik7Q2E9RShcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik7RGE9RShcInJlYWN0Lm1lbW9cIik7RWE9RShcInJlYWN0LmxhenlcIik7RmE9RShcInJlYWN0LmJsb2NrXCIpO0UoXCJyZWFjdC5zY29wZVwiKTtHYT1FKFwicmVhY3Qub3BhcXVlLmlkXCIpO0hhPUUoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO0lhPUUoXCJyZWFjdC5vZmZzY3JlZW5cIik7SmE9RShcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIil9XG52YXIgS2E9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIExhKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1LYSYmYVtLYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgTWE7ZnVuY3Rpb24gTmEoYSl7aWYodm9pZCAwPT09TWEpdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGMpe3ZhciBiPWMuc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7TWE9YiYmYlsxXXx8XCJcIn1yZXR1cm5cIlxcblwiK01hK2F9dmFyIE9hPSExO1xuZnVuY3Rpb24gUGEoYSxiKXtpZighYXx8T2EpcmV0dXJuXCJcIjtPYT0hMDt2YXIgYz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dHJ5e2lmKGIpaWYoYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJwcm9wc1wiLHtzZXQ6ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO319KSxcIm9iamVjdFwiPT09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2goayl7dmFyIGQ9a31SZWZsZWN0LmNvbnN0cnVjdChhLFtdLGIpfWVsc2V7dHJ5e2IuY2FsbCgpfWNhdGNoKGspe2Q9a31hLmNhbGwoYi5wcm90b3R5cGUpfWVsc2V7dHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGspe2Q9a31hKCl9fWNhdGNoKGspe2lmKGsmJmQmJlwic3RyaW5nXCI9PT10eXBlb2Ygay5zdGFjayl7Zm9yKHZhciBlPWsuc3RhY2suc3BsaXQoXCJcXG5cIiksXG5mPWQuc3RhY2suc3BsaXQoXCJcXG5cIiksZz1lLmxlbmd0aC0xLGg9Zi5sZW5ndGgtMTsxPD1nJiYwPD1oJiZlW2ddIT09ZltoXTspaC0tO2Zvcig7MTw9ZyYmMDw9aDtnLS0saC0tKWlmKGVbZ10hPT1mW2hdKXtpZigxIT09Z3x8MSE9PWgpe2RvIGlmKGctLSxoLS0sMD5ofHxlW2ddIT09ZltoXSlyZXR1cm5cIlxcblwiK2VbZ10ucmVwbGFjZShcIiBhdCBuZXcgXCIsXCIgYXQgXCIpO3doaWxlKDE8PWcmJjA8PWgpfWJyZWFrfX19ZmluYWxseXtPYT0hMSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1jfXJldHVybihhPWE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOlwiXCIpP05hKGEpOlwiXCJ9XG5mdW5jdGlvbiBRYShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gTmEoYS50eXBlKTtjYXNlIDE2OnJldHVybiBOYShcIkxhenlcIik7Y2FzZSAxMzpyZXR1cm4gTmEoXCJTdXNwZW5zZVwiKTtjYXNlIDE5OnJldHVybiBOYShcIlN1c3BlbnNlTGlzdFwiKTtjYXNlIDA6Y2FzZSAyOmNhc2UgMTU6cmV0dXJuIGE9UGEoYS50eXBlLCExKSxhO2Nhc2UgMTE6cmV0dXJuIGE9UGEoYS50eXBlLnJlbmRlciwhMSksYTtjYXNlIDIyOnJldHVybiBhPVBhKGEudHlwZS5fcmVuZGVyLCExKSxhO2Nhc2UgMTpyZXR1cm4gYT1QYShhLnR5cGUsITApLGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFJhKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgdGE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIHhhOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIHdhOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgQmE6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgQ2E6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgemE6cmV0dXJuKGEuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgeWE6cmV0dXJuKGEuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgQWE6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7XG5yZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIERhOnJldHVybiBSYShhLnR5cGUpO2Nhc2UgRmE6cmV0dXJuIFJhKGEuX3JlbmRlcik7Y2FzZSBFYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUmEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBTYShhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gVGEoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFVhKGEpe3ZhciBiPVRhKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYShhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWEoYSkpfWZ1bmN0aW9uIFdhKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYShhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIFhhKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1cbmZ1bmN0aW9uIFlhKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBtKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBaYShhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1TYShudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uICRhKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmcWEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIGFiKGEsYil7JGEoYSxiKTt2YXIgYz1TYShiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9iYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZiYihhLGIudHlwZSxTYShiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGNiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBiYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fFhhKGEub3duZXJEb2N1bWVudCkhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBkYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBlYihhLGIpe2E9bSh7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPWRiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIGZiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitTYShjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZ2IoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHkoOTEpKTtyZXR1cm4gbSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBoYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcih5KDkyKSk7aWYoQXJyYXkuaXNBcnJheShjKSl7aWYoISgxPj1jLmxlbmd0aCkpdGhyb3cgRXJyb3IoeSg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlNhKGMpfX1cbmZ1bmN0aW9uIGliKGEsYil7dmFyIGM9U2EoYi52YWx1ZSksZD1TYShiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGpiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIGtiPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIGxiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gbWIoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2xiKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIG5iLG9iPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PWtiLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle25iPW5ifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO25iLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPW5iLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIHBiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgcWI9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0scmI9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHFiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JiLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7cWJbYl09cWJbYV19KX0pO2Z1bmN0aW9uIHNiKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxxYi5oYXNPd25Qcm9wZXJ0eShhKSYmcWJbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gdGIoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9c2IoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgdWI9bSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHZiKGEsYil7aWYoYil7aWYodWJbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih5KDEzNyxhKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcih5KDYwKSk7aWYoIShcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih5KDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcih5KDYyKSk7fX1cbmZ1bmN0aW9uIHdiKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX1mdW5jdGlvbiB4YihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9dmFyIHliPW51bGwsemI9bnVsbCxBYj1udWxsO1xuZnVuY3Rpb24gQmIoYSl7aWYoYT1DYihhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHliKXRocm93IEVycm9yKHkoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9RGIoYikseWIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRWIoYSl7emI/QWI/QWIucHVzaChhKTpBYj1bYV06emI9YX1mdW5jdGlvbiBGYigpe2lmKHpiKXt2YXIgYT16YixiPUFiO0FiPXpiPW51bGw7QmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUJiKGJbYV0pfX1mdW5jdGlvbiBHYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEhiKGEsYixjLGQsZSl7cmV0dXJuIGEoYixjLGQsZSl9ZnVuY3Rpb24gSWIoKXt9dmFyIEpiPUdiLEtiPSExLExiPSExO2Z1bmN0aW9uIE1iKCl7aWYobnVsbCE9PXpifHxudWxsIT09QWIpSWIoKSxGYigpfVxuZnVuY3Rpb24gTmIoYSxiLGMpe2lmKExiKXJldHVybiBhKGIsYyk7TGI9ITA7dHJ5e3JldHVybiBKYihhLGIsYyl9ZmluYWxseXtMYj0hMSxNYigpfX1cbmZ1bmN0aW9uIE9iKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9RGIoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IoeSgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBQYj0hMTtpZihmYSl0cnl7dmFyIFFiPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShRYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7UGI9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsUWIsUWIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKX1jYXRjaChhKXtQYj0hMX1mdW5jdGlvbiBSYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobil7dGhpcy5vbkVycm9yKG4pfX12YXIgU2I9ITEsVGI9bnVsbCxVYj0hMSxWYj1udWxsLFdiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe1NiPSEwO1RiPWF9fTtmdW5jdGlvbiBYYihhLGIsYyxkLGUsZixnLGgsayl7U2I9ITE7VGI9bnVsbDtSYi5hcHBseShXYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gWWIoYSxiLGMsZCxlLGYsZyxoLGspe1hiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihTYil7aWYoU2Ipe3ZhciBsPVRiO1NiPSExO1RiPW51bGx9ZWxzZSB0aHJvdyBFcnJvcih5KDE5OCkpO1VifHwoVWI9ITAsVmI9bCl9fWZ1bmN0aW9uIFpiKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gJGIoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBhYyhhKXtpZihaYihhKSE9PWEpdGhyb3cgRXJyb3IoeSgxODgpKTt9XG5mdW5jdGlvbiBiYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1aYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih5KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBhYyhlKSxhO2lmKGY9PT1kKXJldHVybiBhYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHkoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IoeSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih5KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGNjKGEpe2E9YmMoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkYyhhLGIpe2Zvcih2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09Yjspe2lmKGI9PT1hfHxiPT09YylyZXR1cm4hMDtiPWIucmV0dXJufXJldHVybiExfXZhciBlYyxmYyxnYyxoYyxpYz0hMSxqYz1bXSxrYz1udWxsLGxjPW51bGwsbWM9bnVsbCxuYz1uZXcgTWFwLG9jPW5ldyBNYXAscGM9W10scWM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gcmMoYSxiLGMsZCxlKXtyZXR1cm57YmxvY2tlZE9uOmEsZG9tRXZlbnROYW1lOmIsZXZlbnRTeXN0ZW1GbGFnczpjfDE2LG5hdGl2ZUV2ZW50OmUsdGFyZ2V0Q29udGFpbmVyczpbZF19fWZ1bmN0aW9uIHNjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6a2M9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmxjPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOm1jPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpuYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpvYy5kZWxldGUoYi5wb2ludGVySWQpfX1cbmZ1bmN0aW9uIHRjKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9cmMoYixjLGQsZSxmKSxudWxsIT09YiYmKGI9Q2IoYiksbnVsbCE9PWImJmZjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtiPWEudGFyZ2V0Q29udGFpbmVycztudWxsIT09ZSYmLTE9PT1iLmluZGV4T2YoZSkmJmIucHVzaChlKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHVjKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c2luXCI6cmV0dXJuIGtjPXRjKGtjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBsYz10YyhsYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gbWM9dGMobWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtuYy5zZXQoZix0YyhuYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsb2Muc2V0KGYsdGMob2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gdmMoYSl7dmFyIGI9d2MoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1aYihiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj0kYihjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtoYyhhLmxhbmVQcmlvcml0eSxmdW5jdGlvbigpe3IudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KGEucHJpb3JpdHksZnVuY3Rpb24oKXtnYyhjKX0pfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5oeWRyYXRlKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIHhjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz15YyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09YylyZXR1cm4gYj1DYihjKSxudWxsIT09YiYmZmMoYiksYS5ibG9ja2VkT249YywhMTtiLnNoaWZ0KCl9cmV0dXJuITB9ZnVuY3Rpb24gemMoYSxiLGMpe3hjKGEpJiZjLmRlbGV0ZShiKX1cbmZ1bmN0aW9uIEFjKCl7Zm9yKGljPSExOzA8amMubGVuZ3RoOyl7dmFyIGE9amNbMF07aWYobnVsbCE9PWEuYmxvY2tlZE9uKXthPUNiKGEuYmxvY2tlZE9uKTtudWxsIT09YSYmZWMoYSk7YnJlYWt9Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpe2EuYmxvY2tlZE9uPWM7YnJlYWt9Yi5zaGlmdCgpfW51bGw9PT1hLmJsb2NrZWRPbiYmamMuc2hpZnQoKX1udWxsIT09a2MmJnhjKGtjKSYmKGtjPW51bGwpO251bGwhPT1sYyYmeGMobGMpJiYobGM9bnVsbCk7bnVsbCE9PW1jJiZ4YyhtYykmJihtYz1udWxsKTtuYy5mb3JFYWNoKHpjKTtvYy5mb3JFYWNoKHpjKX1cbmZ1bmN0aW9uIEJjKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCxpY3x8KGljPSEwLHIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LEFjKSkpfVxuZnVuY3Rpb24gQ2MoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gQmMoYixhKX1pZigwPGpjLmxlbmd0aCl7QmMoamNbMF0sYSk7Zm9yKHZhciBjPTE7YzxqYy5sZW5ndGg7YysrKXt2YXIgZD1qY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PWtjJiZCYyhrYyxhKTtudWxsIT09bGMmJkJjKGxjLGEpO251bGwhPT1tYyYmQmMobWMsYSk7bmMuZm9yRWFjaChiKTtvYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxwYy5sZW5ndGg7YysrKWQ9cGNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPHBjLmxlbmd0aCYmKGM9cGNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspdmMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZwYy5zaGlmdCgpfVxuZnVuY3Rpb24gRGMoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgRWM9e2FuaW1hdGlvbmVuZDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOkRjKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sRmM9e30sR2M9e307XG5mYSYmKEdjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIEVjLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIEVjLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIEVjLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIEVjLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gSGMoYSl7aWYoRmNbYV0pcmV0dXJuIEZjW2FdO2lmKCFFY1thXSlyZXR1cm4gYTt2YXIgYj1FY1thXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBHYylyZXR1cm4gRmNbYV09YltjXTtyZXR1cm4gYX1cbnZhciBJYz1IYyhcImFuaW1hdGlvbmVuZFwiKSxKYz1IYyhcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxLYz1IYyhcImFuaW1hdGlvbnN0YXJ0XCIpLExjPUhjKFwidHJhbnNpdGlvbmVuZFwiKSxNYz1uZXcgTWFwLE5jPW5ldyBNYXAsT2M9W1wiYWJvcnRcIixcImFib3J0XCIsSWMsXCJhbmltYXRpb25FbmRcIixKYyxcImFuaW1hdGlvbkl0ZXJhdGlvblwiLEtjLFwiYW5pbWF0aW9uU3RhcnRcIixcImNhbnBsYXlcIixcImNhblBsYXlcIixcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiLFwiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCIsXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiLFwiZW5kZWRcIixcImVuZGVkXCIsXCJlcnJvclwiLFwiZXJyb3JcIixcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiLFwibG9hZFwiLFwibG9hZFwiLFwibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLFwibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCIsXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiLFxuXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiLFwicGxheWluZ1wiLFwicGxheWluZ1wiLFwicHJvZ3Jlc3NcIixcInByb2dyZXNzXCIsXCJzZWVraW5nXCIsXCJzZWVraW5nXCIsXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCIsXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCIsXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCIsTGMsXCJ0cmFuc2l0aW9uRW5kXCIsXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdO2Z1bmN0aW9uIFBjKGEsYil7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKz0yKXt2YXIgZD1hW2NdLGU9YVtjKzFdO2U9XCJvblwiKyhlWzBdLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSk7TmMuc2V0KGQsYik7TWMuc2V0KGQsZSk7ZGEoZSxbZF0pfX12YXIgUWM9ci51bnN0YWJsZV9ub3c7UWMoKTt2YXIgRj04O1xuZnVuY3Rpb24gUmMoYSl7aWYoMCE9PSgxJmEpKXJldHVybiBGPTE1LDE7aWYoMCE9PSgyJmEpKXJldHVybiBGPTE0LDI7aWYoMCE9PSg0JmEpKXJldHVybiBGPTEzLDQ7dmFyIGI9MjQmYTtpZigwIT09YilyZXR1cm4gRj0xMixiO2lmKDAhPT0oYSYzMikpcmV0dXJuIEY9MTEsMzI7Yj0xOTImYTtpZigwIT09YilyZXR1cm4gRj0xMCxiO2lmKDAhPT0oYSYyNTYpKXJldHVybiBGPTksMjU2O2I9MzU4NCZhO2lmKDAhPT1iKXJldHVybiBGPTgsYjtpZigwIT09KGEmNDA5NikpcmV0dXJuIEY9Nyw0MDk2O2I9NDE4NjExMiZhO2lmKDAhPT1iKXJldHVybiBGPTYsYjtiPTYyOTE0NTYwJmE7aWYoMCE9PWIpcmV0dXJuIEY9NSxiO2lmKGEmNjcxMDg4NjQpcmV0dXJuIEY9NCw2NzEwODg2NDtpZigwIT09KGEmMTM0MjE3NzI4KSlyZXR1cm4gRj0zLDEzNDIxNzcyODtiPTgwNTMwNjM2OCZhO2lmKDAhPT1iKXJldHVybiBGPTIsYjtpZigwIT09KDEwNzM3NDE4MjQmYSkpcmV0dXJuIEY9MSwxMDczNzQxODI0O1xuRj04O3JldHVybiBhfWZ1bmN0aW9uIFNjKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiAxNTtjYXNlIDk4OnJldHVybiAxMDtjYXNlIDk3OmNhc2UgOTY6cmV0dXJuIDg7Y2FzZSA5NTpyZXR1cm4gMjtkZWZhdWx0OnJldHVybiAwfX1mdW5jdGlvbiBUYyhhKXtzd2l0Y2goYSl7Y2FzZSAxNTpjYXNlIDE0OnJldHVybiA5OTtjYXNlIDEzOmNhc2UgMTI6Y2FzZSAxMTpjYXNlIDEwOnJldHVybiA5ODtjYXNlIDk6Y2FzZSA4OmNhc2UgNzpjYXNlIDY6Y2FzZSA0OmNhc2UgNTpyZXR1cm4gOTc7Y2FzZSAzOmNhc2UgMjpjYXNlIDE6cmV0dXJuIDk1O2Nhc2UgMDpyZXR1cm4gOTA7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDM1OCxhKSk7fX1cbmZ1bmN0aW9uIFVjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXM7aWYoMD09PWMpcmV0dXJuIEY9MDt2YXIgZD0wLGU9MCxmPWEuZXhwaXJlZExhbmVzLGc9YS5zdXNwZW5kZWRMYW5lcyxoPWEucGluZ2VkTGFuZXM7aWYoMCE9PWYpZD1mLGU9Rj0xNTtlbHNlIGlmKGY9YyYxMzQyMTc3MjcsMCE9PWYpe3ZhciBrPWYmfmc7MCE9PWs/KGQ9UmMoayksZT1GKTooaCY9ZiwwIT09aCYmKGQ9UmMoaCksZT1GKSl9ZWxzZSBmPWMmfmcsMCE9PWY/KGQ9UmMoZiksZT1GKTowIT09aCYmKGQ9UmMoaCksZT1GKTtpZigwPT09ZClyZXR1cm4gMDtkPTMxLVZjKGQpO2Q9YyYoKDA+ZD8wOjE8PGQpPDwxKS0xO2lmKDAhPT1iJiZiIT09ZCYmMD09PShiJmcpKXtSYyhiKTtpZihlPD1GKXJldHVybiBiO0Y9ZX1iPWEuZW50YW5nbGVkTGFuZXM7aWYoMCE9PWIpZm9yKGE9YS5lbnRhbmdsZW1lbnRzLGImPWQ7MDxiOyljPTMxLVZjKGIpLGU9MTw8YyxkfD1hW2NdLGImPX5lO3JldHVybiBkfVxuZnVuY3Rpb24gV2MoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIFhjKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTU6cmV0dXJuIDE7Y2FzZSAxNDpyZXR1cm4gMjtjYXNlIDEyOnJldHVybiBhPVljKDI0Jn5iKSwwPT09YT9YYygxMCxiKTphO2Nhc2UgMTA6cmV0dXJuIGE9WWMoMTkyJn5iKSwwPT09YT9YYyg4LGIpOmE7Y2FzZSA4OnJldHVybiBhPVljKDM1ODQmfmIpLDA9PT1hJiYoYT1ZYyg0MTg2MTEyJn5iKSwwPT09YSYmKGE9NTEyKSksYTtjYXNlIDI6cmV0dXJuIGI9WWMoODA1MzA2MzY4Jn5iKSwwPT09YiYmKGI9MjY4NDM1NDU2KSxifXRocm93IEVycm9yKHkoMzU4LGEpKTt9ZnVuY3Rpb24gWWMoYSl7cmV0dXJuIGEmLWF9ZnVuY3Rpb24gWmMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiAkYyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7dmFyIGQ9Yi0xO2Euc3VzcGVuZGVkTGFuZXMmPWQ7YS5waW5nZWRMYW5lcyY9ZDthPWEuZXZlbnRUaW1lcztiPTMxLVZjKGIpO2FbYl09Y312YXIgVmM9TWF0aC5jbHozMj9NYXRoLmNsejMyOmFkLGJkPU1hdGgubG9nLGNkPU1hdGguTE4yO2Z1bmN0aW9uIGFkKGEpe3JldHVybiAwPT09YT8zMjozMS0oYmQoYSkvY2R8MCl8MH12YXIgZGQ9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxlZD1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxmZD0hMDtmdW5jdGlvbiBnZChhLGIsYyxkKXtLYnx8SWIoKTt2YXIgZT1oZCxmPUtiO0tiPSEwO3RyeXtIYihlLGEsYixjLGQpfWZpbmFsbHl7KEtiPWYpfHxNYigpfX1mdW5jdGlvbiBpZChhLGIsYyxkKXtlZChkZCxoZC5iaW5kKG51bGwsYSxiLGMsZCkpfVxuZnVuY3Rpb24gaGQoYSxiLGMsZCl7aWYoZmQpe3ZhciBlO2lmKChlPTA9PT0oYiY0KSkmJjA8amMubGVuZ3RoJiYtMTxxYy5pbmRleE9mKGEpKWE9cmMobnVsbCxhLGIsYyxkKSxqYy5wdXNoKGEpO2Vsc2V7dmFyIGY9eWMoYSxiLGMsZCk7aWYobnVsbD09PWYpZSYmc2MoYSxkKTtlbHNle2lmKGUpe2lmKC0xPHFjLmluZGV4T2YoYSkpe2E9cmMoZixhLGIsYyxkKTtqYy5wdXNoKGEpO3JldHVybn1pZih1YyhmLGEsYixjLGQpKXJldHVybjtzYyhhLGQpfWpkKGEsYixkLG51bGwsYyl9fX19XG5mdW5jdGlvbiB5YyhhLGIsYyxkKXt2YXIgZT14YihkKTtlPXdjKGUpO2lmKG51bGwhPT1lKXt2YXIgZj1aYihlKTtpZihudWxsPT09ZillPW51bGw7ZWxzZXt2YXIgZz1mLnRhZztpZigxMz09PWcpe2U9JGIoZik7aWYobnVsbCE9PWUpcmV0dXJuIGU7ZT1udWxsfWVsc2UgaWYoMz09PWcpe2lmKGYuc3RhdGVOb2RlLmh5ZHJhdGUpcmV0dXJuIDM9PT1mLnRhZz9mLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7ZT1udWxsfWVsc2UgZiE9PWUmJihlPW51bGwpfX1qZChhLGIsZCxlLGMpO3JldHVybiBudWxsfXZhciBrZD1udWxsLGxkPW51bGwsbWQ9bnVsbDtcbmZ1bmN0aW9uIG5kKCl7aWYobWQpcmV0dXJuIG1kO3ZhciBhLGI9bGQsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gbWQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1mdW5jdGlvbiBvZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1mdW5jdGlvbiBwZCgpe3JldHVybiEwfWZ1bmN0aW9uIHFkKCl7cmV0dXJuITF9XG5mdW5jdGlvbiByZChhKXtmdW5jdGlvbiBiKGIsZCxlLGYsZyl7dGhpcy5fcmVhY3ROYW1lPWI7dGhpcy5fdGFyZ2V0SW5zdD1lO3RoaXMudHlwZT1kO3RoaXMubmF0aXZlRXZlbnQ9Zjt0aGlzLnRhcmdldD1nO3RoaXMuY3VycmVudFRhcmdldD1udWxsO2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJihiPWFbY10sdGhpc1tjXT1iP2IoZik6ZltjXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWYuZGVmYXVsdFByZXZlbnRlZD9mLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1mLnJldHVyblZhbHVlKT9wZDpxZDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXFkO3JldHVybiB0aGlzfW0oYi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJlxuKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXBkKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXBkKX0scGVyc2lzdDpmdW5jdGlvbigpe30saXNQZXJzaXN0ZW50OnBkfSk7cmV0dXJuIGJ9XG52YXIgc2Q9e2V2ZW50UGhhc2U6MCxidWJibGVzOjAsY2FuY2VsYWJsZTowLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6MCxpc1RydXN0ZWQ6MH0sdGQ9cmQoc2QpLHVkPW0oe30sc2Qse3ZpZXc6MCxkZXRhaWw6MH0pLHZkPXJkKHVkKSx3ZCx4ZCx5ZCxBZD1tKHt9LHVkLHtzY3JlZW5YOjAsc2NyZWVuWTowLGNsaWVudFg6MCxjbGllbnRZOjAscGFnZVg6MCxwYWdlWTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkLGJ1dHRvbjowLGJ1dHRvbnM6MCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hLnJlbGF0ZWRUYXJnZXQ/YS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50OmEucmVsYXRlZFRhcmdldH0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpblxuYSlyZXR1cm4gYS5tb3ZlbWVudFg7YSE9PXlkJiYoeWQmJlwibW91c2Vtb3ZlXCI9PT1hLnR5cGU/KHdkPWEuc2NyZWVuWC15ZC5zY3JlZW5YLHhkPWEuc2NyZWVuWS15ZC5zY3JlZW5ZKTp4ZD13ZD0wLHlkPWEpO3JldHVybiB3ZH0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe3JldHVyblwibW92ZW1lbnRZXCJpbiBhP2EubW92ZW1lbnRZOnhkfX0pLEJkPXJkKEFkKSxDZD1tKHt9LEFkLHtkYXRhVHJhbnNmZXI6MH0pLERkPXJkKENkKSxFZD1tKHt9LHVkLHtyZWxhdGVkVGFyZ2V0OjB9KSxGZD1yZChFZCksR2Q9bSh7fSxzZCx7YW5pbWF0aW9uTmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksSGQ9cmQoR2QpLElkPW0oe30sc2Qse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxKZD1yZChJZCksS2Q9bSh7fSxzZCx7ZGF0YTowfSksTGQ9cmQoS2QpLE1kPXtFc2M6XCJFc2NhcGVcIixcblNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LE5kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLDExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLFxuMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxPZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHpkKCl7cmV0dXJuIFBkfVxudmFyIFFkPW0oe30sdWQse2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9TWRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP05kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sY29kZTowLGxvY2F0aW9uOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLHJlcGVhdDowLGxvY2FsZTowLGdldE1vZGlmaWVyU3RhdGU6emQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29kKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxSZD1yZChRZCksU2Q9bSh7fSxBZCx7cG9pbnRlcklkOjAsd2lkdGg6MCxoZWlnaHQ6MCxwcmVzc3VyZTowLHRhbmdlbnRpYWxQcmVzc3VyZTowLHRpbHRYOjAsdGlsdFk6MCx0d2lzdDowLHBvaW50ZXJUeXBlOjAsaXNQcmltYXJ5OjB9KSxUZD1yZChTZCksVWQ9bSh7fSx1ZCx7dG91Y2hlczowLHRhcmdldFRvdWNoZXM6MCxjaGFuZ2VkVG91Y2hlczowLGFsdEtleTowLG1ldGFLZXk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkfSksVmQ9cmQoVWQpLFdkPW0oe30sc2Qse3Byb3BlcnR5TmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksWGQ9cmQoV2QpLFlkPW0oe30sQWQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LFxuZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOjAsZGVsdGFNb2RlOjB9KSxaZD1yZChZZCksJGQ9WzksMTMsMjcsMzJdLGFlPWZhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxiZT1udWxsO2ZhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihiZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBjZT1mYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWJlLGRlPWZhJiYoIWFlfHxiZSYmODxiZSYmMTE+PWJlKSxlZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxmZT0hMTtcbmZ1bmN0aW9uIGdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09JGQuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImZvY3Vzb3V0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gaGUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgaWU9ITE7ZnVuY3Rpb24gamUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGhlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtmZT0hMDtyZXR1cm4gZWU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09ZWUmJmZlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIGtlKGEsYil7aWYoaWUpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWFlJiZnZShhLGIpPyhhPW5kKCksbWQ9bGQ9a2Q9bnVsbCxpZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gZGUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGxlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIG1lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhbGVbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIG5lKGEsYixjLGQpe0ViKGQpO2I9b2UoYixcIm9uQ2hhbmdlXCIpOzA8Yi5sZW5ndGgmJihjPW5ldyB0ZChcIm9uQ2hhbmdlXCIsXCJjaGFuZ2VcIixudWxsLGMsZCksYS5wdXNoKHtldmVudDpjLGxpc3RlbmVyczpifSkpfXZhciBwZT1udWxsLHFlPW51bGw7ZnVuY3Rpb24gcmUoYSl7c2UoYSwwKX1mdW5jdGlvbiB0ZShhKXt2YXIgYj11ZShhKTtpZihXYShiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIHZlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIHdlPSExO2lmKGZhKXt2YXIgeGU7aWYoZmEpe3ZhciB5ZT1cIm9uaW5wdXRcImluIGRvY3VtZW50O2lmKCF5ZSl7dmFyIHplPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7emUuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLFwicmV0dXJuO1wiKTt5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgemUub25pbnB1dH14ZT15ZX1lbHNlIHhlPSExO3dlPXhlJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpfWZ1bmN0aW9uIEFlKCl7cGUmJihwZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkscWU9cGU9bnVsbCl9ZnVuY3Rpb24gQmUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJnRlKHFlKSl7dmFyIGI9W107bmUoYixxZSxhLHhiKGEpKTthPXJlO2lmKEtiKWEoYik7ZWxzZXtLYj0hMDt0cnl7R2IoYSxiKX1maW5hbGx5e0tiPSExLE1iKCl9fX19XG5mdW5jdGlvbiBDZShhLGIsYyl7XCJmb2N1c2luXCI9PT1hPyhBZSgpLHBlPWIscWU9YyxwZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkpOlwiZm9jdXNvdXRcIj09PWEmJkFlKCl9ZnVuY3Rpb24gRGUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gdGUocWUpfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gRmUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gR2UoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBIZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpHZSxJZT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gSmUoYSxiKXtpZihIZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIUllLmNhbGwoYixjW2RdKXx8IUhlKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24gS2UoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gTGUoYSxiKXt2YXIgYz1LZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1LZShjKX19ZnVuY3Rpb24gTWUoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9NZShhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBOZSgpe2Zvcih2YXIgYT13aW5kb3csYj1YYSgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1YYShhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBPZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIFBlPWZhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsUWU9bnVsbCxSZT1udWxsLFNlPW51bGwsVGU9ITE7XG5mdW5jdGlvbiBVZShhLGIsYyl7dmFyIGQ9Yy53aW5kb3c9PT1jP2MuZG9jdW1lbnQ6OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7VGV8fG51bGw9PVFlfHxRZSE9PVhhKGQpfHwoZD1RZSxcInNlbGVjdGlvblN0YXJ0XCJpbiBkJiZPZShkKT9kPXtzdGFydDpkLnNlbGVjdGlvblN0YXJ0LGVuZDpkLnNlbGVjdGlvbkVuZH06KGQ9KGQub3duZXJEb2N1bWVudCYmZC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGQ9e2FuY2hvck5vZGU6ZC5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpkLmFuY2hvck9mZnNldCxmb2N1c05vZGU6ZC5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6ZC5mb2N1c09mZnNldH0pLFNlJiZKZShTZSxkKXx8KFNlPWQsZD1vZShSZSxcIm9uU2VsZWN0XCIpLDA8ZC5sZW5ndGgmJihiPW5ldyB0ZChcIm9uU2VsZWN0XCIsXCJzZWxlY3RcIixudWxsLGIsYyksYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpkfSksYi50YXJnZXQ9UWUpKSl9XG5QYyhcImNhbmNlbCBjYW5jZWwgY2xpY2sgY2xpY2sgY2xvc2UgY2xvc2UgY29udGV4dG1lbnUgY29udGV4dE1lbnUgY29weSBjb3B5IGN1dCBjdXQgYXV4Y2xpY2sgYXV4Q2xpY2sgZGJsY2xpY2sgZG91YmxlQ2xpY2sgZHJhZ2VuZCBkcmFnRW5kIGRyYWdzdGFydCBkcmFnU3RhcnQgZHJvcCBkcm9wIGZvY3VzaW4gZm9jdXMgZm9jdXNvdXQgYmx1ciBpbnB1dCBpbnB1dCBpbnZhbGlkIGludmFsaWQga2V5ZG93biBrZXlEb3duIGtleXByZXNzIGtleVByZXNzIGtleXVwIGtleVVwIG1vdXNlZG93biBtb3VzZURvd24gbW91c2V1cCBtb3VzZVVwIHBhc3RlIHBhc3RlIHBhdXNlIHBhdXNlIHBsYXkgcGxheSBwb2ludGVyY2FuY2VsIHBvaW50ZXJDYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlckRvd24gcG9pbnRlcnVwIHBvaW50ZXJVcCByYXRlY2hhbmdlIHJhdGVDaGFuZ2UgcmVzZXQgcmVzZXQgc2Vla2VkIHNlZWtlZCBzdWJtaXQgc3VibWl0IHRvdWNoY2FuY2VsIHRvdWNoQ2FuY2VsIHRvdWNoZW5kIHRvdWNoRW5kIHRvdWNoc3RhcnQgdG91Y2hTdGFydCB2b2x1bWVjaGFuZ2Ugdm9sdW1lQ2hhbmdlXCIuc3BsaXQoXCIgXCIpLFxuMCk7UGMoXCJkcmFnIGRyYWcgZHJhZ2VudGVyIGRyYWdFbnRlciBkcmFnZXhpdCBkcmFnRXhpdCBkcmFnbGVhdmUgZHJhZ0xlYXZlIGRyYWdvdmVyIGRyYWdPdmVyIG1vdXNlbW92ZSBtb3VzZU1vdmUgbW91c2VvdXQgbW91c2VPdXQgbW91c2VvdmVyIG1vdXNlT3ZlciBwb2ludGVybW92ZSBwb2ludGVyTW92ZSBwb2ludGVyb3V0IHBvaW50ZXJPdXQgcG9pbnRlcm92ZXIgcG9pbnRlck92ZXIgc2Nyb2xsIHNjcm9sbCB0b2dnbGUgdG9nZ2xlIHRvdWNobW92ZSB0b3VjaE1vdmUgd2hlZWwgd2hlZWxcIi5zcGxpdChcIiBcIiksMSk7UGMoT2MsMik7Zm9yKHZhciBWZT1cImNoYW5nZSBzZWxlY3Rpb25jaGFuZ2UgdGV4dElucHV0IGNvbXBvc2l0aW9uc3RhcnQgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb251cGRhdGVcIi5zcGxpdChcIiBcIiksV2U9MDtXZTxWZS5sZW5ndGg7V2UrKylOYy5zZXQoVmVbV2VdLDApO2VhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7XG5lYShcIm9uTW91c2VMZWF2ZVwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2VhKFwib25Qb2ludGVyRW50ZXJcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZWEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtkYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2RhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO1xuZGEoXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2RhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBYZT1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksWWU9bmV3IFNldChcImNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHRvZ2dsZVwiLnNwbGl0KFwiIFwiKS5jb25jYXQoWGUpKTtcbmZ1bmN0aW9uIFplKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1jO1liKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBzZShhLGIpe2I9MCE9PShiJjQpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLGU9ZC5ldmVudDtkPWQubGlzdGVuZXJzO2E6e3ZhciBmPXZvaWQgMDtpZihiKWZvcih2YXIgZz1kLmxlbmd0aC0xOzA8PWc7Zy0tKXt2YXIgaD1kW2ddLGs9aC5pbnN0YW5jZSxsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9ZWxzZSBmb3IoZz0wO2c8ZC5sZW5ndGg7ZysrKXtoPWRbZ107az1oLmluc3RhbmNlO2w9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7WmUoZSxoLGwpO2Y9a319fWlmKFViKXRocm93IGE9VmIsVWI9ITEsVmI9bnVsbCxhO31cbmZ1bmN0aW9uIEcoYSxiKXt2YXIgYz0kZShiKSxkPWErXCJfX2J1YmJsZVwiO2MuaGFzKGQpfHwoYWYoYixhLDIsITEpLGMuYWRkKGQpKX12YXIgYmY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBjZihhKXthW2JmXXx8KGFbYmZdPSEwLGJhLmZvckVhY2goZnVuY3Rpb24oYil7WWUuaGFzKGIpfHxkZihiLCExLGEsbnVsbCk7ZGYoYiwhMCxhLG51bGwpfSkpfVxuZnVuY3Rpb24gZGYoYSxiLGMsZCl7dmFyIGU9NDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbNF0/YXJndW1lbnRzWzRdOjAsZj1jO1wic2VsZWN0aW9uY2hhbmdlXCI9PT1hJiY5IT09Yy5ub2RlVHlwZSYmKGY9Yy5vd25lckRvY3VtZW50KTtpZihudWxsIT09ZCYmIWImJlllLmhhcyhhKSl7aWYoXCJzY3JvbGxcIiE9PWEpcmV0dXJuO2V8PTI7Zj1kfXZhciBnPSRlKGYpLGg9YStcIl9fXCIrKGI/XCJjYXB0dXJlXCI6XCJidWJibGVcIik7Zy5oYXMoaCl8fChiJiYoZXw9NCksYWYoZixhLGUsYiksZy5hZGQoaCkpfVxuZnVuY3Rpb24gYWYoYSxiLGMsZCl7dmFyIGU9TmMuZ2V0KGIpO3N3aXRjaCh2b2lkIDA9PT1lPzI6ZSl7Y2FzZSAwOmU9Z2Q7YnJlYWs7Y2FzZSAxOmU9aWQ7YnJlYWs7ZGVmYXVsdDplPWhkfWM9ZS5iaW5kKG51bGwsYixjLGEpO2U9dm9pZCAwOyFQYnx8XCJ0b3VjaHN0YXJ0XCIhPT1iJiZcInRvdWNobW92ZVwiIT09YiYmXCJ3aGVlbFwiIT09Ynx8KGU9ITApO2Q/dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtjYXB0dXJlOiEwLHBhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITApOnZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7cGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMSl9XG5mdW5jdGlvbiBqZChhLGIsYyxkLGUpe3ZhciBmPWQ7aWYoMD09PShiJjEpJiYwPT09KGImMikmJm51bGwhPT1kKWE6Zm9yKDs7KXtpZihudWxsPT09ZClyZXR1cm47dmFyIGc9ZC50YWc7aWYoMz09PWd8fDQ9PT1nKXt2YXIgaD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKGg9PT1lfHw4PT09aC5ub2RlVHlwZSYmaC5wYXJlbnROb2RlPT09ZSlicmVhaztpZig0PT09Zylmb3IoZz1kLnJldHVybjtudWxsIT09Zzspe3ZhciBrPWcudGFnO2lmKDM9PT1rfHw0PT09aylpZihrPWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saz09PWV8fDg9PT1rLm5vZGVUeXBlJiZrLnBhcmVudE5vZGU9PT1lKXJldHVybjtnPWcucmV0dXJufWZvcig7bnVsbCE9PWg7KXtnPXdjKGgpO2lmKG51bGw9PT1nKXJldHVybjtrPWcudGFnO2lmKDU9PT1rfHw2PT09ayl7ZD1mPWc7Y29udGludWUgYX1oPWgucGFyZW50Tm9kZX19ZD1kLnJldHVybn1OYihmdW5jdGlvbigpe3ZhciBkPWYsZT14YihjKSxnPVtdO1xuYTp7dmFyIGg9TWMuZ2V0KGEpO2lmKHZvaWQgMCE9PWgpe3ZhciBrPXRkLHg9YTtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW9kKGMpKWJyZWFrIGE7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjprPVJkO2JyZWFrO2Nhc2UgXCJmb2N1c2luXCI6eD1cImZvY3VzXCI7az1GZDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjp4PVwiYmx1clwiO2s9RmQ7YnJlYWs7Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6az1GZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pYnJlYWsgYTtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOms9QmQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6az1cbkRkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOms9VmQ7YnJlYWs7Y2FzZSBJYzpjYXNlIEpjOmNhc2UgS2M6az1IZDticmVhaztjYXNlIExjOms9WGQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOms9dmQ7YnJlYWs7Y2FzZSBcIndoZWVsXCI6az1aZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjprPUpkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOms9VGR9dmFyIHc9MCE9PShiJjQpLHo9IXcmJlwic2Nyb2xsXCI9PT1hLHU9dz9udWxsIT09aD9oK1wiQ2FwdHVyZVwiOm51bGw6aDt3PVtdO2Zvcih2YXIgdD1kLHE7bnVsbCE9PVxudDspe3E9dDt2YXIgdj1xLnN0YXRlTm9kZTs1PT09cS50YWcmJm51bGwhPT12JiYocT12LG51bGwhPT11JiYodj1PYih0LHUpLG51bGwhPXYmJncucHVzaChlZih0LHYscSkpKSk7aWYoeilicmVhazt0PXQucmV0dXJufTA8dy5sZW5ndGgmJihoPW5ldyBrKGgseCxudWxsLGMsZSksZy5wdXNoKHtldmVudDpoLGxpc3RlbmVyczp3fSkpfX1pZigwPT09KGImNykpe2E6e2g9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWE7az1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoaCYmMD09PShiJjE2KSYmKHg9Yy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KSYmKHdjKHgpfHx4W2ZmXSkpYnJlYWsgYTtpZihrfHxoKXtoPWUud2luZG93PT09ZT9lOihoPWUub3duZXJEb2N1bWVudCk/aC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGspe2lmKHg9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCxrPWQseD14P3djKHgpOm51bGwsbnVsbCE9PVxueCYmKHo9WmIoeCkseCE9PXp8fDUhPT14LnRhZyYmNiE9PXgudGFnKSl4PW51bGx9ZWxzZSBrPW51bGwseD1kO2lmKGshPT14KXt3PUJkO3Y9XCJvbk1vdXNlTGVhdmVcIjt1PVwib25Nb3VzZUVudGVyXCI7dD1cIm1vdXNlXCI7aWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKXc9VGQsdj1cIm9uUG9pbnRlckxlYXZlXCIsdT1cIm9uUG9pbnRlckVudGVyXCIsdD1cInBvaW50ZXJcIjt6PW51bGw9PWs/aDp1ZShrKTtxPW51bGw9PXg/aDp1ZSh4KTtoPW5ldyB3KHYsdCtcImxlYXZlXCIsayxjLGUpO2gudGFyZ2V0PXo7aC5yZWxhdGVkVGFyZ2V0PXE7dj1udWxsO3djKGUpPT09ZCYmKHc9bmV3IHcodSx0K1wiZW50ZXJcIix4LGMsZSksdy50YXJnZXQ9cSx3LnJlbGF0ZWRUYXJnZXQ9eix2PXcpO3o9djtpZihrJiZ4KWI6e3c9azt1PXg7dD0wO2ZvcihxPXc7cTtxPWdmKHEpKXQrKztxPTA7Zm9yKHY9dTt2O3Y9Z2YodikpcSsrO2Zvcig7MDx0LXE7KXc9Z2YodyksdC0tO2Zvcig7MDxxLXQ7KXU9XG5nZih1KSxxLS07Zm9yKDt0LS07KXtpZih3PT09dXx8bnVsbCE9PXUmJnc9PT11LmFsdGVybmF0ZSlicmVhayBiO3c9Z2Yodyk7dT1nZih1KX13PW51bGx9ZWxzZSB3PW51bGw7bnVsbCE9PWsmJmhmKGcsaCxrLHcsITEpO251bGwhPT14JiZudWxsIT09eiYmaGYoZyx6LHgsdywhMCl9fX1hOntoPWQ/dWUoZCk6d2luZG93O2s9aC5ub2RlTmFtZSYmaC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1rfHxcImlucHV0XCI9PT1rJiZcImZpbGVcIj09PWgudHlwZSl2YXIgSj12ZTtlbHNlIGlmKG1lKGgpKWlmKHdlKUo9RmU7ZWxzZXtKPURlO3ZhciBLPUNlfWVsc2Uoaz1oLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09ay50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09aC50eXBlfHxcInJhZGlvXCI9PT1oLnR5cGUpJiYoSj1FZSk7aWYoSiYmKEo9SihhLGQpKSl7bmUoZyxKLGMsZSk7YnJlYWsgYX1LJiZLKGEsaCxkKTtcImZvY3Vzb3V0XCI9PT1hJiYoSz1oLl93cmFwcGVyU3RhdGUpJiZcbksuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWgudHlwZSYmYmIoaCxcIm51bWJlclwiLGgudmFsdWUpfUs9ZD91ZShkKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6aWYobWUoSyl8fFwidHJ1ZVwiPT09Sy5jb250ZW50RWRpdGFibGUpUWU9SyxSZT1kLFNlPW51bGw7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6U2U9UmU9UWU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6VGU9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOlRlPSExO1VlKGcsYyxlKTticmVhaztjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUGUpYnJlYWs7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpVZShnLGMsZSl9dmFyIFE7aWYoYWUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIEw9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIjticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOkw9XCJvbkNvbXBvc2l0aW9uRW5kXCI7YnJlYWsgYjtcbmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOkw9XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7YnJlYWsgYn1MPXZvaWQgMH1lbHNlIGllP2dlKGEsYykmJihMPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKEw9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7TCYmKGRlJiZcImtvXCIhPT1jLmxvY2FsZSYmKGllfHxcIm9uQ29tcG9zaXRpb25TdGFydFwiIT09TD9cIm9uQ29tcG9zaXRpb25FbmRcIj09PUwmJmllJiYoUT1uZCgpKTooa2Q9ZSxsZD1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxpZT0hMCkpLEs9b2UoZCxMKSwwPEsubGVuZ3RoJiYoTD1uZXcgTGQoTCxhLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OkwsbGlzdGVuZXJzOkt9KSxRP0wuZGF0YT1ROihRPWhlKGMpLG51bGwhPT1RJiYoTC5kYXRhPVEpKSkpO2lmKFE9Y2U/amUoYSxjKTprZShhLGMpKWQ9b2UoZCxcIm9uQmVmb3JlSW5wdXRcIiksMDxkLmxlbmd0aCYmKGU9bmV3IExkKFwib25CZWZvcmVJbnB1dFwiLFxuXCJiZWZvcmVpbnB1dFwiLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmUsbGlzdGVuZXJzOmR9KSxlLmRhdGE9USl9c2UoZyxiKX0pfWZ1bmN0aW9uIGVmKGEsYixjKXtyZXR1cm57aW5zdGFuY2U6YSxsaXN0ZW5lcjpiLGN1cnJlbnRUYXJnZXQ6Y319ZnVuY3Rpb24gb2UoYSxiKXtmb3IodmFyIGM9YitcIkNhcHR1cmVcIixkPVtdO251bGwhPT1hOyl7dmFyIGU9YSxmPWUuc3RhdGVOb2RlOzU9PT1lLnRhZyYmbnVsbCE9PWYmJihlPWYsZj1PYihhLGMpLG51bGwhPWYmJmQudW5zaGlmdChlZihhLGYsZSkpLGY9T2IoYSxiKSxudWxsIT1mJiZkLnB1c2goZWYoYSxmLGUpKSk7YT1hLnJldHVybn1yZXR1cm4gZH1mdW5jdGlvbiBnZihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gaGYoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yi5fcmVhY3ROYW1lLGc9W107bnVsbCE9PWMmJmMhPT1kOyl7dmFyIGg9YyxrPWguYWx0ZXJuYXRlLGw9aC5zdGF0ZU5vZGU7aWYobnVsbCE9PWsmJms9PT1kKWJyZWFrOzU9PT1oLnRhZyYmbnVsbCE9PWwmJihoPWwsZT8oaz1PYihjLGYpLG51bGwhPWsmJmcudW5zaGlmdChlZihjLGssaCkpKTplfHwoaz1PYihjLGYpLG51bGwhPWsmJmcucHVzaChlZihjLGssaCkpKSk7Yz1jLnJldHVybn0wIT09Zy5sZW5ndGgmJmEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6Z30pfWZ1bmN0aW9uIGpmKCl7fXZhciBrZj1udWxsLGxmPW51bGw7ZnVuY3Rpb24gbWYoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gbmYoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBvZj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxwZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7ZnVuY3Rpb24gcWYoYSl7MT09PWEubm9kZVR5cGU/YS50ZXh0Q29udGVudD1cIlwiOjk9PT1hLm5vZGVUeXBlJiYoYT1hLmJvZHksbnVsbCE9YSYmKGEudGV4dENvbnRlbnQ9XCJcIikpfVxuZnVuY3Rpb24gcmYoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWt9cmV0dXJuIGF9ZnVuY3Rpb24gc2YoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIiRcIj09PWN8fFwiJCFcIj09PWN8fFwiJD9cIj09PWMpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlXCIvJFwiPT09YyYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIHRmPTA7ZnVuY3Rpb24gdWYoYSl7cmV0dXJueyQkdHlwZW9mOkdhLHRvU3RyaW5nOmEsdmFsdWVPZjphfX12YXIgdmY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksd2Y9XCJfX3JlYWN0RmliZXIkXCIrdmYseGY9XCJfX3JlYWN0UHJvcHMkXCIrdmYsZmY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK3ZmLHlmPVwiX19yZWFjdEV2ZW50cyRcIit2ZjtcbmZ1bmN0aW9uIHdjKGEpe3ZhciBiPWFbd2ZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW2ZmXXx8Y1t3Zl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1zZihhKTtudWxsIT09YTspe2lmKGM9YVt3Zl0pcmV0dXJuIGM7YT1zZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2IoYSl7YT1hW3dmXXx8YVtmZl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHVlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcih5KDMzKSk7fWZ1bmN0aW9uIERiKGEpe3JldHVybiBhW3hmXXx8bnVsbH1cbmZ1bmN0aW9uICRlKGEpe3ZhciBiPWFbeWZdO3ZvaWQgMD09PWImJihiPWFbeWZdPW5ldyBTZXQpO3JldHVybiBifXZhciB6Zj1bXSxBZj0tMTtmdW5jdGlvbiBCZihhKXtyZXR1cm57Y3VycmVudDphfX1mdW5jdGlvbiBIKGEpezA+QWZ8fChhLmN1cnJlbnQ9emZbQWZdLHpmW0FmXT1udWxsLEFmLS0pfWZ1bmN0aW9uIEkoYSxiKXtBZisrO3pmW0FmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIENmPXt9LE09QmYoQ2YpLE49QmYoITEpLERmPUNmO1xuZnVuY3Rpb24gRWYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBDZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBGZihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uIEdmKCl7SChOKTtIKE0pfWZ1bmN0aW9uIEhmKGEsYixjKXtpZihNLmN1cnJlbnQhPT1DZil0aHJvdyBFcnJvcih5KDE2OCkpO0koTSxiKTtJKE4sYyl9XG5mdW5jdGlvbiBJZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGEpKXRocm93IEVycm9yKHkoMTA4LFJhKGIpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIG0oe30sYyxkKX1mdW5jdGlvbiBKZihhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8Q2Y7RGY9TS5jdXJyZW50O0koTSxhKTtJKE4sTi5jdXJyZW50KTtyZXR1cm4hMH1mdW5jdGlvbiBLZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IoeSgxNjkpKTtjPyhhPUlmKGEsYixEZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEgoTiksSChNKSxJKE0sYSkpOkgoTik7SShOLGMpfVxudmFyIExmPW51bGwsTWY9bnVsbCxOZj1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxPZj1yLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssUGY9ci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxRZj1yLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFJmPXIudW5zdGFibGVfcmVxdWVzdFBhaW50LFNmPXIudW5zdGFibGVfbm93LFRmPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsVWY9ci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxWZj1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFdmPXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksWGY9ci51bnN0YWJsZV9Mb3dQcmlvcml0eSxZZj1yLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxaZj17fSwkZj12b2lkIDAhPT1SZj9SZjpmdW5jdGlvbigpe30sYWc9bnVsbCxiZz1udWxsLGNnPSExLGRnPVNmKCksTz0xRTQ+ZGc/U2Y6ZnVuY3Rpb24oKXtyZXR1cm4gU2YoKS1kZ307XG5mdW5jdGlvbiBlZygpe3N3aXRjaChUZigpKXtjYXNlIFVmOnJldHVybiA5OTtjYXNlIFZmOnJldHVybiA5ODtjYXNlIFdmOnJldHVybiA5NztjYXNlIFhmOnJldHVybiA5NjtjYXNlIFlmOnJldHVybiA5NTtkZWZhdWx0OnRocm93IEVycm9yKHkoMzMyKSk7fX1mdW5jdGlvbiBmZyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gVWY7Y2FzZSA5ODpyZXR1cm4gVmY7Y2FzZSA5NzpyZXR1cm4gV2Y7Y2FzZSA5NjpyZXR1cm4gWGY7Y2FzZSA5NTpyZXR1cm4gWWY7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZ2coYSxiKXthPWZnKGEpO3JldHVybiBOZihhLGIpfWZ1bmN0aW9uIGhnKGEsYixjKXthPWZnKGEpO3JldHVybiBPZihhLGIsYyl9ZnVuY3Rpb24gaWcoKXtpZihudWxsIT09Ymcpe3ZhciBhPWJnO2JnPW51bGw7UGYoYSl9amcoKX1cbmZ1bmN0aW9uIGpnKCl7aWYoIWNnJiZudWxsIT09YWcpe2NnPSEwO3ZhciBhPTA7dHJ5e3ZhciBiPWFnO2dnKDk5LGZ1bmN0aW9uKCl7Zm9yKDthPGIubGVuZ3RoO2ErKyl7dmFyIGM9YlthXTtkbyBjPWMoITApO3doaWxlKG51bGwhPT1jKX19KTthZz1udWxsfWNhdGNoKGMpe3Rocm93IG51bGwhPT1hZyYmKGFnPWFnLnNsaWNlKGErMSkpLE9mKFVmLGlnKSxjO31maW5hbGx5e2NnPSExfX19dmFyIGtnPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO2Z1bmN0aW9uIGxnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifXZhciBtZz1CZihudWxsKSxuZz1udWxsLG9nPW51bGwscGc9bnVsbDtmdW5jdGlvbiBxZygpe3BnPW9nPW5nPW51bGx9XG5mdW5jdGlvbiByZyhhKXt2YXIgYj1tZy5jdXJyZW50O0gobWcpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gc2coYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5hbHRlcm5hdGU7aWYoKGEuY2hpbGRMYW5lcyZiKT09PWIpaWYobnVsbD09PWN8fChjLmNoaWxkTGFuZXMmYik9PT1iKWJyZWFrO2Vsc2UgYy5jaGlsZExhbmVzfD1iO2Vsc2UgYS5jaGlsZExhbmVzfD1iLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKTthPWEucmV0dXJufX1mdW5jdGlvbiB0ZyhhLGIpe25nPWE7cGc9b2c9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJigwIT09KGEubGFuZXMmYikmJih1Zz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiB2ZyhhLGIpe2lmKHBnIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YilwZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09b2cpe2lmKG51bGw9PT1uZyl0aHJvdyBFcnJvcih5KDMwOCkpO29nPWI7bmcuZGVwZW5kZW5jaWVzPXtsYW5lczowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBvZz1vZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgd2c9ITE7ZnVuY3Rpb24geGcoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6bnVsbCxsYXN0QmFzZVVwZGF0ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24geWcoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gemcoYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19ZnVuY3Rpb24gQWcoYSxiKXthPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWEpe2E9YS5zaGFyZWQ7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn19XG5mdW5jdGlvbiBCZyhhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gQ2coYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTt3Zz0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBuPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXtuPW4udXBkYXRlUXVldWU7dmFyIEE9bi5sYXN0QmFzZVVwZGF0ZTtBIT09ZyYmKG51bGw9PT1BP24uZmlyc3RCYXNlVXBkYXRlPWw6QS5uZXh0PWwsbi5sYXN0QmFzZVVwZGF0ZT1rKX19aWYobnVsbCE9PWYpe0E9ZS5iYXNlU3RhdGU7Zz0wO249bD1rPW51bGw7ZG97aD1mLmxhbmU7dmFyIHA9Zi5ldmVudFRpbWU7aWYoKGQmaCk9PT1oKXtudWxsIT09biYmKG49bi5uZXh0PXtldmVudFRpbWU6cCxsYW5lOjAsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssXG5uZXh0Om51bGx9KTthOnt2YXIgQz1hLHg9ZjtoPWI7cD1jO3N3aXRjaCh4LnRhZyl7Y2FzZSAxOkM9eC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDKXtBPUMuY2FsbChwLEEsaCk7YnJlYWsgYX1BPUM7YnJlYWsgYTtjYXNlIDM6Qy5mbGFncz1DLmZsYWdzJi00MDk3fDY0O2Nhc2UgMDpDPXgucGF5bG9hZDtoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBDP0MuY2FsbChwLEEsaCk6QztpZihudWxsPT09aHx8dm9pZCAwPT09aClicmVhayBhO0E9bSh7fSxBLGgpO2JyZWFrIGE7Y2FzZSAyOndnPSEwfX1udWxsIT09Zi5jYWxsYmFjayYmKGEuZmxhZ3N8PTMyLGg9ZS5lZmZlY3RzLG51bGw9PT1oP2UuZWZmZWN0cz1bZl06aC5wdXNoKGYpKX1lbHNlIHA9e2V2ZW50VGltZTpwLGxhbmU6aCx0YWc6Zi50YWcscGF5bG9hZDpmLnBheWxvYWQsY2FsbGJhY2s6Zi5jYWxsYmFjayxuZXh0Om51bGx9LG51bGw9PT1uPyhsPW49cCxrPUEpOm49bi5uZXh0PXAsZ3w9aDtmPWYubmV4dDtpZihudWxsPT09XG5mKWlmKGg9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09aClicmVhaztlbHNlIGY9aC5uZXh0LGgubmV4dD1udWxsLGUubGFzdEJhc2VVcGRhdGU9aCxlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSk7bnVsbD09PW4mJihrPUEpO2UuYmFzZVN0YXRlPWs7ZS5maXJzdEJhc2VVcGRhdGU9bDtlLmxhc3RCYXNlVXBkYXRlPW47RGd8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT1BfX1mdW5jdGlvbiBFZyhhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGUpdGhyb3cgRXJyb3IoeSgxOTEsZSkpO2UuY2FsbChkKX19fXZhciBGZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztcbmZ1bmN0aW9uIEdnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjptKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBLZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9aYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1IZygpLGU9SWcoYSksZj16ZyhkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1IZygpLGU9SWcoYSksZj16ZyhkLGUpO2YudGFnPTE7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO0FnKGEsZik7SmcoYSxlLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPUhnKCksZD1JZyhhKSxlPXpnKGMsZCk7ZS50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGUuY2FsbGJhY2s9XG5iKTtBZyhhLGUpO0pnKGEsZCxjKX19O2Z1bmN0aW9uIExnKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUplKGMsZCl8fCFKZShlLGYpOiEwfVxuZnVuY3Rpb24gTWcoYSxiLGMpe3ZhciBkPSExLGU9Q2Y7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9dmcoZik6KGU9RmYoYik/RGY6TS5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/RWYoYSxlKTpDZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPUtnO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gTmcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJktnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gT2coYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1GZzt4ZyhhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PXZnKGYpOihmPUZmKGIpP0RmOk0uY3VycmVudCxlLmNvbnRleHQ9RWYoYSxmKSk7Q2coYSxjLGUsZCk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKEdnKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fFxuKGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJktnLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLENnKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQpfXZhciBQZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gUWcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHkoMTQ3LGEpKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PUZnJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHkoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHkoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBSZyhhLGIpe2lmKFwidGV4dGFyZWFcIiE9PWEudHlwZSl0aHJvdyBFcnJvcih5KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO31cbmZ1bmN0aW9uIFNnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZmxhZ3M9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9VGcoYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3M9MixcbmMpOmQ7Yi5mbGFncz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5mbGFncz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9VWcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9UWcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVZnKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPVFnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVxuV2coYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG4oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPVhnKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gQShhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9VWcoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGM9VmcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9UWcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIHRhOnJldHVybiBiPVdnKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihQZyhiKXx8TGEoYikpcmV0dXJuIGI9WGcoYixcbmEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtSZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHAoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT11YT9uKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgdGE6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoUGcoYyl8fExhKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm4oYSxiLGMsZCxudWxsKTtSZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIEMoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8XG5udWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09dWE/bihiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgdGE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoUGcoZCl8fExhKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG4oYixhLGQsZSxudWxsKTtSZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHgoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsdD1udWxsLHU9Zyx6PWc9MCxxPW51bGw7bnVsbCE9PXUmJno8aC5sZW5ndGg7eisrKXt1LmluZGV4Pno/KHE9dSx1PW51bGwpOnE9dS5zaWJsaW5nO3ZhciBuPXAoZSx1LGhbel0sayk7aWYobnVsbD09PW4pe251bGw9PT11JiYodT1xKTticmVha31hJiZ1JiZudWxsPT09XG5uLmFsdGVybmF0ZSYmYihlLHUpO2c9ZihuLGcseik7bnVsbD09PXQ/bD1uOnQuc2libGluZz1uO3Q9bjt1PXF9aWYoej09PWgubGVuZ3RoKXJldHVybiBjKGUsdSksbDtpZihudWxsPT09dSl7Zm9yKDt6PGgubGVuZ3RoO3orKyl1PUEoZSxoW3pdLGspLG51bGwhPT11JiYoZz1mKHUsZyx6KSxudWxsPT09dD9sPXU6dC5zaWJsaW5nPXUsdD11KTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7ejxoLmxlbmd0aDt6KyspcT1DKHUsZSx6LGhbel0sayksbnVsbCE9PXEmJihhJiZudWxsIT09cS5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1xLmtleT96OnEua2V5KSxnPWYocSxnLHopLG51bGw9PT10P2w9cTp0LnNpYmxpbmc9cSx0PXEpO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gdyhlLGcsaCxrKXt2YXIgbD1MYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcih5KDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PVxuaCl0aHJvdyBFcnJvcih5KDE1MSkpO2Zvcih2YXIgdD1sPW51bGwsdT1nLHo9Zz0wLHE9bnVsbCxuPWgubmV4dCgpO251bGwhPT11JiYhbi5kb25lO3orKyxuPWgubmV4dCgpKXt1LmluZGV4Pno/KHE9dSx1PW51bGwpOnE9dS5zaWJsaW5nO3ZhciB3PXAoZSx1LG4udmFsdWUsayk7aWYobnVsbD09PXcpe251bGw9PT11JiYodT1xKTticmVha31hJiZ1JiZudWxsPT09dy5hbHRlcm5hdGUmJmIoZSx1KTtnPWYodyxnLHopO251bGw9PT10P2w9dzp0LnNpYmxpbmc9dzt0PXc7dT1xfWlmKG4uZG9uZSlyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7IW4uZG9uZTt6Kyssbj1oLm5leHQoKSluPUEoZSxuLnZhbHVlLGspLG51bGwhPT1uJiYoZz1mKG4sZyx6KSxudWxsPT09dD9sPW46dC5zaWJsaW5nPW4sdD1uKTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7IW4uZG9uZTt6Kyssbj1oLm5leHQoKSluPUModSxlLHosbi52YWx1ZSxrKSxudWxsIT09biYmKGEmJm51bGwhPT1uLmFsdGVybmF0ZSYmXG51LmRlbGV0ZShudWxsPT09bi5rZXk/ejpuLmtleSksZz1mKG4sZyx6KSxudWxsPT09dD9sPW46dC5zaWJsaW5nPW4sdD1uKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT11YSYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBzYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpe3N3aXRjaChrLnRhZyl7Y2FzZSA3OmlmKGYudHlwZT09PXVhKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWJyZWFrO2RlZmF1bHQ6aWYoay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7XG5kPWUoayxmLnByb3BzKTtkLnJlZj1RZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PXVhPyhkPVhnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1WZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1RZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgdGE6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9XG5XZyhmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1VZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihQZyhmKSlyZXR1cm4geChhLGQsZixoKTtpZihMYShmKSlyZXR1cm4gdyhhLGQsZixoKTtsJiZSZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAyMjpjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnRocm93IEVycm9yKHkoMTUyLFJhKGEudHlwZSl8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIFlnPVNnKCEwKSxaZz1TZyghMSksJGc9e30sYWg9QmYoJGcpLGJoPUJmKCRnKSxjaD1CZigkZyk7XG5mdW5jdGlvbiBkaChhKXtpZihhPT09JGcpdGhyb3cgRXJyb3IoeSgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBlaChhLGIpe0koY2gsYik7SShiaCxhKTtJKGFoLCRnKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOm1iKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1tYihiLGEpfUgoYWgpO0koYWgsYil9ZnVuY3Rpb24gZmgoKXtIKGFoKTtIKGJoKTtIKGNoKX1mdW5jdGlvbiBnaChhKXtkaChjaC5jdXJyZW50KTt2YXIgYj1kaChhaC5jdXJyZW50KTt2YXIgYz1tYihiLGEudHlwZSk7YiE9PWMmJihJKGJoLGEpLEkoYWgsYykpfWZ1bmN0aW9uIGhoKGEpe2JoLmN1cnJlbnQ9PT1hJiYoSChhaCksSChiaCkpfXZhciBQPUJmKDApO1xuZnVuY3Rpb24gaWgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8XCIkP1wiPT09Yy5kYXRhfHxcIiQhXCI9PT1jLmRhdGEpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZmxhZ3MmNjQpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH12YXIgamg9bnVsbCxraD1udWxsLGxoPSExO1xuZnVuY3Rpb24gbWgoYSxiKXt2YXIgYz1uaCg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5mbGFncz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gb2goYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHBoKGEpe2lmKGxoKXt2YXIgYj1raDtpZihiKXt2YXIgYz1iO2lmKCFvaChhLGIpKXtiPXJmKGMubmV4dFNpYmxpbmcpO2lmKCFifHwhb2goYSxiKSl7YS5mbGFncz1hLmZsYWdzJi0xMDI1fDI7bGg9ITE7amg9YTtyZXR1cm59bWgoamgsYyl9amg9YTtraD1yZihiLmZpcnN0Q2hpbGQpfWVsc2UgYS5mbGFncz1hLmZsYWdzJi0xMDI1fDIsbGg9ITEsamg9YX19ZnVuY3Rpb24gcWgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO2poPWF9XG5mdW5jdGlvbiByaChhKXtpZihhIT09amgpcmV0dXJuITE7aWYoIWxoKXJldHVybiBxaChhKSxsaD0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIW5mKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1raDtiOyltaChhLGIpLGI9cmYoYi5uZXh0U2libGluZyk7cWgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih5KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiLyRcIj09PWMpe2lmKDA9PT1iKXtraD1yZihhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlXCIkXCIhPT1jJiZcIiQhXCIhPT1jJiZcIiQ/XCIhPT1jfHxiKyt9YT1hLm5leHRTaWJsaW5nfWtoPW51bGx9fWVsc2Uga2g9amg/cmYoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9XG5mdW5jdGlvbiBzaCgpe2toPWpoPW51bGw7bGg9ITF9dmFyIHRoPVtdO2Z1bmN0aW9uIHVoKCl7Zm9yKHZhciBhPTA7YTx0aC5sZW5ndGg7YSsrKXRoW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7dGgubGVuZ3RoPTB9dmFyIHZoPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsd2g9cmEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcseGg9MCxSPW51bGwsUz1udWxsLFQ9bnVsbCx5aD0hMSx6aD0hMTtmdW5jdGlvbiBBaCgpe3Rocm93IEVycm9yKHkoMzIxKSk7fWZ1bmN0aW9uIEJoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUhlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBDaChhLGIsYyxkLGUsZil7eGg9ZjtSPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDt2aC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP0RoOkVoO2E9YyhkLGUpO2lmKHpoKXtmPTA7ZG97emg9ITE7aWYoISgyNT5mKSl0aHJvdyBFcnJvcih5KDMwMSkpO2YrPTE7VD1TPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO3ZoLmN1cnJlbnQ9Rmg7YT1jKGQsZSl9d2hpbGUoemgpfXZoLmN1cnJlbnQ9R2g7Yj1udWxsIT09UyYmbnVsbCE9PVMubmV4dDt4aD0wO1Q9Uz1SPW51bGw7eWg9ITE7aWYoYil0aHJvdyBFcnJvcih5KDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIEhoKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlPVQ9YTpUPVQubmV4dD1hO3JldHVybiBUfVxuZnVuY3Rpb24gSWgoKXtpZihudWxsPT09Uyl7dmFyIGE9Ui5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Uy5uZXh0O3ZhciBiPW51bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZTpULm5leHQ7aWYobnVsbCE9PWIpVD1iLFM9YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHkoMzEwKSk7Uz1hO2E9e21lbW9pemVkU3RhdGU6Uy5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpTLmJhc2VTdGF0ZSxiYXNlUXVldWU6Uy5iYXNlUXVldWUscXVldWU6Uy5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YX1yZXR1cm4gVH1mdW5jdGlvbiBKaChhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIEtoKGEpe3ZhciBiPUloKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHkoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9UyxlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtlPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9Zj1udWxsLGs9ZTtkb3t2YXIgbD1rLmxhbmU7aWYoKHhoJmwpPT09bCludWxsIT09aCYmKGg9aC5uZXh0PXtsYW5lOjAsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixlYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxkPWsuZWFnZXJSZWR1Y2VyPT09YT9rLmVhZ2VyU3RhdGU6YShkLGsuYWN0aW9uKTtlbHNle3ZhciBuPXtsYW5lOmwsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixcbmVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWg/KGc9aD1uLGY9ZCk6aD1oLm5leHQ9bjtSLmxhbmVzfD1sO0RnfD1sfWs9ay5uZXh0fXdoaWxlKG51bGwhPT1rJiZrIT09ZSk7bnVsbD09PWg/Zj1kOmgubmV4dD1nO0hlKGQsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1mO2IuYmFzZVF1ZXVlPWg7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfXJldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiBMaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7SGUoZixiLm1lbW9pemVkU3RhdGUpfHwodWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1cbmZ1bmN0aW9uIE1oKGEsYixjKXt2YXIgZD1iLl9nZXRWZXJzaW9uO2Q9ZChiLl9zb3VyY2UpO3ZhciBlPWIuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk7aWYobnVsbCE9PWUpYT1lPT09ZDtlbHNlIGlmKGE9YS5tdXRhYmxlUmVhZExhbmVzLGE9KHhoJmEpPT09YSliLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PWQsdGgucHVzaChiKTtpZihhKXJldHVybiBjKGIuX3NvdXJjZSk7dGgucHVzaChiKTt0aHJvdyBFcnJvcih5KDM1MCkpO31cbmZ1bmN0aW9uIE5oKGEsYixjLGQpe3ZhciBlPVU7aWYobnVsbD09PWUpdGhyb3cgRXJyb3IoeSgzNDkpKTt2YXIgZj1iLl9nZXRWZXJzaW9uLGc9ZihiLl9zb3VyY2UpLGg9dmguY3VycmVudCxrPWgudXNlU3RhdGUoZnVuY3Rpb24oKXtyZXR1cm4gTWgoZSxiLGMpfSksbD1rWzFdLG49a1swXTtrPVQ7dmFyIEE9YS5tZW1vaXplZFN0YXRlLHA9QS5yZWZzLEM9cC5nZXRTbmFwc2hvdCx4PUEuc291cmNlO0E9QS5zdWJzY3JpYmU7dmFyIHc9UjthLm1lbW9pemVkU3RhdGU9e3JlZnM6cCxzb3VyY2U6YixzdWJzY3JpYmU6ZH07aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtwLmdldFNuYXBzaG90PWM7cC5zZXRTbmFwc2hvdD1sO3ZhciBhPWYoYi5fc291cmNlKTtpZighSGUoZyxhKSl7YT1jKGIuX3NvdXJjZSk7SGUobixhKXx8KGwoYSksYT1JZyh3KSxlLm11dGFibGVSZWFkTGFuZXN8PWEmZS5wZW5kaW5nTGFuZXMpO2E9ZS5tdXRhYmxlUmVhZExhbmVzO2UuZW50YW5nbGVkTGFuZXN8PWE7Zm9yKHZhciBkPVxuZS5lbnRhbmdsZW1lbnRzLGg9YTswPGg7KXt2YXIgaz0zMS1WYyhoKSx2PTE8PGs7ZFtrXXw9YTtoJj1+dn19fSxbYyxiLGRdKTtoLnVzZUVmZmVjdChmdW5jdGlvbigpe3JldHVybiBkKGIuX3NvdXJjZSxmdW5jdGlvbigpe3ZhciBhPXAuZ2V0U25hcHNob3QsYz1wLnNldFNuYXBzaG90O3RyeXtjKGEoYi5fc291cmNlKSk7dmFyIGQ9SWcodyk7ZS5tdXRhYmxlUmVhZExhbmVzfD1kJmUucGVuZGluZ0xhbmVzfWNhdGNoKHEpe2MoZnVuY3Rpb24oKXt0aHJvdyBxO30pfX0pfSxbYixkXSk7SGUoQyxjKSYmSGUoeCxiKSYmSGUoQSxkKXx8KGE9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6bn0sYS5kaXNwYXRjaD1sPU9oLmJpbmQobnVsbCxSLGEpLGsucXVldWU9YSxrLmJhc2VRdWV1ZT1udWxsLG49TWgoZSxiLGMpLGsubWVtb2l6ZWRTdGF0ZT1rLmJhc2VTdGF0ZT1uKTtyZXR1cm4gbn1cbmZ1bmN0aW9uIFBoKGEsYixjKXt2YXIgZD1JaCgpO3JldHVybiBOaChkLGEsYixjKX1mdW5jdGlvbiBRaChhKXt2YXIgYj1IaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpKaCxsYXN0UmVuZGVyZWRTdGF0ZTphfTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIFJoKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPVIudXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbH0sUi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBTaChhKXt2YXIgYj1IaCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfWZ1bmN0aW9uIFRoKCl7cmV0dXJuIEloKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiBVaChhLGIsYyxkKXt2YXIgZT1IaCgpO1IuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPVJoKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiBWaChhLGIsYyxkKXt2YXIgZT1JaCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1TKXt2YXIgZz1TLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJkJoKGQsZy5kZXBzKSl7UmgoYixjLGYsZCk7cmV0dXJufX1SLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyxmLGQpfWZ1bmN0aW9uIFdoKGEsYil7cmV0dXJuIFVoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWGgoYSxiKXtyZXR1cm4gVmgoNTE2LDQsYSxiKX1mdW5jdGlvbiBZaChhLGIpe3JldHVybiBWaCg0LDIsYSxiKX1mdW5jdGlvbiBaaChhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fVxuZnVuY3Rpb24gJGgoYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBWaCg0LDIsWmguYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gYWkoKXt9ZnVuY3Rpb24gYmkoYSxiKXt2YXIgYz1JaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmQmgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gY2koYSxiKXt2YXIgYz1JaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmQmgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBkaShhLGIpe3ZhciBjPWVnKCk7Z2coOTg+Yz85ODpjLGZ1bmN0aW9uKCl7YSghMCl9KTtnZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYz13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7YSghMSksYigpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1jfX0pfVxuZnVuY3Rpb24gT2goYSxiLGMpe3ZhciBkPUhnKCksZT1JZyhhKSxmPXtsYW5lOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH0sZz1iLnBlbmRpbmc7bnVsbD09PWc/Zi5uZXh0PWY6KGYubmV4dD1nLm5leHQsZy5uZXh0PWYpO2IucGVuZGluZz1mO2c9YS5hbHRlcm5hdGU7aWYoYT09PVJ8fG51bGwhPT1nJiZnPT09Uil6aD15aD0hMDtlbHNle2lmKDA9PT1hLmxhbmVzJiYobnVsbD09PWd8fDA9PT1nLmxhbmVzKSYmKGc9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1nKSl0cnl7dmFyIGg9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxrPWcoaCxjKTtmLmVhZ2VyUmVkdWNlcj1nO2YuZWFnZXJTdGF0ZT1rO2lmKEhlKGssaCkpcmV0dXJufWNhdGNoKGwpe31maW5hbGx5e31KZyhhLGUsZCl9fVxudmFyIEdoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpBaCx1c2VDb250ZXh0OkFoLHVzZUVmZmVjdDpBaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkFoLHVzZUxheW91dEVmZmVjdDpBaCx1c2VNZW1vOkFoLHVzZVJlZHVjZXI6QWgsdXNlUmVmOkFoLHVzZVN0YXRlOkFoLHVzZURlYnVnVmFsdWU6QWgsdXNlRGVmZXJyZWRWYWx1ZTpBaCx1c2VUcmFuc2l0aW9uOkFoLHVzZU11dGFibGVTb3VyY2U6QWgsdXNlT3BhcXVlSWRlbnRpZmllcjpBaCx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LERoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe0hoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OldoLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBVaCg0LDIsWmguYmluZChudWxsLFxuYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFVoKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9SGgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9SGgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2E9YS5kaXNwYXRjaD1PaC5iaW5kKG51bGwsUixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6U2gsdXNlU3RhdGU6UWgsdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPVFoKGEpLGM9YlswXSxkPWJbMV07V2goZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO1xud2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPVFoKCExKSxiPWFbMF07YT1kaS5iaW5kKG51bGwsYVsxXSk7U2goYSk7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7ZC5tZW1vaXplZFN0YXRlPXtyZWZzOntnZXRTbmFwc2hvdDpiLHNldFNuYXBzaG90Om51bGx9LHNvdXJjZTphLHN1YnNjcmliZTpjfTtyZXR1cm4gTmgoZCxhLGIsYyl9LHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtpZihsaCl7dmFyIGE9ITEsYj11ZihmdW5jdGlvbigpe2F8fChhPSEwLGMoXCJyOlwiKyh0ZisrKS50b1N0cmluZygzNikpKTt0aHJvdyBFcnJvcih5KDM1NSkpO30pLGM9UWgoYilbMV07MD09PShSLm1vZGUmMikmJihSLmZsYWdzfD01MTYsUmgoNSxmdW5jdGlvbigpe2MoXCJyOlwiKyh0ZisrKS50b1N0cmluZygzNikpfSxcbnZvaWQgMCxudWxsKSk7cmV0dXJuIGJ9Yj1cInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KTtRaChiKTtyZXR1cm4gYn0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxFaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6YmksdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6WGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTokaCx1c2VMYXlvdXRFZmZlY3Q6WWgsdXNlTWVtbzpjaSx1c2VSZWR1Y2VyOktoLHVzZVJlZjpUaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBLaChKaCl9LHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1LaChKaCksYz1iWzBdLGQ9YlsxXTtYaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPUtoKEpoKVswXTtyZXR1cm5bVGgoKS5jdXJyZW50LFxuYV19LHVzZU11dGFibGVTb3VyY2U6UGgsdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe3JldHVybiBLaChKaClbMF19LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRmg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpMaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gTGgoSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9TGgoSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1MaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gTGgoSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LGVpPXJhLlJlYWN0Q3VycmVudE93bmVyLHVnPSExO2Z1bmN0aW9uIGZpKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WmcoYixudWxsLGMsZCk6WWcoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gZ2koYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3RnKGIsZSk7ZD1DaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF1ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS01MTcsYS5sYW5lcyY9fmUsaGkoYSxiLGUpO2IuZmxhZ3N8PTE7ZmkoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBpaShhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIWppKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLGtpKGEsYixnLGQsZSxmKTthPVZnKGMudHlwZSxudWxsLGQsYixiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZigwPT09KGUmZikmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6SmUsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gaGkoYSxiLGYpO2IuZmxhZ3N8PTE7YT1UZyhnLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGtpKGEsYixjLGQsZSxmKXtpZihudWxsIT09YSYmSmUoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmKWlmKHVnPSExLDAhPT0oZiZlKSkwIT09KGEuZmxhZ3MmMTYzODQpJiYodWc9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcyxoaShhLGIsZik7cmV0dXJuIGxpKGEsYixjLGQsZil9XG5mdW5jdGlvbiBtaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZXx8XCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsYyk7ZWxzZSBpZigwIT09KGMmMTA3Mzc0MTgyNCkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MH0sbmkoYixudWxsIT09Zj9mLmJhc2VMYW5lczpjKTtlbHNlIHJldHVybiBhPW51bGwhPT1mP2YuYmFzZUxhbmVzfGM6YyxiLmxhbmVzPWIuY2hpbGRMYW5lcz0xMDczNzQxODI0LGIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmF9LG5pKGIsYSksbnVsbDtlbHNlIG51bGwhPT1mPyhkPWYuYmFzZUxhbmVzfGMsYi5tZW1vaXplZFN0YXRlPW51bGwpOmQ9YyxuaShiLGQpO2ZpKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gb2koYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5mbGFnc3w9MTI4fWZ1bmN0aW9uIGxpKGEsYixjLGQsZSl7dmFyIGY9RmYoYyk/RGY6TS5jdXJyZW50O2Y9RWYoYixmKTt0ZyhiLGUpO2M9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gcGkoYSxiLGMsZCxlKXtpZihGZihjKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO3RnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpLE1nKGIsYyxkKSxPZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD12ZyhsKToobD1GZihjKT9EZjpNLmN1cnJlbnQsbD1FZihiLGwpKTt2YXIgbj1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxBPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBufHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmTmcoYixnLGQsbCk7d2c9ITE7dmFyIHA9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cDtDZyhiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8cCE9PWt8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuJiYoR2coYixjLG4sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPXdnfHxMZyhiLGMsaCxkLHAsayxsKSk/KEF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTt5ZyhhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOmxnKGIudHlwZSxoKTtnLnByb3BzPWw7QT1iLnBlbmRpbmdQcm9wcztwPWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPXZnKGspOihrPUZmKGMpP0RmOk0uY3VycmVudCxrPUVmKGIsaykpO3ZhciBDPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBDfHxcblwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09QXx8cCE9PWspJiZOZyhiLGcsZCxrKTt3Zz0hMTtwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7dmFyIHg9Yi5tZW1vaXplZFN0YXRlO2ghPT1BfHxwIT09eHx8Ti5jdXJyZW50fHx3Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIEMmJihHZyhiLGMsQyxkKSx4PWIubWVtb2l6ZWRTdGF0ZSksKGw9d2d8fExnKGIsYyxsLGQscCx4LGspKT8obnx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxcbngsayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGspKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZmxhZ3N8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxcbmg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTI1NiksZD0hMSl9cmV0dXJuIHFpKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIHFpKGEsYixjLGQsZSxmKXtvaShhLGIpO3ZhciBnPTAhPT0oYi5mbGFncyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZLZihiLGMsITEpLGhpKGEsYixmKTtkPWIuc3RhdGVOb2RlO2VpLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9WWcoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1ZZyhiLG51bGwsaCxmKSk6ZmkoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmS2YoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiByaShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0hmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkhmKGEsYi5jb250ZXh0LCExKTtlaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgc2k9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeUxhbmU6MH07XG5mdW5jdGlvbiB0aShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1QLmN1cnJlbnQsZj0hMSxnOyhnPTAhPT0oYi5mbGFncyY2NCkpfHwoZz1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2c/KGY9ITAsYi5mbGFncyY9LTY1KTpudWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZXx8dm9pZCAwPT09ZC5mYWxsYmFja3x8ITA9PT1kLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwoZXw9MSk7SShQLGUmMSk7aWYobnVsbD09PWEpe3ZvaWQgMCE9PWQuZmFsbGJhY2smJnBoKGIpO2E9ZC5jaGlsZHJlbjtlPWQuZmFsbGJhY2s7aWYoZilyZXR1cm4gYT11aShiLGEsZSxjKSxiLmNoaWxkLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczpjfSxiLm1lbW9pemVkU3RhdGU9c2ksYTtpZihcIm51bWJlclwiPT09dHlwZW9mIGQudW5zdGFibGVfZXhwZWN0ZWRMb2FkVGltZSlyZXR1cm4gYT11aShiLGEsZSxjKSxiLmNoaWxkLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczpjfSxcbmIubWVtb2l6ZWRTdGF0ZT1zaSxiLmxhbmVzPTMzNTU0NDMyLGE7Yz12aSh7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjphfSxiLm1vZGUsYyxudWxsKTtjLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWN9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTp7YmFzZUxhbmVzOmUuYmFzZUxhbmVzfGN9LGYuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmMsYi5tZW1vaXplZFN0YXRlPXNpLGQ7Yz14aShhLGIsZC5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gY31pZihmKXJldHVybiBkPXdpKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLGYubWVtb2l6ZWRTdGF0ZT1udWxsPT09ZT97YmFzZUxhbmVzOmN9Olxue2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9ZnVuY3Rpb24gdWkoYSxiLGMsZCl7dmFyIGU9YS5tb2RlLGY9YS5jaGlsZDtiPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Yn07MD09PShlJjIpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9Yik6Zj12aShiLGUsMCxudWxsKTtjPVhnKGMsZSxkLG51bGwpO2YucmV0dXJuPWE7Yy5yZXR1cm49YTtmLnNpYmxpbmc9YzthLmNoaWxkPWY7cmV0dXJuIGN9XG5mdW5jdGlvbiB4aShhLGIsYyxkKXt2YXIgZT1hLmNoaWxkO2E9ZS5zaWJsaW5nO2M9VGcoZSx7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpjfSk7MD09PShiLm1vZGUmMikmJihjLmxhbmVzPWQpO2MucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihhLm5leHRFZmZlY3Q9bnVsbCxhLmZsYWdzPTgsYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YSk7cmV0dXJuIGIuY2hpbGQ9Y31cbmZ1bmN0aW9uIHdpKGEsYixjLGQsZSl7dmFyIGY9Yi5tb2RlLGc9YS5jaGlsZDthPWcuc2libGluZzt2YXIgaD17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmN9OzA9PT0oZiYyKSYmYi5jaGlsZCE9PWc/KGM9Yi5jaGlsZCxjLmNoaWxkTGFuZXM9MCxjLnBlbmRpbmdQcm9wcz1oLGc9Yy5sYXN0RWZmZWN0LG51bGwhPT1nPyhiLmZpcnN0RWZmZWN0PWMuZmlyc3RFZmZlY3QsYi5sYXN0RWZmZWN0PWcsZy5uZXh0RWZmZWN0PW51bGwpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGwpOmM9VGcoZyxoKTtudWxsIT09YT9kPVRnKGEsZCk6KGQ9WGcoZCxmLGUsbnVsbCksZC5mbGFnc3w9Mik7ZC5yZXR1cm49YjtjLnJldHVybj1iO2Muc2libGluZz1kO2IuY2hpbGQ9YztyZXR1cm4gZH1mdW5jdGlvbiB5aShhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtzZyhhLnJldHVybixiKX1cbmZ1bmN0aW9uIHppKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbE1vZGU6ZSxsYXN0RWZmZWN0OmZ9OihnLmlzQmFja3dhcmRzPWIsZy5yZW5kZXJpbmc9bnVsbCxnLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGcubGFzdD1kLGcudGFpbD1jLGcudGFpbE1vZGU9ZSxnLmxhc3RFZmZlY3Q9Zil9XG5mdW5jdGlvbiBBaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO2ZpKGEsYixkLmNoaWxkcmVuLGMpO2Q9UC5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTY0O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5mbGFncyY2NCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ5aShhLGMpO2Vsc2UgaWYoMTk9PT1hLnRhZyl5aShhLGMpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1JKFAsZCk7aWYoMD09PShiLm1vZGUmMikpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PWloKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7emkoYiwhMSxlLGMsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09aWgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfXppKGIsITAsYyxudWxsLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwidG9nZXRoZXJcIjp6aShiLCExLG51bGwsbnVsbCx2b2lkIDAsYi5sYXN0RWZmZWN0KTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaGkoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO0RnfD1iLmxhbmVzO2lmKDAhPT0oYyZiLmNoaWxkTGFuZXMpKXtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IoeSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9VGcoYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVRnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9cmV0dXJuIG51bGx9dmFyIEJpLENpLERpLEVpO1xuQmk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O0NpPWZ1bmN0aW9uKCl7fTtcbkRpPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEubWVtb2l6ZWRQcm9wcztpZihlIT09ZCl7YT1iLnN0YXRlTm9kZTtkaChhaC5jdXJyZW50KTt2YXIgZj1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjplPVlhKGEsZSk7ZD1ZYShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZWIoYSxlKTtkPWViKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6ZT1tKHt9LGUse3ZhbHVlOnZvaWQgMH0pO2Q9bSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmU9Z2IoYSxlKTtkPWdiKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9amYpfXZiKGMsZCk7dmFyIGc7Yz1udWxsO2ZvcihsIGluIGUpaWYoIWQuaGFzT3duUHJvcGVydHkobCkmJmUuaGFzT3duUHJvcGVydHkobCkmJm51bGwhPWVbbF0paWYoXCJzdHlsZVwiPT09XG5sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmKGN8fChjPXt9KSxjW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sJiZcImNoaWxkcmVuXCIhPT1sJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYoY2EuaGFzT3duUHJvcGVydHkobCk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGwsbnVsbCkpO2ZvcihsIGluIGQpe3ZhciBrPWRbbF07aD1udWxsIT1lP2VbbF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkobCkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09bClpZihoKXtmb3IoZyBpbiBoKSFoLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoY3x8KGM9e30pLGNbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZoW2ddIT09a1tnXSYmKGN8fFxuKGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLGMpKSxjPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2gobCxrKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2gobCxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpPyhudWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1sJiZHKFwic2Nyb2xsXCIsYSksZnx8aD09PWt8fChmPVtdKSk6XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09ayYmay4kJHR5cGVvZj09PUdhP2sudG9TdHJpbmcoKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsXG5jKTt2YXIgbD1mO2lmKGIudXBkYXRlUXVldWU9bCliLmZsYWdzfD00fX07RWk9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmZsYWdzfD00KX07ZnVuY3Rpb24gRmkoYSxiKXtpZighbGgpc3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIEdpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBudWxsO2Nhc2UgMTpyZXR1cm4gRmYoYi50eXBlKSYmR2YoKSxudWxsO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2Q9Yi5zdGF0ZU5vZGU7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKXJoKGIpP2IuZmxhZ3N8PTQ6ZC5oeWRyYXRlfHwoYi5mbGFnc3w9MjU2KTtDaShiKTtyZXR1cm4gbnVsbDtjYXNlIDU6aGgoYik7dmFyIGU9ZGgoY2guY3VycmVudCk7Yz1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKURpKGEsYixjLGQsZSksYS5yZWYhPT1iLnJlZiYmKGIuZmxhZ3N8PTEyOCk7ZWxzZXtpZighZCl7aWYobnVsbD09PVxuYi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjYpKTtyZXR1cm4gbnVsbH1hPWRoKGFoLmN1cnJlbnQpO2lmKHJoKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW3dmXT1iO2RbeGZdPWY7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpHKFwiY2FuY2VsXCIsZCk7RyhcImNsb3NlXCIsZCk7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihhPTA7YTxYZS5sZW5ndGg7YSsrKUcoWGVbYV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkcoXCJlcnJvclwiLGQpO0coXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoZCxmKTtHKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtHKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGQsZiksRyhcImludmFsaWRcIixkKX12YihjLGYpO2E9bnVsbDtmb3IodmFyIGcgaW4gZilmLmhhc093blByb3BlcnR5KGcpJiYoZT1mW2ddLFwiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBlP2QudGV4dENvbnRlbnQhPT1lJiYoYT1bXCJjaGlsZHJlblwiLGVdKTpcIm51bWJlclwiPT09dHlwZW9mIGUmJmQudGV4dENvbnRlbnQhPT1cIlwiK2UmJihhPVtcImNoaWxkcmVuXCIsXCJcIitlXSk6Y2EuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWUmJlwib25TY3JvbGxcIj09PWcmJkcoXCJzY3JvbGxcIixkKSk7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGQpO2NiKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoZCk7amIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihkLm9uY2xpY2s9XG5qZil9ZD1hO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDthPT09a2IuaHRtbCYmKGE9bGIoYykpO2E9PT1rYi5odG1sP1wic2NyaXB0XCI9PT1jPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoYyx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChjKSxcInNlbGVjdFwiPT09YyYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsYyk7YVt3Zl09YjthW3hmXT1kO0JpKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTtnPXdiKGMsZCk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpHKFwiY2FuY2VsXCIsYSk7RyhcImNsb3NlXCIsYSk7XG5lPWQ7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8WGUubGVuZ3RoO2UrKylHKFhlW2VdLGEpO2U9ZDticmVhaztjYXNlIFwic291cmNlXCI6RyhcImVycm9yXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkcoXCJlcnJvclwiLGEpO0coXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpaYShhLGQpO2U9WWEoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtlPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihhLGQpO2U9XG5nYihhLGQpO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7ZGVmYXVsdDplPWR9dmIoYyxlKTt2YXIgaD1lO2ZvcihmIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGs9aFtmXTtcInN0eWxlXCI9PT1mP3RiKGEsayk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZvYihhLGspKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09Y3x8XCJcIiE9PWspJiZwYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmcGIoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihjYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZHKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmcWEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShhKTtjYihhLGQsITEpO1xuYnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoYSk7amIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK1NhKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Zj1kLnZhbHVlO251bGwhPWY/ZmIoYSwhIWQubXVsdGlwbGUsZiwhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJmZiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJihhLm9uY2xpY2s9amYpfW1mKGMsZCkmJihiLmZsYWdzfD00KX1udWxsIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlFaShhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjYpKTtcbmM9ZGgoY2guY3VycmVudCk7ZGgoYWguY3VycmVudCk7cmgoYik/KGQ9Yi5zdGF0ZU5vZGUsYz1iLm1lbW9pemVkUHJvcHMsZFt3Zl09YixkLm5vZGVWYWx1ZSE9PWMmJihiLmZsYWdzfD00KSk6KGQ9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxkW3dmXT1iLGIuc3RhdGVOb2RlPWQpfXJldHVybiBudWxsO2Nhc2UgMTM6SChQKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZmxhZ3MmNjQpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2M9ITE7bnVsbD09PWE/dm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLmZhbGxiYWNrJiZyaChiKTpjPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7aWYoZCYmIWMmJjAhPT0oYi5tb2RlJjIpKWlmKG51bGw9PT1hJiYhMCE9PWIubWVtb2l6ZWRQcm9wcy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8MCE9PShQLmN1cnJlbnQmMSkpMD09PVYmJihWPTMpO2Vsc2V7aWYoMD09PVZ8fDM9PT1WKVY9XG40O251bGw9PT1VfHwwPT09KERnJjEzNDIxNzcyNykmJjA9PT0oSGkmMTM0MjE3NzI3KXx8SWkoVSxXKX1pZihkfHxjKWIuZmxhZ3N8PTQ7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLENpKGIpLG51bGw9PT1hJiZjZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxudWxsO2Nhc2UgMTA6cmV0dXJuIHJnKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gRmYoYi50eXBlKSYmR2YoKSxudWxsO2Nhc2UgMTk6SChQKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtmPTAhPT0oYi5mbGFncyY2NCk7Zz1kLnJlbmRlcmluZztpZihudWxsPT09ZylpZihmKUZpKGQsITEpO2Vsc2V7aWYoMCE9PVZ8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPWloKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD02NDtGaShkLCExKTtmPWcudXBkYXRlUXVldWU7bnVsbCE9PWYmJihiLnVwZGF0ZVF1ZXVlPWYsYi5mbGFnc3w9NCk7XG5udWxsPT09ZC5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0O2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTIsZi5uZXh0RWZmZWN0PW51bGwsZi5maXJzdEVmZmVjdD1udWxsLGYubGFzdEVmZmVjdD1udWxsLGc9Zi5hbHRlcm5hdGUsbnVsbD09PWc/KGYuY2hpbGRMYW5lcz0wLGYubGFuZXM9YSxmLmNoaWxkPW51bGwsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLm1lbW9pemVkUHJvcHM9Zy5tZW1vaXplZFByb3BzLGYubWVtb2l6ZWRTdGF0ZT1nLm1lbW9pemVkU3RhdGUsZi51cGRhdGVRdWV1ZT1nLnVwZGF0ZVF1ZXVlLGYudHlwZT1nLnR5cGUsYT1nLmRlcGVuZGVuY2llcyxcbmYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7SShQLFAuY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9YS5zaWJsaW5nfW51bGwhPT1kLnRhaWwmJk8oKT5KaSYmKGIuZmxhZ3N8PTY0LGY9ITAsRmkoZCwhMSksYi5sYW5lcz0zMzU1NDQzMil9ZWxzZXtpZighZilpZihhPWloKGcpLG51bGwhPT1hKXtpZihiLmZsYWdzfD02NCxmPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxGaShkLCEwKSxudWxsPT09ZC50YWlsJiZcImhpZGRlblwiPT09ZC50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhbGgpcmV0dXJuIGI9Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdCxudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKSxudWxsfWVsc2UgMipPKCktZC5yZW5kZXJpbmdTdGFydFRpbWU+SmkmJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9XG42NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpO2QuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9ZC5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxkLmxhc3Q9Zyl9cmV0dXJuIG51bGwhPT1kLnRhaWw/KGM9ZC50YWlsLGQucmVuZGVyaW5nPWMsZC50YWlsPWMuc2libGluZyxkLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0LGQucmVuZGVyaW5nU3RhcnRUaW1lPU8oKSxjLnNpYmxpbmc9bnVsbCxiPVAuY3VycmVudCxJKFAsZj9iJjF8MjpiJjEpLGMpOm51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBLaSgpLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09KG51bGwhPT1iLm1lbW9pemVkU3RhdGUpJiZcInVuc3RhYmxlLWRlZmVyLXdpdGhvdXQtaGlkaW5nXCIhPT1kLm1vZGUmJihiLmZsYWdzfD00KSxudWxsfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7fVxuZnVuY3Rpb24gTGkoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6RmYoYS50eXBlKSYmR2YoKTt2YXIgYj1hLmZsYWdzO3JldHVybiBiJjQwOTY/KGEuZmxhZ3M9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2I9YS5mbGFncztpZigwIT09KGImNjQpKXRocm93IEVycm9yKHkoMjg1KSk7YS5mbGFncz1iJi00MDk3fDY0O3JldHVybiBhO2Nhc2UgNTpyZXR1cm4gaGgoYSksbnVsbDtjYXNlIDEzOnJldHVybiBIKFApLGI9YS5mbGFncyxiJjQwOTY/KGEuZmxhZ3M9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEgoUCksbnVsbDtjYXNlIDQ6cmV0dXJuIGZoKCksbnVsbDtjYXNlIDEwOnJldHVybiByZyhhKSxudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gTWkoYSxiKXt0cnl7dmFyIGM9XCJcIixkPWI7ZG8gYys9UWEoZCksZD1kLnJldHVybjt3aGlsZShkKTt2YXIgZT1jfWNhdGNoKGYpe2U9XCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIitmLm1lc3NhZ2UrXCJcXG5cIitmLnN0YWNrfXJldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOmV9fWZ1bmN0aW9uIE5pKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fXZhciBPaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBQaShhLGIsYyl7Yz16ZygtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtRaXx8KFFpPSEwLFJpPWQpO05pKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gU2koYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe05pKGEsYik7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1UaT9UaT1uZXcgU2V0KFt0aGlzXSk6VGkuYWRkKHRoaXMpLE5pKGEsYikpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfXZhciBVaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtcbmZ1bmN0aW9uIFZpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe1dpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBYaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOnJldHVybjtjYXNlIDE6aWYoYi5mbGFncyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOmxnKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9cmV0dXJuO2Nhc2UgMzpiLmZsYWdzJjI1NiYmcWYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7cmV0dXJuO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fVxuZnVuY3Rpb24gWWkoYSxiLGMpe3N3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOmI9Yy51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXthPWI9Yi5uZXh0O2Rve2lmKDM9PT0oYS50YWcmMykpe3ZhciBkPWEuY3JlYXRlO2EuZGVzdHJveT1kKCl9YT1hLm5leHR9d2hpbGUoYSE9PWIpfWI9Yy51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXthPWI9Yi5uZXh0O2Rve3ZhciBlPWE7ZD1lLm5leHQ7ZT1lLnRhZzswIT09KGUmNCkmJjAhPT0oZSYxKSYmKFppKGMsYSksJGkoYyxhKSk7YT1kfXdoaWxlKGEhPT1iKX1yZXR1cm47Y2FzZSAxOmE9Yy5zdGF0ZU5vZGU7Yy5mbGFncyY0JiYobnVsbD09PWI/YS5jb21wb25lbnREaWRNb3VudCgpOihkPWMuZWxlbWVudFR5cGU9PT1jLnR5cGU/Yi5tZW1vaXplZFByb3BzOmxnKGMudHlwZSxiLm1lbW9pemVkUHJvcHMpLGEuY29tcG9uZW50RGlkVXBkYXRlKGQsXG5iLm1lbW9pemVkU3RhdGUsYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSkpKTtiPWMudXBkYXRlUXVldWU7bnVsbCE9PWImJkVnKGMsYixhKTtyZXR1cm47Y2FzZSAzOmI9Yy51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YT1udWxsO2lmKG51bGwhPT1jLmNoaWxkKXN3aXRjaChjLmNoaWxkLnRhZyl7Y2FzZSA1OmE9Yy5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmE9Yy5jaGlsZC5zdGF0ZU5vZGV9RWcoYyxiLGEpfXJldHVybjtjYXNlIDU6YT1jLnN0YXRlTm9kZTtudWxsPT09YiYmYy5mbGFncyY0JiZtZihjLnR5cGUsYy5tZW1vaXplZFByb3BzKSYmYS5mb2N1cygpO3JldHVybjtjYXNlIDY6cmV0dXJuO2Nhc2UgNDpyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsPT09Yy5tZW1vaXplZFN0YXRlJiYoYz1jLmFsdGVybmF0ZSxudWxsIT09YyYmKGM9Yy5tZW1vaXplZFN0YXRlLG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbCE9PWMmJkNjKGMpKSkpO1xucmV0dXJuO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6Y2FzZSAyMzpjYXNlIDI0OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIGFqKGEsYil7Zm9yKHZhciBjPWE7Oyl7aWYoNT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihiKWQ9ZC5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5zZXRQcm9wZXJ0eT9kLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmQuZGlzcGxheT1cIm5vbmVcIjtlbHNle2Q9Yy5zdGF0ZU5vZGU7dmFyIGU9Yy5tZW1vaXplZFByb3BzLnN0eWxlO2U9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsO2Quc3R5bGUuZGlzcGxheT1zYihcImRpc3BsYXlcIixlKX19ZWxzZSBpZig2PT09Yy50YWcpYy5zdGF0ZU5vZGUubm9kZVZhbHVlPWI/XCJcIjpjLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigoMjMhPT1jLnRhZyYmMjQhPT1jLnRhZ3x8bnVsbD09PWMubWVtb2l6ZWRTdGF0ZXx8Yz09PWEpJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PVxuYSlicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YSlyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIGJqKGEsYil7aWYoTWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBNZi5vbkNvbW1pdEZpYmVyVW5tb3VudCl0cnl7TWYub25Db21taXRGaWJlclVubW91bnQoTGYsYil9Y2F0Y2goZil7fXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6YT1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hJiYoYT1hLmxhc3RFZmZlY3QsbnVsbCE9PWEpKXt2YXIgYz1hPWEubmV4dDtkb3t2YXIgZD1jLGU9ZC5kZXN0cm95O2Q9ZC50YWc7aWYodm9pZCAwIT09ZSlpZigwIT09KGQmNCkpWmkoYixjKTtlbHNle2Q9Yjt0cnl7ZSgpfWNhdGNoKGYpe1dpKGQsZil9fWM9Yy5uZXh0fXdoaWxlKGMhPT1hKX1icmVhaztjYXNlIDE6VmkoYik7YT1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7YS5wcm9wcz1iLm1lbW9pemVkUHJvcHMsYS5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsYS5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGYpe1dpKGIsXG5mKX1icmVhaztjYXNlIDU6VmkoYik7YnJlYWs7Y2FzZSA0OmNqKGEsYil9fWZ1bmN0aW9uIGRqKGEpe2EuYWx0ZXJuYXRlPW51bGw7YS5jaGlsZD1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5maXJzdEVmZmVjdD1udWxsO2EubGFzdEVmZmVjdD1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5yZXR1cm49bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGx9ZnVuY3Rpb24gZWooYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBmaihhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihlaihiKSlicmVhayBhO2I9Yi5yZXR1cm59dGhyb3cgRXJyb3IoeSgxNjApKTt9dmFyIGM9YjtiPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgxNjEpKTt9Yy5mbGFncyYxNiYmKHBiKGIsXCJcIiksYy5mbGFncyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGVqKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZyYmMTghPT1jLnRhZzspe2lmKGMuZmxhZ3MmMiljb250aW51ZSBiO2lmKG51bGw9PT1cbmMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmZsYWdzJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWQ/Z2ooYSxjLGIpOmhqKGEsYyxiKX1cbmZ1bmN0aW9uIGdqKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1qZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihnaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KWdqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIGhqKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoaGooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOyloaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBjaihhLGIpe2Zvcih2YXIgYz1iLGQ9ITEsZSxmOzspe2lmKCFkKXtkPWMucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZCl0aHJvdyBFcnJvcih5KDE2MCkpO2U9ZC5zdGF0ZU5vZGU7c3dpdGNoKGQudGFnKXtjYXNlIDU6Zj0hMTticmVhayBhO2Nhc2UgMzplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGE7Y2FzZSA0OmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYX1kPWQucmV0dXJufWQ9ITB9aWYoNT09PWMudGFnfHw2PT09Yy50YWcpe2E6Zm9yKHZhciBnPWEsaD1jLGs9aDs7KWlmKGJqKGcsayksbnVsbCE9PWsuY2hpbGQmJjQhPT1rLnRhZylrLmNoaWxkLnJldHVybj1rLGs9ay5jaGlsZDtlbHNle2lmKGs9PT1oKWJyZWFrIGE7Zm9yKDtudWxsPT09ay5zaWJsaW5nOyl7aWYobnVsbD09PWsucmV0dXJufHxrLnJldHVybj09PWgpYnJlYWsgYTtrPWsucmV0dXJufWsuc2libGluZy5yZXR1cm49ay5yZXR1cm47az1rLnNpYmxpbmd9Zj8oZz1lLGg9Yy5zdGF0ZU5vZGUsXG44PT09Zy5ub2RlVHlwZT9nLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaCk6Zy5yZW1vdmVDaGlsZChoKSk6ZS5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09Yy50YWcpe2lmKG51bGwhPT1jLmNoaWxkKXtlPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zj0hMDtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihiaihhLGMpLG51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybjs0PT09Yy50YWcmJihkPSExKX1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIGlqKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjp2YXIgYz1iLnVwZGF0ZVF1ZXVlO2M9bnVsbCE9PWM/Yy5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWMpe3ZhciBkPWM9Yy5uZXh0O2RvIDM9PT0oZC50YWcmMykmJihhPWQuZGVzdHJveSxkLmRlc3Ryb3k9dm9pZCAwLHZvaWQgMCE9PWEmJmEoKSksZD1kLm5leHQ7d2hpbGUoZCE9PWMpfXJldHVybjtjYXNlIDE6cmV0dXJuO2Nhc2UgNTpjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe2Q9Yi5tZW1vaXplZFByb3BzO3ZhciBlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW3hmXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiYkYShjLGQpO3diKGEsZSk7Yj13YihhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz1cbjIpe3ZhciBnPWZbZV0saD1mW2UrMV07XCJzdHlsZVwiPT09Zz90YihjLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/b2IoYyxoKTpcImNoaWxkcmVuXCI9PT1nP3BiKGMsaCk6cWEoYyxnLGgsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOmFiKGMsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYyxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YT1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxmPWQudmFsdWUsbnVsbCE9Zj9mYihjLCEhZC5tdWx0aXBsZSxmLCExKTphIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/ZmIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOmZiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19cmV0dXJuO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9XG5iLm1lbW9pemVkUHJvcHM7cmV0dXJuO2Nhc2UgMzpjPWIuc3RhdGVOb2RlO2MuaHlkcmF0ZSYmKGMuaHlkcmF0ZT0hMSxDYyhjLmNvbnRhaW5lckluZm8pKTtyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsIT09Yi5tZW1vaXplZFN0YXRlJiYoamo9TygpLGFqKGIuY2hpbGQsITApKTtraihiKTtyZXR1cm47Y2FzZSAxOTpraihiKTtyZXR1cm47Y2FzZSAxNzpyZXR1cm47Y2FzZSAyMzpjYXNlIDI0OmFqKGIsbnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSk7cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fWZ1bmN0aW9uIGtqKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IFVpKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9bGouYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBtaihhLGIpe3JldHVybiBudWxsIT09YSYmKGE9YS5tZW1vaXplZFN0YXRlLG51bGw9PT1hfHxudWxsIT09YS5kZWh5ZHJhdGVkKT8oYj1iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWImJm51bGw9PT1iLmRlaHlkcmF0ZWQpOiExfXZhciBuaj1NYXRoLmNlaWwsb2o9cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixwaj1yYS5SZWFjdEN1cnJlbnRPd25lcixYPTAsVT1udWxsLFk9bnVsbCxXPTAscWo9MCxyaj1CZigwKSxWPTAsc2o9bnVsbCx0aj0wLERnPTAsSGk9MCx1aj0wLHZqPW51bGwsamo9MCxKaT1JbmZpbml0eTtmdW5jdGlvbiB3aigpe0ppPU8oKSs1MDB9dmFyIFo9bnVsbCxRaT0hMSxSaT1udWxsLFRpPW51bGwseGo9ITEseWo9bnVsbCx6aj05MCxBaj1bXSxCaj1bXSxDaj1udWxsLERqPTAsRWo9bnVsbCxGaj0tMSxHaj0wLEhqPTAsSWo9bnVsbCxKaj0hMTtmdW5jdGlvbiBIZygpe3JldHVybiAwIT09KFgmNDgpP08oKTotMSE9PUZqP0ZqOkZqPU8oKX1cbmZ1bmN0aW9uIElnKGEpe2E9YS5tb2RlO2lmKDA9PT0oYSYyKSlyZXR1cm4gMTtpZigwPT09KGEmNCkpcmV0dXJuIDk5PT09ZWcoKT8xOjI7MD09PUdqJiYoR2o9dGopO2lmKDAhPT1rZy50cmFuc2l0aW9uKXswIT09SGomJihIaj1udWxsIT09dmo/dmoucGVuZGluZ0xhbmVzOjApO2E9R2o7dmFyIGI9NDE4NjExMiZ+SGo7YiY9LWI7MD09PWImJihhPTQxODYxMTImfmEsYj1hJi1hLDA9PT1iJiYoYj04MTkyKSk7cmV0dXJuIGJ9YT1lZygpOzAhPT0oWCY0KSYmOTg9PT1hP2E9WGMoMTIsR2opOihhPVNjKGEpLGE9WGMoYSxHaikpO3JldHVybiBhfVxuZnVuY3Rpb24gSmcoYSxiLGMpe2lmKDUwPERqKXRocm93IERqPTAsRWo9bnVsbCxFcnJvcih5KDE4NSkpO2E9S2ooYSxiKTtpZihudWxsPT09YSlyZXR1cm4gbnVsbDskYyhhLGIsYyk7YT09PVUmJihIaXw9Yiw0PT09ViYmSWkoYSxXKSk7dmFyIGQ9ZWcoKTsxPT09Yj8wIT09KFgmOCkmJjA9PT0oWCY0OCk/TGooYSk6KE1qKGEsYyksMD09PVgmJih3aigpLGlnKCkpKTooMD09PShYJjQpfHw5OCE9PWQmJjk5IT09ZHx8KG51bGw9PT1Daj9Daj1uZXcgU2V0KFthXSk6Q2ouYWRkKGEpKSxNaihhLGMpKTt2aj1hfWZ1bmN0aW9uIEtqKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO2M9YTtmb3IoYT1hLnJldHVybjtudWxsIT09YTspYS5jaGlsZExhbmVzfD1iLGM9YS5hbHRlcm5hdGUsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpLGM9YSxhPWEucmV0dXJuO3JldHVybiAzPT09Yy50YWc/Yy5zdGF0ZU5vZGU6bnVsbH1cbmZ1bmN0aW9uIE1qKGEsYil7Zm9yKHZhciBjPWEuY2FsbGJhY2tOb2RlLGQ9YS5zdXNwZW5kZWRMYW5lcyxlPWEucGluZ2VkTGFuZXMsZj1hLmV4cGlyYXRpb25UaW1lcyxnPWEucGVuZGluZ0xhbmVzOzA8Zzspe3ZhciBoPTMxLVZjKGcpLGs9MTw8aCxsPWZbaF07aWYoLTE9PT1sKXtpZigwPT09KGsmZCl8fDAhPT0oayZlKSl7bD1iO1JjKGspO3ZhciBuPUY7ZltoXT0xMDw9bj9sKzI1MDo2PD1uP2wrNUUzOi0xfX1lbHNlIGw8PWImJihhLmV4cGlyZWRMYW5lc3w9ayk7ZyY9fmt9ZD1VYyhhLGE9PT1VP1c6MCk7Yj1GO2lmKDA9PT1kKW51bGwhPT1jJiYoYyE9PVpmJiZQZihjKSxhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tQcmlvcml0eT0wKTtlbHNle2lmKG51bGwhPT1jKXtpZihhLmNhbGxiYWNrUHJpb3JpdHk9PT1iKXJldHVybjtjIT09WmYmJlBmKGMpfTE1PT09Yj8oYz1Mai5iaW5kKG51bGwsYSksbnVsbD09PWFnPyhhZz1bY10sYmc9T2YoVWYsamcpKTphZy5wdXNoKGMpLFxuYz1aZik6MTQ9PT1iP2M9aGcoOTksTGouYmluZChudWxsLGEpKTooYz1UYyhiKSxjPWhnKGMsTmouYmluZChudWxsLGEpKSk7YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiBOaihhKXtGaj0tMTtIaj1Haj0wO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTt2YXIgYj1hLmNhbGxiYWNrTm9kZTtpZihPaigpJiZhLmNhbGxiYWNrTm9kZSE9PWIpcmV0dXJuIG51bGw7dmFyIGM9VWMoYSxhPT09VT9XOjApO2lmKDA9PT1jKXJldHVybiBudWxsO3ZhciBkPWM7dmFyIGU9WDtYfD0xNjt2YXIgZj1QaigpO2lmKFUhPT1hfHxXIT09ZCl3aigpLFFqKGEsZCk7ZG8gdHJ5e1JqKCk7YnJlYWt9Y2F0Y2goaCl7U2ooYSxoKX13aGlsZSgxKTtxZygpO29qLmN1cnJlbnQ9ZjtYPWU7bnVsbCE9PVk/ZD0wOihVPW51bGwsVz0wLGQ9Vik7aWYoMCE9PSh0aiZIaSkpUWooYSwwKTtlbHNlIGlmKDAhPT1kKXsyPT09ZCYmKFh8PTY0LGEuaHlkcmF0ZSYmKGEuaHlkcmF0ZT0hMSxxZihhLmNvbnRhaW5lckluZm8pKSxjPVdjKGEpLDAhPT1jJiYoZD1UaihhLGMpKSk7aWYoMT09PWQpdGhyb3cgYj1zaixRaihhLDApLElpKGEsYyksTWooYSxPKCkpLGI7YS5maW5pc2hlZFdvcms9XG5hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1jO3N3aXRjaChkKXtjYXNlIDA6Y2FzZSAxOnRocm93IEVycm9yKHkoMzQ1KSk7Y2FzZSAyOlVqKGEpO2JyZWFrO2Nhc2UgMzpJaShhLGMpO2lmKChjJjYyOTE0NTYwKT09PWMmJihkPWpqKzUwMC1PKCksMTA8ZCkpe2lmKDAhPT1VYyhhLDApKWJyZWFrO2U9YS5zdXNwZW5kZWRMYW5lcztpZigoZSZjKSE9PWMpe0hnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZlO2JyZWFrfWEudGltZW91dEhhbmRsZT1vZihVai5iaW5kKG51bGwsYSksZCk7YnJlYWt9VWooYSk7YnJlYWs7Y2FzZSA0OklpKGEsYyk7aWYoKGMmNDE4NjExMik9PT1jKWJyZWFrO2Q9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8Yzspe3ZhciBnPTMxLVZjKGMpO2Y9MTw8ZztnPWRbZ107Zz5lJiYoZT1nKTtjJj1+Zn1jPWU7Yz1PKCktYztjPSgxMjA+Yz8xMjA6NDgwPmM/NDgwOjEwODA+Yz8xMDgwOjE5MjA+Yz8xOTIwOjNFMz5jPzNFMzo0MzIwPlxuYz80MzIwOjE5NjAqbmooYy8xOTYwKSktYztpZigxMDxjKXthLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGMpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNTpVaihhKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMzI5KSk7fX1NaihhLE8oKSk7cmV0dXJuIGEuY2FsbGJhY2tOb2RlPT09Yj9Oai5iaW5kKG51bGwsYSk6bnVsbH1mdW5jdGlvbiBJaShhLGIpe2ImPX51ajtiJj1+SGk7YS5zdXNwZW5kZWRMYW5lc3w9YjthLnBpbmdlZExhbmVzJj1+Yjtmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGI7KXt2YXIgYz0zMS1WYyhiKSxkPTE8PGM7YVtjXT0tMTtiJj1+ZH19XG5mdW5jdGlvbiBMaihhKXtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7T2ooKTtpZihhPT09VSYmMCE9PShhLmV4cGlyZWRMYW5lcyZXKSl7dmFyIGI9Vzt2YXIgYz1UaihhLGIpOzAhPT0odGomSGkpJiYoYj1VYyhhLGIpLGM9VGooYSxiKSl9ZWxzZSBiPVVjKGEsMCksYz1UaihhLGIpOzAhPT1hLnRhZyYmMj09PWMmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYj1XYyhhKSwwIT09YiYmKGM9VGooYSxiKSkpO2lmKDE9PT1jKXRocm93IGM9c2osUWooYSwwKSxJaShhLGIpLE1qKGEsTygpKSxjO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7VWooYSk7TWooYSxPKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gVmooKXtpZihudWxsIT09Q2ope3ZhciBhPUNqO0NqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2EuZXhwaXJlZExhbmVzfD0yNCZhLnBlbmRpbmdMYW5lcztNaihhLE8oKSl9KX1pZygpfWZ1bmN0aW9uIFdqKGEsYil7dmFyIGM9WDtYfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fWZ1bmN0aW9uIFhqKGEsYil7dmFyIGM9WDtYJj0tMjtYfD04O3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fWZ1bmN0aW9uIG5pKGEsYil7SShyaixxaik7cWp8PWI7dGp8PWJ9ZnVuY3Rpb24gS2koKXtxaj1yai5jdXJyZW50O0gocmopfVxuZnVuY3Rpb24gUWooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEscGYoYykpO2lmKG51bGwhPT1ZKWZvcihjPVkucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmR2YoKTticmVhaztjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTticmVhaztjYXNlIDU6aGgoZCk7YnJlYWs7Y2FzZSA0OmZoKCk7YnJlYWs7Y2FzZSAxMzpIKFApO2JyZWFrO2Nhc2UgMTk6SChQKTticmVhaztjYXNlIDEwOnJnKGQpO2JyZWFrO2Nhc2UgMjM6Y2FzZSAyNDpLaSgpfWM9Yy5yZXR1cm59VT1hO1k9VGcoYS5jdXJyZW50LG51bGwpO1c9cWo9dGo9YjtWPTA7c2o9bnVsbDt1aj1IaT1EZz0wfVxuZnVuY3Rpb24gU2ooYSxiKXtkb3t2YXIgYz1ZO3RyeXtxZygpO3ZoLmN1cnJlbnQ9R2g7aWYoeWgpe2Zvcih2YXIgZD1SLm1lbW9pemVkU3RhdGU7bnVsbCE9PWQ7KXt2YXIgZT1kLnF1ZXVlO251bGwhPT1lJiYoZS5wZW5kaW5nPW51bGwpO2Q9ZC5uZXh0fXloPSExfXhoPTA7VD1TPVI9bnVsbDt6aD0hMTtwai5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7Vj0xO3NqPWI7WT1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9VztoLmZsYWdzfD0yMDQ4O2guZmlyc3RFZmZlY3Q9aC5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsudGhlbil7dmFyIGw9aztpZigwPT09KGgubW9kZSYyKSl7dmFyIG49aC5hbHRlcm5hdGU7bj8oaC51cGRhdGVRdWV1ZT1uLnVwZGF0ZVF1ZXVlLGgubWVtb2l6ZWRTdGF0ZT1uLm1lbW9pemVkU3RhdGUsaC5sYW5lcz1uLmxhbmVzKTpcbihoLnVwZGF0ZVF1ZXVlPW51bGwsaC5tZW1vaXplZFN0YXRlPW51bGwpfXZhciBBPTAhPT0oUC5jdXJyZW50JjEpLHA9Zztkb3t2YXIgQztpZihDPTEzPT09cC50YWcpe3ZhciB4PXAubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09eClDPW51bGwhPT14LmRlaHlkcmF0ZWQ/ITA6ITE7ZWxzZXt2YXIgdz1wLm1lbW9pemVkUHJvcHM7Qz12b2lkIDA9PT13LmZhbGxiYWNrPyExOiEwIT09dy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDpBPyExOiEwfX1pZihDKXt2YXIgej1wLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT16KXt2YXIgdT1uZXcgU2V0O3UuYWRkKGwpO3AudXBkYXRlUXVldWU9dX1lbHNlIHouYWRkKGwpO2lmKDA9PT0ocC5tb2RlJjIpKXtwLmZsYWdzfD02NDtoLmZsYWdzfD0xNjM4NDtoLmZsYWdzJj0tMjk4MTtpZigxPT09aC50YWcpaWYobnVsbD09PWguYWx0ZXJuYXRlKWgudGFnPTE3O2Vsc2V7dmFyIHQ9emcoLTEsMSk7dC50YWc9MjtBZyhoLHQpfWgubGFuZXN8PTE7YnJlYWsgYX1rPVxudm9pZCAwO2g9Yjt2YXIgcT1mLnBpbmdDYWNoZTtudWxsPT09cT8ocT1mLnBpbmdDYWNoZT1uZXcgT2ksaz1uZXcgU2V0LHEuc2V0KGwsaykpOihrPXEuZ2V0KGwpLHZvaWQgMD09PWsmJihrPW5ldyBTZXQscS5zZXQobCxrKSkpO2lmKCFrLmhhcyhoKSl7ay5hZGQoaCk7dmFyIHY9WWouYmluZChudWxsLGYsbCxoKTtsLnRoZW4odix2KX1wLmZsYWdzfD00MDk2O3AubGFuZXM9YjticmVhayBhfXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApO2s9RXJyb3IoKFJhKGgudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIil9NSE9PVYmJihWPTIpO2s9TWkoayxoKTtwPVxuZztkb3tzd2l0Y2gocC50YWcpe2Nhc2UgMzpmPWs7cC5mbGFnc3w9NDA5NjtiJj0tYjtwLmxhbmVzfD1iO3ZhciBKPVBpKHAsZixiKTtCZyhwLEopO2JyZWFrIGE7Y2FzZSAxOmY9azt2YXIgSz1wLnR5cGUsUT1wLnN0YXRlTm9kZTtpZigwPT09KHAuZmxhZ3MmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEsuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09USYmXCJmdW5jdGlvblwiPT09dHlwZW9mIFEuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoUSkpKSl7cC5mbGFnc3w9NDA5NjtiJj0tYjtwLmxhbmVzfD1iO3ZhciBMPVNpKHAsZixiKTtCZyhwLEwpO2JyZWFrIGF9fXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApfVpqKGMpfWNhdGNoKHZhKXtiPXZhO1k9PT1jJiZudWxsIT09YyYmKFk9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9XG5mdW5jdGlvbiBQaigpe3ZhciBhPW9qLmN1cnJlbnQ7b2ouY3VycmVudD1HaDtyZXR1cm4gbnVsbD09PWE/R2g6YX1mdW5jdGlvbiBUaihhLGIpe3ZhciBjPVg7WHw9MTY7dmFyIGQ9UGooKTtVPT09YSYmVz09PWJ8fFFqKGEsYik7ZG8gdHJ5e2FrKCk7YnJlYWt9Y2F0Y2goZSl7U2ooYSxlKX13aGlsZSgxKTtxZygpO1g9Yztvai5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IoeSgyNjEpKTtVPW51bGw7Vz0wO3JldHVybiBWfWZ1bmN0aW9uIGFrKCl7Zm9yKDtudWxsIT09WTspYmsoWSl9ZnVuY3Rpb24gUmooKXtmb3IoO251bGwhPT1ZJiYhUWYoKTspYmsoWSl9ZnVuY3Rpb24gYmsoYSl7dmFyIGI9Y2soYS5hbHRlcm5hdGUsYSxxaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1pqKGEpOlk9Yjtwai5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBaaihhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjIwNDgpKXtjPUdpKGMsYixxaik7aWYobnVsbCE9PWMpe1k9YztyZXR1cm59Yz1iO2lmKDI0IT09Yy50YWcmJjIzIT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fDAhPT0ocWomMTA3Mzc0MTgyNCl8fDA9PT0oYy5tb2RlJjQpKXtmb3IodmFyIGQ9MCxlPWMuY2hpbGQ7bnVsbCE9PWU7KWR8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGU9ZS5zaWJsaW5nO2MuY2hpbGRMYW5lcz1kfW51bGwhPT1hJiYwPT09KGEuZmxhZ3MmMjA0OCkmJihudWxsPT09YS5maXJzdEVmZmVjdCYmKGEuZmlyc3RFZmZlY3Q9Yi5maXJzdEVmZmVjdCksbnVsbCE9PWIubGFzdEVmZmVjdCYmKG51bGwhPT1hLmxhc3RFZmZlY3QmJihhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iLmZpcnN0RWZmZWN0KSxhLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0KSwxPGIuZmxhZ3MmJihudWxsIT09XG5hLmxhc3RFZmZlY3Q/YS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YjphLmZpcnN0RWZmZWN0PWIsYS5sYXN0RWZmZWN0PWIpKX1lbHNle2M9TGkoYik7aWYobnVsbCE9PWMpe2MuZmxhZ3MmPTIwNDc7WT1jO3JldHVybn1udWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5mbGFnc3w9MjA0OCl9Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1WJiYoVj01KX1mdW5jdGlvbiBVaihhKXt2YXIgYj1lZygpO2dnKDk5LGRrLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGRrKGEsYil7ZG8gT2ooKTt3aGlsZShudWxsIT09eWopO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTt2YXIgYz1hLmZpbmlzaGVkV29yaztpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IoeSgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO3ZhciBkPWMubGFuZXN8Yy5jaGlsZExhbmVzLGU9ZCxmPWEucGVuZGluZ0xhbmVzJn5lO2EucGVuZGluZ0xhbmVzPWU7YS5zdXNwZW5kZWRMYW5lcz0wO2EucGluZ2VkTGFuZXM9MDthLmV4cGlyZWRMYW5lcyY9ZTthLm11dGFibGVSZWFkTGFuZXMmPWU7YS5lbnRhbmdsZWRMYW5lcyY9ZTtlPWEuZW50YW5nbGVtZW50cztmb3IodmFyIGc9YS5ldmVudFRpbWVzLGg9YS5leHBpcmF0aW9uVGltZXM7MDxmOyl7dmFyIGs9MzEtVmMoZiksbD0xPDxrO2Vba109MDtnW2tdPS0xO2hba109LTE7ZiY9fmx9bnVsbCE9PVxuQ2omJjA9PT0oZCYyNCkmJkNqLmhhcyhhKSYmQ2ouZGVsZXRlKGEpO2E9PT1VJiYoWT1VPW51bGwsVz0wKTsxPGMuZmxhZ3M/bnVsbCE9PWMubGFzdEVmZmVjdD8oYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxkPWMuZmlyc3RFZmZlY3QpOmQ9YzpkPWMuZmlyc3RFZmZlY3Q7aWYobnVsbCE9PWQpe2U9WDtYfD0zMjtwai5jdXJyZW50PW51bGw7a2Y9ZmQ7Zz1OZSgpO2lmKE9lKGcpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBnKWg9e3N0YXJ0Omcuc2VsZWN0aW9uU3RhcnQsZW5kOmcuc2VsZWN0aW9uRW5kfTtlbHNlIGE6aWYoaD0oaD1nLm93bmVyRG9jdW1lbnQpJiZoLmRlZmF1bHRWaWV3fHx3aW5kb3csKGw9aC5nZXRTZWxlY3Rpb24mJmguZ2V0U2VsZWN0aW9uKCkpJiYwIT09bC5yYW5nZUNvdW50KXtoPWwuYW5jaG9yTm9kZTtmPWwuYW5jaG9yT2Zmc2V0O2s9bC5mb2N1c05vZGU7bD1sLmZvY3VzT2Zmc2V0O3RyeXtoLm5vZGVUeXBlLGsubm9kZVR5cGV9Y2F0Y2godmEpe2g9bnVsbDtcbmJyZWFrIGF9dmFyIG49MCxBPS0xLHA9LTEsQz0wLHg9MCx3PWcsej1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHU7Oyl7dyE9PWh8fDAhPT1mJiYzIT09dy5ub2RlVHlwZXx8KEE9bitmKTt3IT09a3x8MCE9PWwmJjMhPT13Lm5vZGVUeXBlfHwocD1uK2wpOzM9PT13Lm5vZGVUeXBlJiYobis9dy5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHU9dy5maXJzdENoaWxkKSlicmVhazt6PXc7dz11fWZvcig7Oyl7aWYodz09PWcpYnJlYWsgYjt6PT09aCYmKytDPT09ZiYmKEE9bik7ej09PWsmJisreD09PWwmJihwPW4pO2lmKG51bGwhPT0odT13Lm5leHRTaWJsaW5nKSlicmVhazt3PXo7ej13LnBhcmVudE5vZGV9dz11fWg9LTE9PT1BfHwtMT09PXA/bnVsbDp7c3RhcnQ6QSxlbmQ6cH19ZWxzZSBoPW51bGw7aD1ofHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBoPW51bGw7bGY9e2ZvY3VzZWRFbGVtOmcsc2VsZWN0aW9uUmFuZ2U6aH07ZmQ9ITE7SWo9bnVsbDtKaj0hMTtaPWQ7ZG8gdHJ5e2VrKCl9Y2F0Y2godmEpe2lmKG51bGw9PT1cblopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7SWo9bnVsbDtaPWQ7ZG8gdHJ5e2ZvcihnPWE7bnVsbCE9PVo7KXt2YXIgdD1aLmZsYWdzO3QmMTYmJnBiKFouc3RhdGVOb2RlLFwiXCIpO2lmKHQmMTI4KXt2YXIgcT1aLmFsdGVybmF0ZTtpZihudWxsIT09cSl7dmFyIHY9cS5yZWY7bnVsbCE9PXYmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdj92KG51bGwpOnYuY3VycmVudD1udWxsKX19c3dpdGNoKHQmMTAzOCl7Y2FzZSAyOmZqKFopO1ouZmxhZ3MmPS0zO2JyZWFrO2Nhc2UgNjpmaihaKTtaLmZsYWdzJj0tMztpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDEwMjQ6Wi5mbGFncyY9LTEwMjU7YnJlYWs7Y2FzZSAxMDI4OlouZmxhZ3MmPS0xMDI1O2lqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgNDppaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDg6aD1aO2NqKGcsaCk7dmFyIEo9aC5hbHRlcm5hdGU7ZGooaCk7bnVsbCE9PVxuSiYmZGooSil9Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTt2PWxmO3E9TmUoKTt0PXYuZm9jdXNlZEVsZW07Zz12LnNlbGVjdGlvblJhbmdlO2lmKHEhPT10JiZ0JiZ0Lm93bmVyRG9jdW1lbnQmJk1lKHQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsdCkpe251bGwhPT1nJiZPZSh0KSYmKHE9Zy5zdGFydCx2PWcuZW5kLHZvaWQgMD09PXYmJih2PXEpLFwic2VsZWN0aW9uU3RhcnRcImluIHQ/KHQuc2VsZWN0aW9uU3RhcnQ9cSx0LnNlbGVjdGlvbkVuZD1NYXRoLm1pbih2LHQudmFsdWUubGVuZ3RoKSk6KHY9KHE9dC5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJnEuZGVmYXVsdFZpZXd8fHdpbmRvdyx2LmdldFNlbGVjdGlvbiYmKHY9di5nZXRTZWxlY3Rpb24oKSxoPXQudGV4dENvbnRlbnQubGVuZ3RoLEo9TWF0aC5taW4oZy5zdGFydCxoKSxnPXZvaWQgMD09PVxuZy5lbmQ/SjpNYXRoLm1pbihnLmVuZCxoKSwhdi5leHRlbmQmJko+ZyYmKGg9ZyxnPUosSj1oKSxoPUxlKHQsSiksZj1MZSh0LGcpLGgmJmYmJigxIT09di5yYW5nZUNvdW50fHx2LmFuY2hvck5vZGUhPT1oLm5vZGV8fHYuYW5jaG9yT2Zmc2V0IT09aC5vZmZzZXR8fHYuZm9jdXNOb2RlIT09Zi5ub2RlfHx2LmZvY3VzT2Zmc2V0IT09Zi5vZmZzZXQpJiYocT1xLmNyZWF0ZVJhbmdlKCkscS5zZXRTdGFydChoLm5vZGUsaC5vZmZzZXQpLHYucmVtb3ZlQWxsUmFuZ2VzKCksSj5nPyh2LmFkZFJhbmdlKHEpLHYuZXh0ZW5kKGYubm9kZSxmLm9mZnNldCkpOihxLnNldEVuZChmLm5vZGUsZi5vZmZzZXQpLHYuYWRkUmFuZ2UocSkpKSkpKTtxPVtdO2Zvcih2PXQ7dj12LnBhcmVudE5vZGU7KTE9PT12Lm5vZGVUeXBlJiZxLnB1c2goe2VsZW1lbnQ6dixsZWZ0OnYuc2Nyb2xsTGVmdCx0b3A6di5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgdC5mb2N1cyYmdC5mb2N1cygpO2Zvcih0PVxuMDt0PHEubGVuZ3RoO3QrKyl2PXFbdF0sdi5lbGVtZW50LnNjcm9sbExlZnQ9di5sZWZ0LHYuZWxlbWVudC5zY3JvbGxUb3A9di50b3B9ZmQ9ISFrZjtsZj1rZj1udWxsO2EuY3VycmVudD1jO1o9ZDtkbyB0cnl7Zm9yKHQ9YTtudWxsIT09Wjspe3ZhciBLPVouZmxhZ3M7SyYzNiYmWWkodCxaLmFsdGVybmF0ZSxaKTtpZihLJjEyOCl7cT12b2lkIDA7dmFyIFE9Wi5yZWY7aWYobnVsbCE9PVEpe3ZhciBMPVouc3RhdGVOb2RlO3N3aXRjaChaLnRhZyl7Y2FzZSA1OnE9TDticmVhaztkZWZhdWx0OnE9TH1cImZ1bmN0aW9uXCI9PT10eXBlb2YgUT9RKHEpOlEuY3VycmVudD1xfX1aPVoubmV4dEVmZmVjdH19Y2F0Y2godmEpe2lmKG51bGw9PT1aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO1o9bnVsbDskZigpO1g9ZX1lbHNlIGEuY3VycmVudD1jO2lmKHhqKXhqPSExLHlqPWEsemo9YjtlbHNlIGZvcihaPWQ7bnVsbCE9PVo7KWI9XG5aLm5leHRFZmZlY3QsWi5uZXh0RWZmZWN0PW51bGwsWi5mbGFncyY4JiYoSz1aLEsuc2libGluZz1udWxsLEsuc3RhdGVOb2RlPW51bGwpLFo9YjtkPWEucGVuZGluZ0xhbmVzOzA9PT1kJiYoVGk9bnVsbCk7MT09PWQ/YT09PUVqP0RqKys6KERqPTAsRWo9YSk6RGo9MDtjPWMuc3RhdGVOb2RlO2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclJvb3QpdHJ5e01mLm9uQ29tbWl0RmliZXJSb290KExmLGMsdm9pZCAwLDY0PT09KGMuY3VycmVudC5mbGFncyY2NCkpfWNhdGNoKHZhKXt9TWooYSxPKCkpO2lmKFFpKXRocm93IFFpPSExLGE9UmksUmk9bnVsbCxhO2lmKDAhPT0oWCY4KSlyZXR1cm4gbnVsbDtpZygpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gZWsoKXtmb3IoO251bGwhPT1aOyl7dmFyIGE9Wi5hbHRlcm5hdGU7Smp8fG51bGw9PT1Janx8KDAhPT0oWi5mbGFncyY4KT9kYyhaLElqKSYmKEpqPSEwKToxMz09PVoudGFnJiZtaihhLFopJiZkYyhaLElqKSYmKEpqPSEwKSk7dmFyIGI9Wi5mbGFnczswIT09KGImMjU2KSYmWGkoYSxaKTswPT09KGImNTEyKXx8eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSk7Wj1aLm5leHRFZmZlY3R9fWZ1bmN0aW9uIE9qKCl7aWYoOTAhPT16ail7dmFyIGE9OTc8emo/OTc6emo7emo9OTA7cmV0dXJuIGdnKGEsZmspfXJldHVybiExfWZ1bmN0aW9uICRpKGEsYil7QWoucHVzaChiLGEpO3hqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpfWZ1bmN0aW9uIFppKGEsYil7QmoucHVzaChiLGEpO3hqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpfVxuZnVuY3Rpb24gZmsoKXtpZihudWxsPT09eWopcmV0dXJuITE7dmFyIGE9eWo7eWo9bnVsbDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzMxKSk7dmFyIGI9WDtYfD0zMjt2YXIgYz1CajtCaj1bXTtmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrPTIpe3ZhciBlPWNbZF0sZj1jW2QrMV0sZz1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyl0cnl7ZygpfWNhdGNoKGspe2lmKG51bGw9PT1mKXRocm93IEVycm9yKHkoMzMwKSk7V2koZixrKX19Yz1BajtBaj1bXTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCs9Mil7ZT1jW2RdO2Y9Y1tkKzFdO3RyeXt2YXIgaD1lLmNyZWF0ZTtlLmRlc3Ryb3k9aCgpfWNhdGNoKGspe2lmKG51bGw9PT1mKXRocm93IEVycm9yKHkoMzMwKSk7V2koZixrKX19Zm9yKGg9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1oOylhPWgubmV4dEVmZmVjdCxoLm5leHRFZmZlY3Q9bnVsbCxoLmZsYWdzJjgmJihoLnNpYmxpbmc9XG5udWxsLGguc3RhdGVOb2RlPW51bGwpLGg9YTtYPWI7aWcoKTtyZXR1cm4hMH1mdW5jdGlvbiBnayhhLGIsYyl7Yj1NaShjLGIpO2I9UGkoYSxiLDEpO0FnKGEsYik7Yj1IZygpO2E9S2ooYSwxKTtudWxsIT09YSYmKCRjKGEsMSxiKSxNaihhLGIpKX1cbmZ1bmN0aW9uIFdpKGEsYil7aWYoMz09PWEudGFnKWdrKGEsYSxiKTtlbHNlIGZvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKDM9PT1jLnRhZyl7Z2soYyxhLGIpO2JyZWFrfWVsc2UgaWYoMT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoZCkpKXthPU1pKGIsYSk7dmFyIGU9U2koYyxhLDEpO0FnKGMsZSk7ZT1IZygpO2M9S2ooYywxKTtpZihudWxsIT09YykkYyhjLDEsZSksTWooYyxlKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl0cnl7ZC5jb21wb25lbnREaWRDYXRjaChiLGEpfWNhdGNoKGYpe31icmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBZaihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9SGcoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmM7VT09PWEmJihXJmMpPT09YyYmKDQ9PT1WfHwzPT09ViYmKFcmNjI5MTQ1NjApPT09VyYmNTAwPk8oKS1qaj9RaihhLDApOnVqfD1jKTtNaihhLGIpfWZ1bmN0aW9uIGxqKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9MDswPT09YiYmKGI9YS5tb2RlLDA9PT0oYiYyKT9iPTE6MD09PShiJjQpP2I9OTk9PT1lZygpPzE6MjooMD09PUdqJiYoR2o9dGopLGI9WWMoNjI5MTQ1NjAmfkdqKSwwPT09YiYmKGI9NDE5NDMwNCkpKTtjPUhnKCk7YT1LaihhLGIpO251bGwhPT1hJiYoJGMoYSxiLGMpLE1qKGEsYykpfXZhciBjaztcbmNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLmxhbmVzO2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxOLmN1cnJlbnQpdWc9ITA7ZWxzZSBpZigwIT09KGMmZCkpdWc9MCE9PShhLmZsYWdzJjE2Mzg0KT8hMDohMTtlbHNle3VnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOnJpKGIpO3NoKCk7YnJlYWs7Y2FzZSA1OmdoKGIpO2JyZWFrO2Nhc2UgMTpGZihiLnR5cGUpJiZKZihiKTticmVhaztjYXNlIDQ6ZWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOmQ9Yi5tZW1vaXplZFByb3BzLnZhbHVlO3ZhciBlPWIudHlwZS5fY29udGV4dDtJKG1nLGUuX2N1cnJlbnRWYWx1ZSk7ZS5fY3VycmVudFZhbHVlPWQ7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtpZigwIT09KGMmYi5jaGlsZC5jaGlsZExhbmVzKSlyZXR1cm4gdGkoYSxiLGMpO0koUCxQLmN1cnJlbnQmMSk7Yj1oaShhLGIsYyk7cmV0dXJuIG51bGwhPT1cbmI/Yi5zaWJsaW5nOm51bGx9SShQLFAuY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9MCE9PShjJmIuY2hpbGRMYW5lcyk7aWYoMCE9PShhLmZsYWdzJjY0KSl7aWYoZClyZXR1cm4gQWkoYSxiLGMpO2IuZmxhZ3N8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7SShQLFAuY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gYi5sYW5lcz0wLG1pKGEsYixjKX1yZXR1cm4gaGkoYSxiLGMpfWVsc2UgdWc9ITE7Yi5sYW5lcz0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9Yi50eXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1FZihiLE0uY3VycmVudCk7dGcoYixjKTtlPUNoKG51bGwsYixkLGEsZSxjKTtiLmZsYWdzfD0xO2lmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtpZihGZihkKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7eGcoYik7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJkdnKGIsZCxnLGEpO2UudXBkYXRlcj1LZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxzPWI7T2coYixkLGEsYyk7Yj1xaShudWxsLGIsZCwhMCxmLGMpfWVsc2UgYi50YWc9MCxmaShudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7YTp7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mik7XG5hPWIucGVuZGluZ1Byb3BzO2Y9ZS5faW5pdDtlPWYoZS5fcGF5bG9hZCk7Yi50eXBlPWU7Zj1iLnRhZz1oayhlKTthPWxnKGUsYSk7c3dpdGNoKGYpe2Nhc2UgMDpiPWxpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1waShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPWdpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9aWkobnVsbCxiLGUsbGcoZS50eXBlLGEpLGQsYyk7YnJlYWsgYX10aHJvdyBFcnJvcih5KDMwNixlLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLGxpKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLHBpKGEsYixkLGUsYyk7Y2FzZSAzOnJpKGIpO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09YXx8bnVsbD09PWQpdGhyb3cgRXJyb3IoeSgyODIpKTtcbmQ9Yi5wZW5kaW5nUHJvcHM7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDt5ZyhhLGIpO0NnKGIsZCxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpc2goKSxiPWhpKGEsYixjKTtlbHNle2U9Yi5zdGF0ZU5vZGU7aWYoZj1lLmh5ZHJhdGUpa2g9cmYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxqaD1iLGY9bGg9ITA7aWYoZil7YT1lLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE7aWYobnVsbCE9YSlmb3IoZT0wO2U8YS5sZW5ndGg7ZSs9MilmPWFbZV0sZi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1hW2UrMV0sdGgucHVzaChmKTtjPVpnKGIsbnVsbCxkLGMpO2ZvcihiLmNoaWxkPWM7YzspYy5mbGFncz1jLmZsYWdzJi0zfDEwMjQsYz1jLnNpYmxpbmd9ZWxzZSBmaShhLGIsZCxjKSxzaCgpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIGdoKGIpLG51bGw9PT1hJiZcbnBoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sbmYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJm5mKGQsZikmJihiLmZsYWdzfD0xNiksb2koYSxiKSxmaShhLGIsZyxjKSxiLmNoaWxkO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJnBoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gdGkoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gZWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9WWcoYixudWxsLGQsYyk6ZmkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLGdpKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbmMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTt2YXIgaD1iLnR5cGUuX2NvbnRleHQ7SShtZyxoLl9jdXJyZW50VmFsdWUpO2guX2N1cnJlbnRWYWx1ZT1mO2lmKG51bGwhPT1nKWlmKGg9Zy52YWx1ZSxmPUhlKGgsZik/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MCwwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFOLmN1cnJlbnQpe2I9aGkoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGg9Yi5jaGlsZCxudWxsIT09aCYmKGgucmV0dXJuPWIpO251bGwhPT1oOyl7dmFyIGs9aC5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWspe2c9aC5jaGlsZDtmb3IodmFyIGw9XG5rLmZpcnN0Q29udGV4dDtudWxsIT09bDspe2lmKGwuY29udGV4dD09PWQmJjAhPT0obC5vYnNlcnZlZEJpdHMmZikpezE9PT1oLnRhZyYmKGw9emcoLTEsYyYtYyksbC50YWc9MixBZyhoLGwpKTtoLmxhbmVzfD1jO2w9aC5hbHRlcm5hdGU7bnVsbCE9PWwmJihsLmxhbmVzfD1jKTtzZyhoLnJldHVybixjKTtrLmxhbmVzfD1jO2JyZWFrfWw9bC5uZXh0fX1lbHNlIGc9MTA9PT1oLnRhZz9oLnR5cGU9PT1iLnR5cGU/bnVsbDpoLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPWd9ZmkoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4sdGcoYixjKSxlPXZnKGUsXG5mLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZmxhZ3N8PTEsZmkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPWxnKGUsYi5wZW5kaW5nUHJvcHMpLGY9bGcoZS50eXBlLGYpLGlpKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBraShhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxiLnRhZz0xLEZmKGQpPyhhPSEwLEpmKGIpKTphPSExLHRnKGIsYyksTWcoYixkLGUpLE9nKGIsZCxlLGMpLHFpKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gQWkoYSxiLGMpO2Nhc2UgMjM6cmV0dXJuIG1pKGEsYixjKTtjYXNlIDI0OnJldHVybiBtaShhLGIsYyl9dGhyb3cgRXJyb3IoeSgxNTYsYi50YWcpKTtcbn07ZnVuY3Rpb24gaWsoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmZsYWdzPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIG5oKGEsYixjLGQpe3JldHVybiBuZXcgaWsoYSxiLGMsZCl9ZnVuY3Rpb24gamkoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1cbmZ1bmN0aW9uIGhrKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBqaShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09QWEpcmV0dXJuIDExO2lmKGE9PT1EYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBUZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPW5oKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFZnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlqaShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB1YTpyZXR1cm4gWGcoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBIYTpnPTg7ZXw9MTY7YnJlYWs7Y2FzZSB3YTpnPTg7ZXw9MTticmVhaztjYXNlIHhhOnJldHVybiBhPW5oKDEyLGMsYixlfDgpLGEuZWxlbWVudFR5cGU9eGEsYS50eXBlPXhhLGEubGFuZXM9ZixhO2Nhc2UgQmE6cmV0dXJuIGE9bmgoMTMsYyxiLGUpLGEudHlwZT1CYSxhLmVsZW1lbnRUeXBlPUJhLGEubGFuZXM9ZixhO2Nhc2UgQ2E6cmV0dXJuIGE9bmgoMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9Q2EsYS5sYW5lcz1mLGE7Y2FzZSBJYTpyZXR1cm4gdmkoYyxlLGYsYik7Y2FzZSBKYTpyZXR1cm4gYT1uaCgyNCxjLGIsZSksYS5lbGVtZW50VHlwZT1KYSxhLmxhbmVzPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB5YTpnPTEwO2JyZWFrIGE7Y2FzZSB6YTpnPTk7YnJlYWsgYTtjYXNlIEFhOmc9MTE7YnJlYWsgYTtjYXNlIERhOmc9MTQ7YnJlYWsgYTtjYXNlIEVhOmc9MTY7ZD1udWxsO2JyZWFrIGE7Y2FzZSBGYTpnPTIyO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1uaChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIFhnKGEsYixjLGQpe2E9bmgoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIHZpKGEsYixjLGQpe2E9bmgoMjMsYSxkLGIpO2EuZWxlbWVudFR5cGU9SWE7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIFVnKGEsYixjKXthPW5oKDYsYSxudWxsLGIpO2EubGFuZXM9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIFdnKGEsYixjKXtiPW5oKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmxhbmVzPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gamsoYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5maW5pc2hlZFdvcms9dGhpcy5waW5nQ2FjaGU9dGhpcy5jdXJyZW50PXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9WmMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9WmMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9WmMoMCk7dGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPW51bGx9XG5mdW5jdGlvbiBrayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOnRhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuZnVuY3Rpb24gbGsoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9SGcoKSxnPUlnKGUpO2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFscztiOntpZihaYihjKSE9PWN8fDEhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDE3MCkpO3ZhciBoPWM7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aD1oLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKEZmKGgudHlwZSkpe2g9aC5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19aD1oLnJldHVybn13aGlsZShudWxsIT09aCk7dGhyb3cgRXJyb3IoeSgxNzEpKTt9aWYoMT09PWMudGFnKXt2YXIgaz1jLnR5cGU7aWYoRmYoaykpe2M9SWYoYyxrLGgpO2JyZWFrIGF9fWM9aH1lbHNlIGM9Q2Y7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj16ZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1cbmQmJihiLmNhbGxiYWNrPWQpO0FnKGUsYik7SmcoZSxnLGYpO3JldHVybiBnfWZ1bmN0aW9uIG1rKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gbmsoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7dmFyIGM9YS5yZXRyeUxhbmU7YS5yZXRyeUxhbmU9MCE9PWMmJmM8Yj9jOmJ9fWZ1bmN0aW9uIG9rKGEsYil7bmsoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJm5rKGEsYil9ZnVuY3Rpb24gcGsoKXtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHFrKGEsYixjKXt2YXIgZD1udWxsIT1jJiZudWxsIT1jLmh5ZHJhdGlvbk9wdGlvbnMmJmMuaHlkcmF0aW9uT3B0aW9ucy5tdXRhYmxlU291cmNlc3x8bnVsbDtjPW5ldyBqayhhLGIsbnVsbCE9YyYmITA9PT1jLmh5ZHJhdGUpO2I9bmgoMyxudWxsLG51bGwsMj09PWI/NzoxPT09Yj8zOjApO2MuY3VycmVudD1iO2Iuc3RhdGVOb2RlPWM7eGcoYik7YVtmZl09Yy5jdXJyZW50O2NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtpZihkKWZvcihhPTA7YTxkLmxlbmd0aDthKyspe2I9ZFthXTt2YXIgZT1iLl9nZXRWZXJzaW9uO2U9ZShiLl9zb3VyY2UpO251bGw9PWMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT9jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9W2IsZV06Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhLnB1c2goYixlKX10aGlzLl9pbnRlcm5hbFJvb3Q9Y31cbnFrLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7bGsoYSx0aGlzLl9pbnRlcm5hbFJvb3QsbnVsbCxudWxsKX07cWsucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3QsYj1hLmNvbnRhaW5lckluZm87bGsobnVsbCxhLG51bGwsZnVuY3Rpb24oKXtiW2ZmXT1udWxsfSl9O2Z1bmN0aW9uIHJrKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1cbmZ1bmN0aW9uIHNrKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgcWsoYSwwLGI/e2h5ZHJhdGU6ITB9OnZvaWQgMCl9XG5mdW5jdGlvbiB0ayhhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPW1rKGcpO2guY2FsbChhKX19bGsoYixnLGEsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1zayhjLGQpO2c9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtrLmNhbGwoYSl9fVhqKGZ1bmN0aW9uKCl7bGsoYixnLGEsZSl9KX1yZXR1cm4gbWsoZyl9ZWM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKTtKZyhhLDQsYik7b2soYSw0KX19O2ZjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw2NzEwODg2NCxiKTtvayhhLDY3MTA4ODY0KX19O1xuZ2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKSxjPUlnKGEpO0pnKGEsYyxiKTtvayhhLGMpfX07aGM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYigpfTtcbnliPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6YWIoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPURiKGQpO2lmKCFlKXRocm93IEVycm9yKHkoOTApKTtXYShkKTthYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmZiKGEsISFjLm11bHRpcGxlLGIsITEpfX07R2I9V2o7XG5IYj1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVg7WHw9NDt0cnl7cmV0dXJuIGdnKDk4LGEuYmluZChudWxsLGIsYyxkLGUpKX1maW5hbGx5e1g9ZiwwPT09WCYmKHdqKCksaWcoKSl9fTtJYj1mdW5jdGlvbigpezA9PT0oWCY0OSkmJihWaigpLE9qKCkpfTtKYj1mdW5jdGlvbihhLGIpe3ZhciBjPVg7WHw9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX07ZnVuY3Rpb24gdWsoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4ga2soYSxiLG51bGwsYyl9dmFyIHZrPXtFdmVudHM6W0NiLHVlLERiLEViLEZiLE9qLHtjdXJyZW50OiExfV19LHdrPXtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp3YyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE3LjAuMVwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn07XG52YXIgeGs9e2J1bmRsZVR5cGU6d2suYnVuZGxlVHlwZSx2ZXJzaW9uOndrLnZlcnNpb24scmVuZGVyZXJQYWNrYWdlTmFtZTp3ay5yZW5kZXJlclBhY2thZ2VOYW1lLHJlbmRlcmVyQ29uZmlnOndrLnJlbmRlcmVyQ29uZmlnLG92ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLG92ZXJyaWRlUHJvcHNEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGg6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOnJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1jYyhhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2suZmluZEZpYmVyQnlIb3N0SW5zdGFuY2V8fFxucGssZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciB5az1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIXlrLmlzRGlzYWJsZWQmJnlrLnN1cHBvcnRzRmliZXIpdHJ5e0xmPXlrLmluamVjdCh4ayksTWY9eWt9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXZrO2V4cG9ydHMuY3JlYXRlUG9ydGFsPXVrO1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcih5KDE4OCkpO3Rocm93IEVycm9yKHkoMjY4LE9iamVjdC5rZXlzKGEpKSk7fWE9Y2MoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtleHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhLGIpe3ZhciBjPVg7aWYoMCE9PShjJjQ4KSlyZXR1cm4gYShiKTtYfD0xO3RyeXtpZihhKXJldHVybiBnZyg5OSxhLmJpbmQobnVsbCxiKSl9ZmluYWxseXtYPWMsaWcoKX19O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCEwLGMpfTtcbmV4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4gdGsobnVsbCxhLGIsITEsYyl9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighcmsoYSkpdGhyb3cgRXJyb3IoeSg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFhqKGZ1bmN0aW9uKCl7dGsobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW2ZmXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9V2o7ZXhwb3J0cy51bnN0YWJsZV9jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdWsoYSxiLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsKX07XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFyayhjKSl0aHJvdyBFcnJvcih5KDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxzKXRocm93IEVycm9yKHkoMzgpKTtyZXR1cm4gdGsoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMVwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9cblN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx0PWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsdj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSx3PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4LHk9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7XG5mdW5jdGlvbiB6KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSB0OmNhc2UgcjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24gQShhKXtyZXR1cm4geihhKT09PW19ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO1xuZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiBBKGEpfHx6KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPUE7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ofTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXR9O1xuZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1wfTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT13fHxhLiQkdHlwZW9mPT09eHx8YS4kJHR5cGVvZj09PXl8fGEuJCR0eXBlb2Y9PT12KX07ZXhwb3J0cy50eXBlT2Y9ejtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucywgb3B0aW9ucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnLCBmbGFncyhvcHRpb25zKSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4xXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj02MDEwMyxwPTYwMTA2O2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7ZXhwb3J0cy5TdHJpY3RNb2RlPTYwMTA4O2V4cG9ydHMuUHJvZmlsZXI9NjAxMTQ7dmFyIHE9NjAxMDkscj02MDExMCx0PTYwMTEyO2V4cG9ydHMuU3VzcGVuc2U9NjAxMTM7dmFyIHU9NjAxMTUsdj02MDExNjtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciB3PVN5bWJvbC5mb3I7bj13KFwicmVhY3QuZWxlbWVudFwiKTtwPXcoXCJyZWFjdC5wb3J0YWxcIik7ZXhwb3J0cy5GcmFnbWVudD13KFwicmVhY3QuZnJhZ21lbnRcIik7ZXhwb3J0cy5TdHJpY3RNb2RlPXcoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtleHBvcnRzLlByb2ZpbGVyPXcoXCJyZWFjdC5wcm9maWxlclwiKTtxPXcoXCJyZWFjdC5wcm92aWRlclwiKTtyPXcoXCJyZWFjdC5jb250ZXh0XCIpO3Q9dyhcInJlYWN0LmZvcndhcmRfcmVmXCIpO2V4cG9ydHMuU3VzcGVuc2U9dyhcInJlYWN0LnN1c3BlbnNlXCIpO3U9dyhcInJlYWN0Lm1lbW9cIik7dj13KFwicmVhY3QubGF6eVwiKX12YXIgeD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiB5KGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT14JiZhW3hdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24geihhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBBPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxCPXt9O2Z1bmN0aW9uIEMoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX1DLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0MucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcih6KDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtDLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEQoKXt9RC5wcm90b3R5cGU9Qy5wcm90b3R5cGU7ZnVuY3Rpb24gRShhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfXZhciBGPUUucHJvdG90eXBlPW5ldyBEO0YuY29uc3RydWN0b3I9RTtsKEYsQy5wcm90b3R5cGUpO0YuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEc9e2N1cnJlbnQ6bnVsbH0sSD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEk9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEooYSxiLGMpe3ZhciBlLGQ9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSC5jYWxsKGIsZSkmJiFJLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWRbZV0mJihkW2VdPWdbZV0pO3JldHVybnskJHR5cGVvZjpuLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpkLF9vd25lcjpHLmN1cnJlbnR9fVxuZnVuY3Rpb24gSyhhLGIpe3JldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTChhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bn1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE09L1xcLysvZztmdW5jdGlvbiBOKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gTyhhLGIsYyxlLGQpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBuOmNhc2UgcDpoPSEwfX1pZihoKXJldHVybiBoPWEsZD1kKGgpLGE9XCJcIj09PWU/XCIuXCIrTihoLDApOmUsQXJyYXkuaXNBcnJheShkKT8oYz1cIlwiLG51bGwhPWEmJihjPWEucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSxPKGQsYixjLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9ZCYmKEwoZCkmJihkPUsoZCxjKyghZC5rZXl8fGgmJmgua2V5PT09ZC5rZXk/XCJcIjooXCJcIitkLmtleSkucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGQpKSwxO2g9MDtlPVwiXCI9PT1lP1wiLlwiOmUrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGc9XG4wO2c8YS5sZW5ndGg7ZysrKXtrPWFbZ107dmFyIGY9ZStOKGssZyk7aCs9TyhrLGIsYyxmLGQpfWVsc2UgaWYoZj15KGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1lK04oayxnKyspLGgrPU8oayxiLGMsZixkKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9XCJcIithLEVycm9yKHooMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO3JldHVybiBofWZ1bmN0aW9uIFAoYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W10sZD0wO08oYSxlLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGMsYSxkKyspfSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBRKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7YS5fc3RhdHVzPTA7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQ7dGhyb3cgYS5fcmVzdWx0O312YXIgUj17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBTKCl7dmFyIGE9Ui5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKHooMzIxKSk7cmV0dXJuIGF9dmFyIFQ9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6UixSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7dHJhbnNpdGlvbjowfSxSZWFjdEN1cnJlbnRPd25lcjpHLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07XG5leHBvcnRzLkNoaWxkcmVuPXttYXA6UCxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtQKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sYyl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UChhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFAoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTChhKSl0aHJvdyBFcnJvcih6KDE0MykpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9QztleHBvcnRzLlB1cmVDb21wb25lbnQ9RTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVQ7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoeigyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Ry5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilILmNhbGwoYixmKSYmIUkuaGFzT3duUHJvcGVydHkoZikmJihlW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO2Zvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6ayxwcm9wczplLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6cixfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnEsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PUo7ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPUouYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnQscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PUw7XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYsX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpRfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnUsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMVwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4yMC4xXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBmLGcsaCxrO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBsPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIGwubm93KCl9fWVsc2V7dmFyIHA9RGF0ZSxxPXAubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gcC5ub3coKS1xfX1cbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciB0PW51bGwsdT1udWxsLHc9ZnVuY3Rpb24oKXtpZihudWxsIT09dCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0KCEwLGEpO3Q9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHcsMCksYjt9fTtmPWZ1bmN0aW9uKGEpe251bGwhPT10P3NldFRpbWVvdXQoZiwwLGEpOih0PWEsc2V0VGltZW91dCh3LDApKX07Zz1mdW5jdGlvbihhLGIpe3U9c2V0VGltZW91dChhLGIpfTtoPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHUpfTtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2s9ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgeD13aW5kb3cuc2V0VGltZW91dCx5PXdpbmRvdy5jbGVhclRpbWVvdXQ7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlKXt2YXIgej1cbndpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvcmVhY3QtcG9seWZpbGxzXCIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB6JiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKX12YXIgQT0hMSxCPW51bGwsQz0tMSxEPTUsRT0wO2V4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49XG5FfTtrPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lIHJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHN1cHBvcnRlZFwiKTpEPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgRj1uZXcgTWVzc2FnZUNoYW5uZWwsRz1GLnBvcnQyO0YucG9ydDEub25tZXNzYWdlPWZ1bmN0aW9uKCl7aWYobnVsbCE9PUIpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7RT1hK0Q7dHJ5e0IoITAsYSk/Ry5wb3N0TWVzc2FnZShudWxsKTooQT0hMSxCPW51bGwpfWNhdGNoKGIpe3Rocm93IEcucG9zdE1lc3NhZ2UobnVsbCksYjt9fWVsc2UgQT0hMX07Zj1mdW5jdGlvbihhKXtCPWE7QXx8KEE9ITAsRy5wb3N0TWVzc2FnZShudWxsKSl9O2c9ZnVuY3Rpb24oYSxiKXtDPVxueChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eShDKTtDPS0xfX1mdW5jdGlvbiBIKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEkoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEooYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIEsoYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SShuLGMpKXZvaWQgMCE9PXImJjA+SShyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SShyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSShhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTD1bXSxNPVtdLE49MSxPPW51bGwsUD0zLFE9ITEsUj0hMSxTPSExO1xuZnVuY3Rpb24gVChhKXtmb3IodmFyIGI9SihNKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKUsoTSk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlLKE0pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSChMLGIpO2Vsc2UgYnJlYWs7Yj1KKE0pfX1mdW5jdGlvbiBVKGEpe1M9ITE7VChhKTtpZighUilpZihudWxsIT09SihMKSlSPSEwLGYoVik7ZWxzZXt2YXIgYj1KKE0pO251bGwhPT1iJiZnKFUsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gVihhLGIpe1I9ITE7UyYmKFM9ITEsaCgpKTtRPSEwO3ZhciBjPVA7dHJ5e1QoYik7Zm9yKE89SihMKTtudWxsIT09TyYmKCEoTy5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQoKSk7KXt2YXIgZD1PLmNhbGxiYWNrO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXtPLmNhbGxiYWNrPW51bGw7UD1PLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChPLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/Ty5jYWxsYmFjaz1lOk89PT1KKEwpJiZLKEwpO1QoYil9ZWxzZSBLKEwpO089SihMKX1pZihudWxsIT09Tyl2YXIgbT0hMDtlbHNle3ZhciBuPUooTSk7bnVsbCE9PW4mJmcoVSxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7Tz1udWxsLFA9YyxRPSExfX12YXIgVz1rO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7XG5leHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1J8fFF8fChSPSEwLGYoVikpfTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFB9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gSihMKX07XG5leHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFApe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVB9dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtQPWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1XO2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UDtQPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtQPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6TisrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsSChNLGEpLG51bGw9PT1KKEwpJiZhPT09SihNKSYmKFM/aCgpOlM9ITAsZyhVLGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxIKEwsYSksUnx8UXx8KFI9ITAsZihWKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1A9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gbW9kdWxlWydkZWZhdWx0J10gOlxuXHRcdCgpID0+IG1vZHVsZTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59IiwiZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRobmFtZSkge1xuICByZXR1cm4gcGF0aG5hbWUuY2hhckF0KDApID09PSAnLyc7XG59XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKVxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSkge1xuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICB9XG5cbiAgbGlzdC5wb3AoKTtcbn1cblxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBoZWF2aWx5IG9uIG5vZGUncyB1cmwucGFyc2VcbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZSh0bywgZnJvbSkge1xuICBpZiAoZnJvbSA9PT0gdW5kZWZpbmVkKSBmcm9tID0gJyc7XG5cbiAgdmFyIHRvUGFydHMgPSAodG8gJiYgdG8uc3BsaXQoJy8nKSkgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSAoZnJvbSAmJiBmcm9tLnNwbGl0KCcvJykpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2g7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkgZnJvbVBhcnRzLnVuc2hpZnQoJy4uJyk7XG5cbiAgaWYgKFxuICAgIG11c3RFbmRBYnMgJiZcbiAgICBmcm9tUGFydHNbMF0gIT09ICcnICYmXG4gICAgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSlcbiAgKVxuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTtcbiIsInZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHByZWZpeCA9ICdJbnZhcmlhbnQgZmFpbGVkJztcbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCArIFwiOiBcIiArIChtZXNzYWdlIHx8ICcnKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGludmFyaWFudDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBwYXRoLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihwcmVmaXgudG9Mb3dlckNhc2UoKSkgPT09IDAgJiYgJy8/IycuaW5kZXhPZihwYXRoLmNoYXJBdChwcmVmaXgubGVuZ3RoKSkgIT09IC0xO1xufVxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcblxuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuXG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb247XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59XG5mdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJykgOiB2b2lkIDA7XG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpIDogdm9pZCAwO1xuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5cbmZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IF9wcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG52YXIgSGFzaENoYW5nZUV2ZW50JDEgPSAnaGFzaGNoYW5nZSc7XG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RyaXBIYXNoKHVybCkge1xuICB2YXIgaGFzaEluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyB1cmwgOiB1cmwuc2xpY2UoMCwgaGFzaEluZGV4KTtcbn1cblxuZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59XG5cbmZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uoc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKSArICcjJyArIHBhdGgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBfcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdm9pZCAwID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbCQkMShhLCBiKSB7XG4gICAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwkJDEocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9IC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuXG5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICB2YXIgYmFzZVRhZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcbiAgICB2YXIgaHJlZiA9ICcnO1xuXG4gICAgaWYgKGJhc2VUYWcgJiYgYmFzZVRhZy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkge1xuICAgICAgaHJlZiA9IHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhyZWYgKyAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJykgOiB2b2lkIDA7XG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJykgOiB2b2lkIDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IF9wcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB2b2lkIDAgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBfcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuXG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIHBhcnNlUGF0aCwgY3JlYXRlUGF0aCB9O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDoge307XG5cbmZ1bmN0aW9uIGdldFVuaXF1ZUlkKCkge1xuICB2YXIga2V5ID0gJ19fZ2xvYmFsX3VuaXF1ZV9pZF9fJztcbiAgcmV0dXJuIGNvbW1vbmpzR2xvYmFsW2tleV0gPSAoY29tbW9uanNHbG9iYWxba2V5XSB8fCAwKSArIDE7XG59XG5cbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArIGdldFVuaXF1ZUlkKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuZW1pdHRlciA9IGNyZWF0ZUV2ZW50RW1pdHRlcihfdGhpcy5wcm9wcy52YWx1ZSk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFByb3ZpZGVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltjb250ZXh0UHJvcF0gPSB0aGlzLmVtaXR0ZXIsIF9yZWY7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gbmV4dFByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgY2hhbmdlZEJpdHM7XG5cbiAgICAgICAgaWYgKG9iamVjdElzKG9sZFZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicgPyBjYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSwgbmV3VmFsdWUpIDogTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoKGNoYW5nZWRCaXRzICYgTUFYX1NJR05FRF8zMV9CSVRfSU5UKSA9PT0gY2hhbmdlZEJpdHMsICdjYWxjdWxhdGVDaGFuZ2VkQml0czogRXhwZWN0ZWQgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBhICcgKyAnMzEtYml0IGludGVnZXIuIEluc3RlYWQgcmVjZWl2ZWQ6ICcgKyBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZEJpdHMgfD0gMDtcblxuICAgICAgICAgIGlmIChjaGFuZ2VkQml0cyAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnNldChuZXh0UHJvcHMudmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICB2YXIgQ29uc3VtZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX3RoaXMyID0gX0NvbXBvbmVudDIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH07XG5cbiAgICAgIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuXG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8yID0gQ29uc3VtZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG52YXIgaW5kZXggPSBSZWFjdC5jcmVhdGVDb250ZXh0IHx8IGNyZWF0ZVJlYWN0Q29udGV4dDtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgY3JlYXRlUGF0aCB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBjcmVhdGVDb250ZXh0IGZyb20gJ21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gJ3BhdGgtdG8tcmVnZXhwJztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuXG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5cbnZhciBjcmVhdGVOYW1lZENvbnRleHQgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZENvbnRleHQobmFtZSkge1xuICB2YXIgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxudmFyIGhpc3RvcnlDb250ZXh0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU5hbWVkQ29udGV4dChcIlJvdXRlci1IaXN0b3J5XCIpO1xuXG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5cbnZhciBjcmVhdGVOYW1lZENvbnRleHQkMSA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkQ29udGV4dChuYW1lKSB7XG4gIHZhciBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG52YXIgY29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVOYW1lZENvbnRleHQkMShcIlJvdXRlclwiKTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cblxudmFyIFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIFJvdXRlci5jb21wdXRlUm9vdE1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZVJvb3RNYXRjaChwYXRobmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBcIi9cIixcbiAgICAgIHVybDogXCIvXCIsXG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgaXNFeGFjdDogcGF0aG5hbWUgPT09IFwiL1wiXG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBSb3V0ZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvY2F0aW9uOiBwcm9wcy5oaXN0b3J5LmxvY2F0aW9uXG4gICAgfTsgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2suIFdlIGhhdmUgdG8gc3RhcnQgbGlzdGVuaW5nIGZvciBsb2NhdGlvblxuICAgIC8vIGNoYW5nZXMgaGVyZSBpbiB0aGUgY29uc3RydWN0b3IgaW4gY2FzZSB0aGVyZSBhcmUgYW55IDxSZWRpcmVjdD5zXG4gICAgLy8gb24gdGhlIGluaXRpYWwgcmVuZGVyLiBJZiB0aGVyZSBhcmUsIHRoZXkgd2lsbCByZXBsYWNlL3B1c2ggd2hlblxuICAgIC8vIHRoZXkgbW91bnQgYW5kIHNpbmNlIGNETSBmaXJlcyBpbiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cywgd2UgbWF5XG4gICAgLy8gZ2V0IGEgbmV3IGxvY2F0aW9uIGJlZm9yZSB0aGUgPFJvdXRlcj4gaXMgbW91bnRlZC5cblxuICAgIF90aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcblxuICAgIGlmICghcHJvcHMuc3RhdGljQ29udGV4dCkge1xuICAgICAgX3RoaXMudW5saXN0ZW4gPSBwcm9wcy5oaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgaWYgKF90aGlzLl9pc01vdW50ZWQpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbG9jYXRpb247XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5fcGVuZGluZ0xvY2F0aW9uKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbG9jYXRpb246IHRoaXMuX3BlbmRpbmdMb2NhdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnVubGlzdGVuKSB0aGlzLnVubGlzdGVuKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZToge1xuICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLnN0YXRlLmxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogUm91dGVyLmNvbXB1dGVSb290TWF0Y2godGhpcy5zdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSksXG4gICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuc3RhdGljQ29udGV4dFxuICAgICAgfVxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoaGlzdG9yeUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIHx8IG51bGwsXG4gICAgICB2YWx1ZTogdGhpcy5wcm9wcy5oaXN0b3J5XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByZXZQcm9wcy5oaXN0b3J5ID09PSB0aGlzLnByb3BzLmhpc3RvcnksIFwiWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHN0b3JlcyBsb2NhdGlvbiBpbiBtZW1vcnkuXG4gKi9cblxudmFyIE1lbW9yeVJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNZW1vcnlSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbW9yeVJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlTWVtb3J5SGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1lbW9yeVJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBNZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciBMaWZlY3ljbGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGlmZWN5Y2xlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaWZlY3ljbGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExpZmVjeWNsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VudCkgdGhpcy5wcm9wcy5vbk1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVwZGF0ZSkgdGhpcy5wcm9wcy5vblVwZGF0ZS5jYWxsKHRoaXMsIHRoaXMsIHByZXZQcm9wcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Vbm1vdW50KSB0aGlzLnByb3BzLm9uVW5tb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIExpZmVjeWNsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXkgZnJvbSBhIHNjcmVlbi5cbiAqL1xuXG5mdW5jdGlvbiBQcm9tcHQoX3JlZikge1xuICB2YXIgbWVzc2FnZSA9IF9yZWYubWVzc2FnZSxcbiAgICAgIF9yZWYkd2hlbiA9IF9yZWYud2hlbixcbiAgICAgIHdoZW4gPSBfcmVmJHdoZW4gPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJHdoZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgaWYgKCF3aGVuIHx8IGNvbnRleHQuc3RhdGljQ29udGV4dCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1ldGhvZCA9IGNvbnRleHQuaGlzdG9yeS5ibG9jaztcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICBpZiAocHJldlByb3BzLm1lc3NhZ2UgIT09IG1lc3NhZ2UpIHtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblVubW91bnQ6IGZ1bmN0aW9uIG9uVW5tb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgfSxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIG1lc3NhZ2VUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zdHJpbmddKTtcbiAgUHJvbXB0LnByb3BUeXBlcyA9IHtcbiAgICB3aGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBtZXNzYWdlOiBtZXNzYWdlVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0aCkge1xuICBpZiAoY2FjaGVbcGF0aF0pIHJldHVybiBjYWNoZVtwYXRoXTtcbiAgdmFyIGdlbmVyYXRvciA9IHBhdGhUb1JlZ2V4cC5jb21waWxlKHBhdGgpO1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIGNhY2hlW3BhdGhdID0gZ2VuZXJhdG9yO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBnZW5lcmF0b3I7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIGdlbmVyYXRpbmcgYSBVUkwgcGF0aG5hbWUgZnJvbSBhIHBhdGggYW5kIHBhcmFtZXRlcnMuXG4gKi9cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgocGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXRoID0gXCIvXCI7XG4gIH1cblxuICBpZiAocGFyYW1zID09PSB2b2lkIDApIHtcbiAgICBwYXJhbXMgPSB7fTtcbiAgfVxuXG4gIHJldHVybiBwYXRoID09PSBcIi9cIiA/IHBhdGggOiBjb21waWxlUGF0aChwYXRoKShwYXJhbXMsIHtcbiAgICBwcmV0dHk6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG5hdmlnYXRpbmcgcHJvZ3JhbW1hdGljYWxseSB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbmZ1bmN0aW9uIFJlZGlyZWN0KF9yZWYpIHtcbiAgdmFyIGNvbXB1dGVkTWF0Y2ggPSBfcmVmLmNvbXB1dGVkTWF0Y2gsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBfcmVmJHB1c2ggPSBfcmVmLnB1c2gsXG4gICAgICBwdXNoID0gX3JlZiRwdXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkcHVzaDtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dC5oaXN0b3J5LFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gY29udGV4dC5zdGF0aWNDb250ZXh0O1xuICAgIHZhciBtZXRob2QgPSBwdXNoID8gaGlzdG9yeS5wdXNoIDogaGlzdG9yeS5yZXBsYWNlO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGNvbXB1dGVkTWF0Y2ggPyB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBnZW5lcmF0ZVBhdGgodG8sIGNvbXB1dGVkTWF0Y2gucGFyYW1zKSA6IF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgfSkgOiB0byk7IC8vIFdoZW4gcmVuZGVyaW5nIGluIGEgc3RhdGljIGNvbnRleHQsXG4gICAgLy8gc2V0IHRoZSBuZXcgbG9jYXRpb24gaW1tZWRpYXRlbHkuXG5cbiAgICBpZiAoc3RhdGljQ29udGV4dCkge1xuICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudCgpIHtcbiAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwcmV2UHJvcHMudG8pO1xuXG4gICAgICAgIGlmICghbG9jYXRpb25zQXJlRXF1YWwocHJldkxvY2F0aW9uLCBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICAgICAgICBrZXk6IHByZXZMb2NhdGlvbi5rZXlcbiAgICAgICAgfSkpKSB7XG4gICAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRvOiB0b1xuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSZWRpcmVjdC5wcm9wVHlwZXMgPSB7XG4gICAgcHVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlJDEgPSB7fTtcbnZhciBjYWNoZUxpbWl0JDEgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50JDEgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aCQxKHBhdGgsIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gXCJcIiArIG9wdGlvbnMuZW5kICsgb3B0aW9ucy5zdHJpY3QgKyBvcHRpb25zLnNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhDYWNoZSA9IGNhY2hlJDFbY2FjaGVLZXldIHx8IChjYWNoZSQxW2NhY2hlS2V5XSA9IHt9KTtcbiAgaWYgKHBhdGhDYWNoZVtwYXRoXSkgcmV0dXJuIHBhdGhDYWNoZVtwYXRoXTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlZ2V4cCA9IHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICByZWdleHA6IHJlZ2V4cCxcbiAgICBrZXlzOiBrZXlzXG4gIH07XG5cbiAgaWYgKGNhY2hlQ291bnQkMSA8IGNhY2hlTGltaXQkMSkge1xuICAgIHBhdGhDYWNoZVtwYXRoXSA9IHJlc3VsdDtcbiAgICBjYWNoZUNvdW50JDErKztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgVVJMIHBhdGhuYW1lIHRvIGEgcGF0aC5cbiAqL1xuXG5cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcbiAgICBvcHRpb25zID0ge1xuICAgICAgcGF0aDogb3B0aW9uc1xuICAgIH07XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGF0aCA9IF9vcHRpb25zLnBhdGgsXG4gICAgICBfb3B0aW9ucyRleGFjdCA9IF9vcHRpb25zLmV4YWN0LFxuICAgICAgZXhhY3QgPSBfb3B0aW9ucyRleGFjdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRleGFjdCxcbiAgICAgIF9vcHRpb25zJHN0cmljdCA9IF9vcHRpb25zLnN0cmljdCxcbiAgICAgIHN0cmljdCA9IF9vcHRpb25zJHN0cmljdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzdHJpY3QsXG4gICAgICBfb3B0aW9ucyRzZW5zaXRpdmUgPSBfb3B0aW9ucy5zZW5zaXRpdmUsXG4gICAgICBzZW5zaXRpdmUgPSBfb3B0aW9ucyRzZW5zaXRpdmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc2Vuc2l0aXZlO1xuICB2YXIgcGF0aHMgPSBbXS5jb25jYXQocGF0aCk7XG4gIHJldHVybiBwYXRocy5yZWR1Y2UoZnVuY3Rpb24gKG1hdGNoZWQsIHBhdGgpIHtcbiAgICBpZiAoIXBhdGggJiYgcGF0aCAhPT0gXCJcIikgcmV0dXJuIG51bGw7XG4gICAgaWYgKG1hdGNoZWQpIHJldHVybiBtYXRjaGVkO1xuXG4gICAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoJDEocGF0aCwge1xuICAgICAgZW5kOiBleGFjdCxcbiAgICAgIHN0cmljdDogc3RyaWN0LFxuICAgICAgc2Vuc2l0aXZlOiBzZW5zaXRpdmVcbiAgICB9KSxcbiAgICAgICAgcmVnZXhwID0gX2NvbXBpbGVQYXRoLnJlZ2V4cCxcbiAgICAgICAga2V5cyA9IF9jb21waWxlUGF0aC5rZXlzO1xuXG4gICAgdmFyIG1hdGNoID0gcmVnZXhwLmV4ZWMocGF0aG5hbWUpO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgIHZhciB1cmwgPSBtYXRjaFswXSxcbiAgICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG4gICAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuICAgIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAvLyB0aGUgcGF0aCB1c2VkIHRvIG1hdGNoXG4gICAgICB1cmw6IHBhdGggPT09IFwiL1wiICYmIHVybCA9PT0gXCJcIiA/IFwiL1wiIDogdXJsLFxuICAgICAgLy8gdGhlIG1hdGNoZWQgcG9ydGlvbiBvZiB0aGUgVVJMXG4gICAgICBpc0V4YWN0OiBpc0V4YWN0LFxuICAgICAgLy8gd2hldGhlciBvciBub3Qgd2UgbWF0Y2hlZCBleGFjdGx5XG4gICAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9LCB7fSlcbiAgICB9O1xuICB9LCBudWxsKTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIHBhdGgpIHtcbiAgdmFyIHZhbHVlID0gY2hpbGRyZW4ocHJvcHMpO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHZhbHVlICE9PSB1bmRlZmluZWQsIFwiWW91IHJldHVybmVkIGB1bmRlZmluZWRgIGZyb20gdGhlIGBjaGlsZHJlbmAgZnVuY3Rpb24gb2YgXCIgKyAoXCI8Um91dGVcIiArIChwYXRoID8gXCIgcGF0aD1cXFwiXCIgKyBwYXRoICsgXCJcXFwiXCIgOiBcIlwiKSArIFwiPiwgYnV0IHlvdSBcIikgKyBcInNob3VsZCBoYXZlIHJldHVybmVkIGEgUmVhY3QgZWxlbWVudCBvciBgbnVsbGBcIikgOiB2b2lkIDA7XG4gIHJldHVybiB2YWx1ZSB8fCBudWxsO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5cblxudmFyIFJvdXRlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0JDEpIHtcbiAgICAgICFjb250ZXh0JDEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQkMS5sb2NhdGlvbjtcbiAgICAgIHZhciBtYXRjaCA9IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggPyBfdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoIC8vIDxTd2l0Y2g+IGFscmVhZHkgY29tcHV0ZWQgdGhlIG1hdGNoIGZvciB1c1xuICAgICAgOiBfdGhpcy5wcm9wcy5wYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfdGhpcy5wcm9wcykgOiBjb250ZXh0JDEubWF0Y2g7XG5cbiAgICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCBjb250ZXh0JDEsIHtcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogbWF0Y2hcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgICByZW5kZXIgPSBfdGhpcyRwcm9wcy5yZW5kZXI7IC8vIFByZWFjdCB1c2VzIGFuIGVtcHR5IGFycmF5IGFzIGNoaWxkcmVuIGJ5XG4gICAgICAvLyBkZWZhdWx0LCBzbyB1c2UgbnVsbCBpZiB0aGF0J3MgdGhlIGNhc2UuXG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9wc1xuICAgICAgfSwgcHJvcHMubWF0Y2ggPyBjaGlsZHJlbiA/IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgX3RoaXMucHJvcHMucGF0aCkgOiBjaGlsZHJlbihwcm9wcykgOiBjaGlsZHJlbiA6IGNvbXBvbmVudCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykgOiByZW5kZXIgPyByZW5kZXIocHJvcHMpIDogbnVsbCA6IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgX3RoaXMucHJvcHMucGF0aCkgOiBjaGlsZHJlbihwcm9wcykgOiBudWxsKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUm91dGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGUucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudChwcm9wcywgcHJvcE5hbWUpIHtcbiAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gJiYgIWlzVmFsaWRFbGVtZW50VHlwZShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3AgJ2NvbXBvbmVudCcgc3VwcGxpZWQgdG8gJ1JvdXRlJzogdGhlIHByb3AgaXMgbm90IGEgdmFsaWQgUmVhY3QgY29tcG9uZW50XCIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHBhdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpXSksXG4gICAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2xcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJiB0aGlzLnByb3BzLmNvbXBvbmVudCksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY29tcG9uZW50PiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSByZW5kZXI+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSByZW5kZXI+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09IFwiL1wiID8gcGF0aCA6IFwiL1wiICsgcGF0aDtcbn1cblxuZnVuY3Rpb24gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpICsgbG9jYXRpb24ucGF0aG5hbWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcbiAgdmFyIGJhc2UgPSBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpO1xuICBpZiAobG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihiYXNlKSAhPT0gMCkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cihiYXNlLmxlbmd0aClcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVSTChsb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIGxvY2F0aW9uID09PSBcInN0cmluZ1wiID8gbG9jYXRpb24gOiBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbn1cblxuZnVuY3Rpb24gc3RhdGljSGFuZGxlcihtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj5cIiwgbWV0aG9kTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG4vKipcbiAqIFRoZSBwdWJsaWMgdG9wLWxldmVsIEFQSSBmb3IgYSBcInN0YXRpY1wiIDxSb3V0ZXI+LCBzby1jYWxsZWQgYmVjYXVzZSBpdFxuICogY2FuJ3QgYWN0dWFsbHkgY2hhbmdlIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBJbnN0ZWFkLCBpdCBqdXN0IHJlY29yZHNcbiAqIGxvY2F0aW9uIGNoYW5nZXMgaW4gYSBjb250ZXh0IG9iamVjdC4gVXNlZnVsIG1haW5seSBpbiB0ZXN0aW5nIGFuZFxuICogc2VydmVyLXJlbmRlcmluZyBzY2VuYXJpb3MuXG4gKi9cblxuXG52YXIgU3RhdGljUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFN0YXRpY1JvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3RhdGljUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuaGFuZGxlUHVzaCA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUFVTSFwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUmVwbGFjZSA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUkVQTEFDRVwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTGlzdGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJsb2NrID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdGF0aWNSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5uYXZpZ2F0ZVRvID0gZnVuY3Rpb24gbmF2aWdhdGVUbyhsb2NhdGlvbiwgYWN0aW9uKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMkYmFzZW5hbWUgPSBfdGhpcyRwcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wcyRjb250ZXh0ID0gX3RoaXMkcHJvcHMuY29udGV4dCxcbiAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMkY29udGV4dDtcbiAgICBjb250ZXh0LmFjdGlvbiA9IGFjdGlvbjtcbiAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzMiRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzMiRiYXNlbmFtZSxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGNvbnRleHQgPSBfdGhpcyRwcm9wczIuY29udGV4dCxcbiAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzMiRjb250ZXh0ID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzMiRjb250ZXh0LFxuICAgICAgICBfdGhpcyRwcm9wczIkbG9jYXRpb24gPSBfdGhpcyRwcm9wczIubG9jYXRpb24sXG4gICAgICAgIGxvY2F0aW9uID0gX3RoaXMkcHJvcHMyJGxvY2F0aW9uID09PSB2b2lkIDAgPyBcIi9cIiA6IF90aGlzJHByb3BzMiRsb2NhdGlvbixcbiAgICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzMiwgW1wiYmFzZW5hbWVcIiwgXCJjb250ZXh0XCIsIFwibG9jYXRpb25cIl0pO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB7XG4gICAgICBjcmVhdGVIcmVmOiBmdW5jdGlvbiBjcmVhdGVIcmVmKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSk7XG4gICAgICB9LFxuICAgICAgYWN0aW9uOiBcIlBPUFwiLFxuICAgICAgbG9jYXRpb246IHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSksXG4gICAgICBwdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICByZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBnbzogc3RhdGljSGFuZGxlcihcImdvXCIpLFxuICAgICAgZ29CYWNrOiBzdGF0aWNIYW5kbGVyKFwiZ29CYWNrXCIpLFxuICAgICAgZ29Gb3J3YXJkOiBzdGF0aWNIYW5kbGVyKFwiZ29Gb3J3YXJkXCIpLFxuICAgICAgbGlzdGVuOiB0aGlzLmhhbmRsZUxpc3RlbixcbiAgICAgIGJsb2NrOiB0aGlzLmhhbmRsZUJsb2NrXG4gICAgfTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBoaXN0b3J5OiBoaXN0b3J5LFxuICAgICAgc3RhdGljQ29udGV4dDogY29udGV4dFxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN3aXRjaC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dC5sb2NhdGlvbjtcbiAgICAgIHZhciBlbGVtZW50LCBtYXRjaDsgLy8gV2UgdXNlIFJlYWN0LkNoaWxkcmVuLmZvckVhY2ggaW5zdGVhZCBvZiBSZWFjdC5DaGlsZHJlbi50b0FycmF5KCkuZmluZCgpXG4gICAgICAvLyBoZXJlIGJlY2F1c2UgdG9BcnJheSBhZGRzIGtleXMgdG8gYWxsIGNoaWxkIGVsZW1lbnRzIGFuZCB3ZSBkbyBub3Qgd2FudFxuICAgICAgLy8gdG8gdHJpZ2dlciBhbiB1bm1vdW50L3JlbW91bnQgZm9yIHR3byA8Um91dGU+cyB0aGF0IHJlbmRlciB0aGUgc2FtZVxuICAgICAgLy8gY29tcG9uZW50IGF0IGRpZmZlcmVudCBVUkxzLlxuXG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKF90aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKG1hdGNoID09IG51bGwgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgICAgZWxlbWVudCA9IGNoaWxkO1xuICAgICAgICAgIHZhciBwYXRoID0gY2hpbGQucHJvcHMucGF0aCB8fCBjaGlsZC5wcm9wcy5mcm9tO1xuICAgICAgICAgIG1hdGNoID0gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX2V4dGVuZHMoe30sIGNoaWxkLnByb3BzLCB7XG4gICAgICAgICAgICBwYXRoOiBwYXRoXG4gICAgICAgICAgfSkpIDogY29udGV4dC5tYXRjaDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGNvbXB1dGVkTWF0Y2g6IG1hdGNoXG4gICAgICB9KSA6IG51bGw7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTd2l0Y2gucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xuXG5mdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgZGlzcGxheU5hbWUgPSBcIndpdGhSb3V0ZXIoXCIgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArIFwiKVwiO1xuXG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wid3JhcHBlZENvbXBvbmVudFJlZlwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxcIiArIGRpc3BsYXlOYW1lICsgXCIgLz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHJlbWFpbmluZ1Byb3BzLCBjb250ZXh0LCB7XG4gICAgICAgIHJlZjogd3JhcHBlZENvbXBvbmVudFJlZlxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9O1xuXG4gIEMuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgQy5XcmFwcGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBDLnByb3BUeXBlcyA9IHtcbiAgICAgIHdyYXBwZWRDb21wb25lbnRSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGhvaXN0U3RhdGljcyhDLCBDb21wb25lbnQpO1xufVxuXG52YXIgdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQ7XG5mdW5jdGlvbiB1c2VIaXN0b3J5KCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlSGlzdG9yeSgpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGhpc3RvcnlDb250ZXh0KTtcbn1cbmZ1bmN0aW9uIHVzZUxvY2F0aW9uKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlTG9jYXRpb24oKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KS5sb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIHVzZVBhcmFtcygpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVBhcmFtcygpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBtYXRjaCA9IHVzZUNvbnRleHQoY29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoLnBhcmFtcyA6IHt9O1xufVxuZnVuY3Rpb24gdXNlUm91dGVNYXRjaChwYXRoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VSb3V0ZU1hdGNoKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIHBhdGgpIDogbWF0Y2g7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgZ2xvYmFsID0gd2luZG93O1xuICAgIHZhciBrZXkgPSBcIl9fcmVhY3Rfcm91dGVyX2J1aWxkX19cIjtcbiAgICB2YXIgYnVpbGROYW1lcyA9IHtcbiAgICAgIGNqczogXCJDb21tb25KU1wiLFxuICAgICAgZXNtOiBcIkVTIG1vZHVsZXNcIixcbiAgICAgIHVtZDogXCJVTURcIlxuICAgIH07XG5cbiAgICBpZiAoZ2xvYmFsW2tleV0gJiYgZ2xvYmFsW2tleV0gIT09IFwiZXNtXCIpIHtcbiAgICAgIHZhciBpbml0aWFsQnVpbGROYW1lID0gYnVpbGROYW1lc1tnbG9iYWxba2V5XV07XG4gICAgICB2YXIgc2Vjb25kYXJ5QnVpbGROYW1lID0gYnVpbGROYW1lc1tcImVzbVwiXTsgLy8gVE9ETzogQWRkIGxpbmsgdG8gYXJ0aWNsZSB0aGF0IGV4cGxhaW5zIGluIGRldGFpbCBob3cgdG8gYXZvaWRcbiAgICAgIC8vIGxvYWRpbmcgMiBkaWZmZXJlbnQgYnVpbGRzLlxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGxvYWRpbmcgdGhlIFwiICsgc2Vjb25kYXJ5QnVpbGROYW1lICsgXCIgYnVpbGQgb2YgUmVhY3QgUm91dGVyIFwiICsgKFwib24gYSBwYWdlIHRoYXQgaXMgYWxyZWFkeSBydW5uaW5nIHRoZSBcIiArIGluaXRpYWxCdWlsZE5hbWUgKyBcIiBcIikgKyBcImJ1aWxkLCBzbyB0aGluZ3Mgd29uJ3Qgd29yayByaWdodC5cIik7XG4gICAgfVxuXG4gICAgZ2xvYmFsW2tleV0gPSBcImVzbVwiO1xuICB9XG59XG5cbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGhpc3RvcnlDb250ZXh0IGFzIF9fSGlzdG9yeUNvbnRleHQsIGNvbnRleHQgYXMgX19Sb3V0ZXJDb250ZXh0LCBnZW5lcmF0ZVBhdGgsIG1hdGNoUGF0aCwgdXNlSGlzdG9yeSwgdXNlTG9jYXRpb24sIHVzZVBhcmFtcywgdXNlUm91dGVNYXRjaCwgd2l0aFJvdXRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3Qtcm91dGVyLmpzLm1hcFxuIiwiaW1wb3J0IHsgUm91dGVyLCBfX1JvdXRlckNvbnRleHQsIG1hdGNoUGF0aCB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIFByb21wdCwgUmVkaXJlY3QsIFJvdXRlLCBSb3V0ZXIsIFN0YXRpY1JvdXRlciwgU3dpdGNoLCBnZW5lcmF0ZVBhdGgsIG1hdGNoUGF0aCwgdXNlSGlzdG9yeSwgdXNlTG9jYXRpb24sIHVzZVBhcmFtcywgdXNlUm91dGVNYXRjaCwgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgSFRNTDUgaGlzdG9yeS5cbiAqL1xuXG52YXIgQnJvd3NlclJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShCcm93c2VyUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCcm93c2VyUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVCcm93c2VySGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBCcm93c2VyUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBmb3JjZVJlZnJlc2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlclxuICB9O1xuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cblxudmFyIEhhc2hSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSGFzaFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGFzaFJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGFzaEhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBIYXNoUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gSGFzaFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBIYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbXCJoYXNoYmFuZ1wiLCBcIm5vc2xhc2hcIiwgXCJzbGFzaFwiXSlcbiAgfTtcblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciByZXNvbHZlVG9Mb2NhdGlvbiA9IGZ1bmN0aW9uIHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJmdW5jdGlvblwiID8gdG8oY3VycmVudExvY2F0aW9uKSA6IHRvO1xufTtcbnZhciBub3JtYWxpemVUb0xvY2F0aW9uID0gZnVuY3Rpb24gbm9ybWFsaXplVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBjcmVhdGVMb2NhdGlvbih0bywgbnVsbCwgbnVsbCwgY3VycmVudExvY2F0aW9uKSA6IHRvO1xufTtcblxudmFyIGZvcndhcmRSZWZTaGltID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmID0gUmVhY3QuZm9yd2FyZFJlZjtcblxuaWYgKHR5cGVvZiBmb3J3YXJkUmVmID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYgPSBmb3J3YXJkUmVmU2hpbTtcbn1cblxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cblxudmFyIExpbmtBbmNob3IgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIG5hdmlnYXRlID0gX3JlZi5uYXZpZ2F0ZSxcbiAgICAgIF9vbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImlubmVyUmVmXCIsIFwibmF2aWdhdGVcIiwgXCJvbkNsaWNrXCJdKTtcblxuICB2YXIgdGFyZ2V0ID0gcmVzdC50YXJnZXQ7XG5cbiAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoX29uQ2xpY2spIF9vbkNsaWNrKGV2ZW50KTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRocm93IGV4O1xuICAgICAgfVxuXG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmICggLy8gaWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICAgICAhdGFyZ2V0IHx8IHRhcmdldCA9PT0gXCJfc2VsZlwiKSAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgbmF2aWdhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfSk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICB9IGVsc2Uge1xuICAgIHByb3BzLnJlZiA9IGlubmVyUmVmO1xuICB9XG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnQgKi9cblxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBwcm9wcyk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBMaW5rQW5jaG9yLmRpc3BsYXlOYW1lID0gXCJMaW5rQW5jaG9yXCI7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuXG5cbnZhciBMaW5rID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZjIsIGZvcndhcmRlZFJlZikge1xuICB2YXIgX3JlZjIkY29tcG9uZW50ID0gX3JlZjIuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3JlZjIkY29tcG9uZW50ID09PSB2b2lkIDAgPyBMaW5rQW5jaG9yIDogX3JlZjIkY29tcG9uZW50LFxuICAgICAgcmVwbGFjZSA9IF9yZWYyLnJlcGxhY2UsXG4gICAgICB0byA9IF9yZWYyLnRvLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmMi5pbm5lclJlZixcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiY29tcG9uZW50XCIsIFwicmVwbGFjZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3Rvcnk7XG4gICAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbiksIGNvbnRleHQubG9jYXRpb24pO1xuICAgIHZhciBocmVmID0gbG9jYXRpb24gPyBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pIDogXCJcIjtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBocmVmLFxuICAgICAgbmF2aWdhdGU6IGZ1bmN0aW9uIG5hdmlnYXRlKCkge1xuICAgICAgICB2YXIgbG9jYXRpb24gPSByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbik7XG4gICAgICAgIHZhciBtZXRob2QgPSByZXBsYWNlID8gaGlzdG9yeS5yZXBsYWNlIDogaGlzdG9yeS5wdXNoO1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfVxuICAgIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcyk7XG4gIH0pO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIHRvVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSk7XG4gIHZhciByZWZUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogUHJvcFR5cGVzLmFueVxuICB9KV0pO1xuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG4gIExpbmsucHJvcFR5cGVzID0ge1xuICAgIGlubmVyUmVmOiByZWZUeXBlLFxuICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIHJlcGxhY2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogdG9UeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGZvcndhcmRSZWZTaGltJDEgPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYkMSA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiQxID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYkMSA9IGZvcndhcmRSZWZTaGltJDE7XG59XG5cbmZ1bmN0aW9uIGpvaW5DbGFzc25hbWVzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NuYW1lcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBjbGFzc25hbWVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGNsYXNzbmFtZXMuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIGk7XG4gIH0pLmpvaW4oXCIgXCIpO1xufVxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuXG5cbnZhciBOYXZMaW5rID0gZm9yd2FyZFJlZiQxKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYkYXJpYUN1cnJlbnQgPSBfcmVmW1wiYXJpYS1jdXJyZW50XCJdLFxuICAgICAgYXJpYUN1cnJlbnQgPSBfcmVmJGFyaWFDdXJyZW50ID09PSB2b2lkIDAgPyBcInBhZ2VcIiA6IF9yZWYkYXJpYUN1cnJlbnQsXG4gICAgICBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZiRhY3RpdmVDbGFzc05hbWUgPT09IHZvaWQgMCA/IFwiYWN0aXZlXCIgOiBfcmVmJGFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIGlzQWN0aXZlUHJvcCA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBsb2NhdGlvblByb3AgPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgc2Vuc2l0aXZlID0gX3JlZi5zZW5zaXRpdmUsXG4gICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgIHN0eWxlUHJvcCA9IF9yZWYuc3R5bGUsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYXJpYS1jdXJyZW50XCIsIFwiYWN0aXZlQ2xhc3NOYW1lXCIsIFwiYWN0aXZlU3R5bGVcIiwgXCJjbGFzc05hbWVcIiwgXCJleGFjdFwiLCBcImlzQWN0aXZlXCIsIFwibG9jYXRpb25cIiwgXCJzZW5zaXRpdmVcIiwgXCJzdHJpY3RcIiwgXCJzdHlsZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPE5hdkxpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGN1cnJlbnRMb2NhdGlvbiA9IGxvY2F0aW9uUHJvcCB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgIHZhciB0b0xvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSwgY3VycmVudExvY2F0aW9uKTtcbiAgICB2YXIgcGF0aCA9IHRvTG9jYXRpb24ucGF0aG5hbWU7IC8vIFJlZ2V4IHRha2VuIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9waWxsYXJqcy9wYXRoLXRvLXJlZ2V4cC9ibG9iL21hc3Rlci9pbmRleC5qcyNMMjAyXG5cbiAgICB2YXIgZXNjYXBlZFBhdGggPSBwYXRoICYmIHBhdGgucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csIFwiXFxcXCQxXCIpO1xuICAgIHZhciBtYXRjaCA9IGVzY2FwZWRQYXRoID8gbWF0Y2hQYXRoKGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSwge1xuICAgICAgcGF0aDogZXNjYXBlZFBhdGgsXG4gICAgICBleGFjdDogZXhhY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZSxcbiAgICAgIHN0cmljdDogc3RyaWN0XG4gICAgfSkgOiBudWxsO1xuICAgIHZhciBpc0FjdGl2ZSA9ICEhKGlzQWN0aXZlUHJvcCA/IGlzQWN0aXZlUHJvcChtYXRjaCwgY3VycmVudExvY2F0aW9uKSA6IG1hdGNoKTtcbiAgICB2YXIgY2xhc3NOYW1lID0gaXNBY3RpdmUgPyBqb2luQ2xhc3NuYW1lcyhjbGFzc05hbWVQcm9wLCBhY3RpdmVDbGFzc05hbWUpIDogY2xhc3NOYW1lUHJvcDtcbiAgICB2YXIgc3R5bGUgPSBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZVByb3AsIHt9LCBhY3RpdmVTdHlsZSkgOiBzdHlsZVByb3A7XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudCB8fCBudWxsLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0bzogdG9Mb2NhdGlvblxuICAgIH0sIHJlc3QpOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltJDEgIT09IGZvcndhcmRSZWYkMSkge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIHByb3BzKTtcbiAgfSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG4gIHZhciBhcmlhQ3VycmVudFR5cGUgPSBQcm9wVHlwZXMub25lT2YoW1wicGFnZVwiLCBcInN0ZXBcIiwgXCJsb2NhdGlvblwiLCBcImRhdGVcIiwgXCJ0aW1lXCIsIFwidHJ1ZVwiXSk7XG4gIE5hdkxpbmsucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIExpbmsucHJvcFR5cGVzLCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRUeXBlLFxuICAgIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3RcbiAgfSk7XG59XG5cbmV4cG9ydCB7IEJyb3dzZXJSb3V0ZXIsIEhhc2hSb3V0ZXIsIExpbmssIE5hdkxpbmsgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci1kb20uanMubWFwXG4iLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvQHRlYW1zdXBlcmNlbGwvdHlwaW5ncy1mb3ItY3NzLW1vZHVsZXMtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbM10udXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanMhLi9oZWFkZXIuc2Nzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCBSZWFjdCwgeyBGQywgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9oZWFkZXIuc2Nzcyc7XG5cbmNvbnN0IEhlYWRlcjogRkMgPSAoKSA9PiB7XG4gICAgXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9eyBbc3R5bGVzLmhlYWRlciwgJ2Zvb3RlciddLmpvaW4oJyAnKSB9PlxuICAgICAgICAgICAgPHA+SGVhZGVyPC9wPlxuICAgICAgICA8L2Rpdj4gICAgICAgXG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEhlYWRlcjsiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvQHRlYW1zdXBlcmNlbGwvdHlwaW5ncy1mb3ItY3NzLW1vZHVsZXMtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbM10udXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanMhLi9mb290ZXIuc2Nzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCBSZWFjdCwgeyBGQywgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9mb290ZXIuc2Nzcyc7XG5cbmNvbnN0IEZvb3RlcjogRkMgPSAoKSA9PiB7XG4gICAgXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9eyBbc3R5bGVzLmZvb3RlciwgJ2Zvb3RlciddLmpvaW4oJyAnKSB9PlxuICAgICAgICAgICAgPHA+Rm9vdGVyPC9wPlxuICAgICAgICA8L2Rpdj4gICAgICBcbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRm9vdGVyOyIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdGVhbXN1cGVyY2VsbC90eXBpbmdzLWZvci1jc3MtbW9kdWxlcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2hvbWUuc2Nzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCBSZWFjdCwgeyBGQywgdXNlRWZmZWN0LCB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vaG9tZS5zY3NzJztcblxuaW50ZXJmYWNlIElPU0Z1bmMge1xuICAgIChhcmc6IHN0cmluZyk6IHZvaWRcbn1cblxuZGVjbGFyZSB2YXIgd2luZG93OiBXaW5kb3cgJiB0eXBlb2YgZ2xvYmFsVGhpcyAmIHtcbiAgICB3ZWJraXQ6IGFueSxcbiAgICBpT1NDYWxsRnVuY3Rpb246IElPU0Z1bmNcbn07XG5cbmNvbnN0IEhvbWU6IEZDID0gKCkgPT4ge1xuXG4gICAgY29uc3QgW3RleHQsIHNldFRleHRdID0gdXNlU3RhdGUoJ2lPU+iwg+eUqOaWueazleaUueWPmOaWh+acrCcpO1xuXG4gICAgZW51bSBNRVNTQUdFVFlQRSB7XG4gICAgICAgIGFsZXJ0LFxuICAgICAgICBjb25maXJtLFxuICAgICAgICBwcm9tcHRcbiAgICB9XG4gICAgXG4gICAgY29uc3Qgc2hvd01lc3NhZ2UgPSB1c2VDYWxsYmFjaygoZSwgdHlwZTogTUVTU0FHRVRZUEUpID0+IHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIE1FU1NBR0VUWVBFLmFsZXJ0OlxuICAgICAgICAgICAgICAgIGFsZXJ0KGAke2UudGFyZ2V0LmlubmVyVGV4dH1gKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgTUVTU0FHRVRZUEUuY29uZmlybTpcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlybShgJHtlLnRhcmdldC5pbm5lclRleHR9YCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZS50YXJnZXQuaW5uZXJUZXh0ICs9ICdPSyc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZS50YXJnZXQuaW5uZXJUZXh0ICs9ICdDYW5jZWwnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgTUVTU0FHRVRZUEUucHJvbXB0OlxuICAgICAgICAgICAgICAgIGxldCBpbnB1dFRleHQgPSBwcm9tcHQoYCR7ZS50YXJnZXQuaW5uZXJUZXh0fWApO1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dFRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoaW5wdXRUZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgIH0sIFtdKTtcblxuICAgIGNvbnN0IGdvdG9VUkwgPSB1c2VDYWxsYmFjaygodXJsKSA9PiB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsXG4gICAgfSwgW10pO1xuXG4gICAgY29uc3QgbWVzc2FnZUhhbmRsZXIgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIGxldCBwYXJhbWV0ZXJzID0ge1xuICAgICAgICAgICAgJ3N0YXR1cyc6ICdzdWNjZXNzJ1xuICAgICAgICB9O1xuICAgICAgICB3aW5kb3cud2Via2l0Lm1lc3NhZ2VIYW5kbGVycy5qc0Z1bmMucG9zdE1lc3NhZ2UocGFyYW1ldGVycyk7XG4gICAgfSwgW10pO1xuXG4gICAgY29uc3QgbWVzc2FnZUhhbmRsZXJXaXRoUmVwbHkgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIGxldCBwYXJhbWV0ZXJzID0ge1xuICAgICAgICAgICAgJ3N0YXR1cyc6ICdzdWNjZXNzJ1xuICAgICAgICB9O1xuICAgICAgICBsZXQgcHJvbWlzZSA9IHdpbmRvdy53ZWJraXQubWVzc2FnZUhhbmRsZXJzLmpzQ29uc29sZS5wb3N0TWVzc2FnZShwYXJhbWV0ZXJzKTtcbiAgICAgICAgcHJvbWlzZS50aGVuKChyZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgYWxlcnQocmVzdWx0KTtcbiAgICAgICAgfSkuY2F0Y2goKGVycjogYW55KSA9PiB7XG4gICAgICAgICAgICBhbGVydChlcnIpO1xuICAgICAgICB9KTtcbiAgICB9LCBbXSk7XG5cbiAgICBjb25zdCByZWxvYWQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIGxldCBwYXJhbWV0ZXJzID0ge1xuICAgICAgICAgICAgJ3N0YXR1cyc6ICdzdWNjZXNzJ1xuICAgICAgICB9O1xuICAgICAgICB3aW5kb3cud2Via2l0Lm1lc3NhZ2VIYW5kbGVycy5yZWxvYWQucG9zdE1lc3NhZ2UocGFyYW1ldGVycyk7XG4gICAgfSwgW10pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgd2luZG93LmlPU0NhbGxGdW5jdGlvbiA9IChhcmc6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgc2V0VGV4dChgaU9T6LCD55So5pa55rOV5pS55Y+Y5paH5pysOiR7YXJnfWApO1xuICAgICAgICB9O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9eyBzdHlsZXMuaG9tZSB9PlxuICAgICAgICAgICAgPHA+SG9tZXsgd2luZG93LmxvY2F0aW9uLmhhc2ggfTwvcD5cbiAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPXsgc3R5bGVzLmltZyB9IHNyYz1cImh0dHBzOi8vd3d3LmJhaWR1LmNvbS9pbWcvUEN0bV9kOWM4NzUwYmVkMGIzYzdkMDg5ZmE3ZDU1NzIwZDZjZi5wbmdcIiBvbkNsaWNrPXsgKCkgPT4gZ290b1VSTCgnaHR0cHM6Ly93d3cuYmFpZHUuY29tJykgfT48L2ltZz5cbiAgICAgICAgICAgIDxwPuWNj+iuruaLpuaIqjwvcD5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXsgc3R5bGVzLml0ZW1EaXYgfT5cbiAgICAgICAgICAgICAgICA8ZGl2IG9uQ2xpY2s9eygpID0+IGdvdG9VUkwoJ2pzVG9JT1M6Ly93d3cuYmFpZHUuY29tP25hbWU9dGR5JykgfT7ljY/orq7mi6bmiKrot7Povaw8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPHA+YFdLVUlEZWxlZ2F0ZWDljY/orq48L3A+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17IHN0eWxlcy5pdGVtRGl2IH0+XG4gICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXsgKGUpID0+IHNob3dNZXNzYWdlKGUsIE1FU1NBR0VUWVBFLmFsZXJ0KSB9PldLVUlEZWxlZ2F0ZeWNj+iuruaLpuaIqmFsZXJ0PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXsgKGUpID0+IHNob3dNZXNzYWdlKGUsIE1FU1NBR0VUWVBFLmNvbmZpcm0pIH0+V0tVSURlbGVnYXRl5Y2P6K6u5oum5oiqY29uZmlybTwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgb25DbGljaz17IChlKSA9PiBzaG93TWVzc2FnZShlLCBNRVNTQUdFVFlQRS5wcm9tcHQpIH0+V0tVSURlbGVnYXRl5Y2P6K6u5oum5oiqcHJvbXB0PC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxwPmBXS1NjcmlwdE1lc3NhZ2VIYW5kbGVyYOaIlmBXS1NjcmlwdE1lc3NhZ2VIYW5kbGVyV2l0aFJlcGx5YOWNj+iurjwvcD5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXsgc3R5bGVzLm1lc3NhZ2VIYW5kbGVyIH0+XG4gICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXsgbWVzc2FnZUhhbmRsZXIgfT5KU+iwg+eUqElPU+aWueazleaXoOi/lOWbnjwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgb25DbGljaz17IG1lc3NhZ2VIYW5kbGVyV2l0aFJlcGx5IH0+SlPosIPnlKhJT1Pmlrnms5XmnInov5Tlm548L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IG9uQ2xpY2s9eyByZWxvYWQgfT7liLfmlrA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2PnsgdGV4dCB9PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cIklPU0pTXCIgc3R5bGU9e3sgbWFyZ2luOiAnMjBweCcgfX0+aU9T6K6+572ubWFyZ2luPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+ICAgXG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEhvbWU7IiwiaW1wb3J0IFJlYWN0LCB7IEZDLCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUm91dGUgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IHsgSGFzaFJvdXRlciwgU3dpdGNoIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgSGVhZGVyIGZyb20gJy4uL2NvbXBvbmVudHMvaGVhZGVyL0hlYWRlcic7XG5pbXBvcnQgRm9vdGVyIGZyb20gJy4uL2NvbXBvbmVudHMvZm9vdGVyL0Zvb3Rlcic7XG5pbXBvcnQgQ29udGVudCBmcm9tICcuLi9jb21wb25lbnRzL2NvbnRlbnRMYXlvdXQvQ29udGVudExheW91dCc7XG5pbXBvcnQgSG9tZSBmcm9tICcuLi9jb21wb25lbnRzL2hvbWUvSG9tZSc7XG5cbmNvbnN0IFJvb3Q6IEZDID0gKCkgPT4ge1xuICAgIFxuICAgIHJldHVybiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgICA8SGVhZGVyLz5cbiAgICAgICAgICAgIDxIYXNoUm91dGVyPlxuICAgICAgICAgICAgICAgIDxTd2l0Y2g+XG4gICAgICAgICAgICAgICAgICAgIHsvKiA8Um91dGUgcGF0aD1cIi9cIiBleGFjdCAgY29tcG9uZW50PXsgSG9tZSB9IC8+XG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2hvbWVcIiBleGFjdCAgY29tcG9uZW50PXsgSG9tZSB9IC8+XG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBjb21wb25lbnQ9eygpID0+PGRpdj40MDQ8L2Rpdj4gfSAvPiAqL31cbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvXCIgY29tcG9uZW50PXsoKSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA8Q29udGVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3dpdGNoPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9ob21lXCIgY29tcG9uZW50PXsgSG9tZSB9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvdGVzdFwiIGNvbXBvbmVudD17IEhvbWUgfS8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiKlwiIGNvbXBvbmVudD17KCkgPT48ZGl2PjQwNDwvZGl2PiB9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Td2l0Y2g+XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA8L0NvbnRlbnQ+XG4gICAgICAgICAgICAgICAgICAgICl9IC8+XG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBjb21wb25lbnQ9eygpID0+PGRpdj40MDQ8L2Rpdj4gfSAvPlxuICAgICAgICAgICAgICAgIDwvU3dpdGNoPlxuICAgICAgICAgICAgPC9IYXNoUm91dGVyPlxuICAgICAgICAgICAgPEZvb3Rlci8+XG4gICAgICAgIDwvPlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSb290OyIsImltcG9ydCBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG4gIHZhciBrZXksIGk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59IiwiaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgfSk7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlMaWtlVG9BcnJheVwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn0iLCJpbXBvcnQgYXJyYXlXaXRob3V0SG9sZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aG91dEhvbGVzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXlcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXlcIjtcbmltcG9ydCBub25JdGVyYWJsZVNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVTcHJlYWRcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufSIsImltcG9ydCBhcnJheUxpa2VUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheUxpa2VUb0FycmF5XCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufSIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufSIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2V0UHJvdG90eXBlT2ZcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufSIsImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9XG5cbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn0iLCJpbXBvcnQgZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3RcIjtcbmltcG9ydCBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkge1xuICB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpO1xuICByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7XG4gICAgdmFyIFN1cGVyID0gZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksXG4gICAgICAgIHJlc3VsdDtcblxuICAgIGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7XG4gICAgICB2YXIgTmV3VGFyZ2V0ID0gZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7XG4gICAgICByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlO1xuICBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlO1xuICBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlO1xuXG4gIHRyeSB7XG4gICAgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc0ZyYWdtZW50IH0gZnJvbSAncmVhY3QtaXMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9BcnJheShjaGlsZHJlbikge1xuICB2YXIgb3B0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIHJldCA9IFtdO1xuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoKGNoaWxkID09PSB1bmRlZmluZWQgfHwgY2hpbGQgPT09IG51bGwpICYmICFvcHRpb24ua2VlcEVtcHR5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGQpKSB7XG4gICAgICByZXQgPSByZXQuY29uY2F0KHRvQXJyYXkoY2hpbGQpKTtcbiAgICB9IGVsc2UgaWYgKGlzRnJhZ21lbnQoY2hpbGQpICYmIGNoaWxkLnByb3BzKSB7XG4gICAgICByZXQgPSByZXQuY29uY2F0KHRvQXJyYXkoY2hpbGQucHJvcHMuY2hpbGRyZW4sIG9wdGlvbikpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXQucHVzaChjaGlsZCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJldDtcbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG52YXIgd2FybmVkID0ge307XG5leHBvcnQgZnVuY3Rpb24gd2FybmluZyh2YWxpZCwgbWVzc2FnZSkge1xuICAvLyBTdXBwb3J0IHVnbGlmeVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhdmFsaWQgJiYgY29uc29sZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc29sZS5lcnJvcihcIldhcm5pbmc6IFwiLmNvbmNhdChtZXNzYWdlKSk7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBub3RlKHZhbGlkLCBtZXNzYWdlKSB7XG4gIC8vIFN1cHBvcnQgdWdsaWZ5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF2YWxpZCAmJiBjb25zb2xlICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oXCJOb3RlOiBcIi5jb25jYXQobWVzc2FnZSkpO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gcmVzZXRXYXJuZWQoKSB7XG4gIHdhcm5lZCA9IHt9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNhbGwobWV0aG9kLCB2YWxpZCwgbWVzc2FnZSkge1xuICBpZiAoIXZhbGlkICYmICF3YXJuZWRbbWVzc2FnZV0pIHtcbiAgICBtZXRob2QoZmFsc2UsIG1lc3NhZ2UpO1xuICAgIHdhcm5lZFttZXNzYWdlXSA9IHRydWU7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiB3YXJuaW5nT25jZSh2YWxpZCwgbWVzc2FnZSkge1xuICBjYWxsKHdhcm5pbmcsIHZhbGlkLCBtZXNzYWdlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBub3RlT25jZSh2YWxpZCwgbWVzc2FnZSkge1xuICBjYWxsKG5vdGUsIHZhbGlkLCBtZXNzYWdlKTtcbn1cbmV4cG9ydCBkZWZhdWx0IHdhcm5pbmdPbmNlO1xuLyogZXNsaW50LWVuYWJsZSAqLyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJyYy11dGlsL2VzL3dhcm5pbmdcIjtcbmV4cG9ydCB2YXIgSE9PS19NQVJLID0gJ1JDX0ZPUk1fSU5URVJOQUxfSE9PS1MnOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuXG52YXIgd2FybmluZ0Z1bmMgPSBmdW5jdGlvbiB3YXJuaW5nRnVuYygpIHtcbiAgd2FybmluZyhmYWxzZSwgJ0NhbiBub3QgZmluZCBGb3JtQ29udGV4dC4gUGxlYXNlIG1ha2Ugc3VyZSB5b3Ugd3JhcCBGaWVsZCB1bmRlciBGb3JtLicpO1xufTtcblxudmFyIENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh7XG4gIGdldEZpZWxkVmFsdWU6IHdhcm5pbmdGdW5jLFxuICBnZXRGaWVsZHNWYWx1ZTogd2FybmluZ0Z1bmMsXG4gIGdldEZpZWxkRXJyb3I6IHdhcm5pbmdGdW5jLFxuICBnZXRGaWVsZHNFcnJvcjogd2FybmluZ0Z1bmMsXG4gIGlzRmllbGRzVG91Y2hlZDogd2FybmluZ0Z1bmMsXG4gIGlzRmllbGRUb3VjaGVkOiB3YXJuaW5nRnVuYyxcbiAgaXNGaWVsZFZhbGlkYXRpbmc6IHdhcm5pbmdGdW5jLFxuICBpc0ZpZWxkc1ZhbGlkYXRpbmc6IHdhcm5pbmdGdW5jLFxuICByZXNldEZpZWxkczogd2FybmluZ0Z1bmMsXG4gIHNldEZpZWxkczogd2FybmluZ0Z1bmMsXG4gIHNldEZpZWxkc1ZhbHVlOiB3YXJuaW5nRnVuYyxcbiAgdmFsaWRhdGVGaWVsZHM6IHdhcm5pbmdGdW5jLFxuICBzdWJtaXQ6IHdhcm5pbmdGdW5jLFxuICBnZXRJbnRlcm5hbEhvb2tzOiBmdW5jdGlvbiBnZXRJbnRlcm5hbEhvb2tzKCkge1xuICAgIHdhcm5pbmdGdW5jKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BhdGNoOiB3YXJuaW5nRnVuYyxcbiAgICAgIGluaXRFbnRpdHlWYWx1ZTogd2FybmluZ0Z1bmMsXG4gICAgICByZWdpc3RlckZpZWxkOiB3YXJuaW5nRnVuYyxcbiAgICAgIHVzZVN1YnNjcmliZTogd2FybmluZ0Z1bmMsXG4gICAgICBzZXRJbml0aWFsVmFsdWVzOiB3YXJuaW5nRnVuYyxcbiAgICAgIHNldENhbGxiYWNrczogd2FybmluZ0Z1bmMsXG4gICAgICBnZXRGaWVsZHM6IHdhcm5pbmdGdW5jLFxuICAgICAgc2V0VmFsaWRhdGVNZXNzYWdlczogd2FybmluZ0Z1bmMsXG4gICAgICBzZXRQcmVzZXJ2ZTogd2FybmluZ0Z1bmNcbiAgICB9O1xuICB9XG59KTtcbmV4cG9ydCBkZWZhdWx0IENvbnRleHQ7IiwiZXhwb3J0IGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG59IiwiZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTtcbiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlamVjdChlcnJvcik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGluZm8uZG9uZSkge1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXG4gICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7XG4gICAgICB9XG5cbiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH07XG59IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7XG4gIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7XG5cbiAgdHJ5IHtcbiAgICBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICBpZiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7XG4gICAgX2NvbnN0cnVjdCA9IFJlZmxlY3QuY29uc3RydWN0O1xuICB9IGVsc2Uge1xuICAgIF9jb25zdHJ1Y3QgPSBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgICAgIHZhciBhID0gW251bGxdO1xuICAgICAgYS5wdXNoLmFwcGx5KGEsIGFyZ3MpO1xuICAgICAgdmFyIENvbnN0cnVjdG9yID0gRnVuY3Rpb24uYmluZC5hcHBseShQYXJlbnQsIGEpO1xuICAgICAgdmFyIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgICBpZiAoQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihpbnN0YW5jZSwgQ2xhc3MucHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF9jb25zdHJ1Y3QuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX2lzTmF0aXZlRnVuY3Rpb24oZm4pIHtcbiAgcmV0dXJuIEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwoZm4pLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICB2YXIgX2NhY2hlID0gdHlwZW9mIE1hcCA9PT0gXCJmdW5jdGlvblwiID8gbmV3IE1hcCgpIDogdW5kZWZpbmVkO1xuXG4gIF93cmFwTmF0aXZlU3VwZXIgPSBmdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gICAgaWYgKENsYXNzID09PSBudWxsIHx8ICFfaXNOYXRpdmVGdW5jdGlvbihDbGFzcykpIHJldHVybiBDbGFzcztcblxuICAgIGlmICh0eXBlb2YgQ2xhc3MgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgX2NhY2hlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBpZiAoX2NhY2hlLmhhcyhDbGFzcykpIHJldHVybiBfY2FjaGUuZ2V0KENsYXNzKTtcblxuICAgICAgX2NhY2hlLnNldChDbGFzcywgV3JhcHBlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gV3JhcHBlcigpIHtcbiAgICAgIHJldHVybiBfY29uc3RydWN0KENsYXNzLCBhcmd1bWVudHMsIF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7XG4gICAgfVxuXG4gICAgV3JhcHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IFdyYXBwZXIsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihXcmFwcGVyLCBDbGFzcyk7XG4gIH07XG5cbiAgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpO1xufVxuXG4vKiBlc2xpbnQgbm8tY29uc29sZTowICovXG52YXIgZm9ybWF0UmVnRXhwID0gLyVbc2RqJV0vZztcbnZhciB3YXJuaW5nID0gZnVuY3Rpb24gd2FybmluZygpIHt9OyAvLyBkb24ndCBwcmludCB3YXJuaW5nIG1lc3NhZ2Ugd2hlbiBpbiBwcm9kdWN0aW9uIGVudiBvciBub2RlIHJ1bnRpbWVcblxuaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd2FybmluZyA9IGZ1bmN0aW9uIHdhcm5pbmcodHlwZSwgZXJyb3JzKSB7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgIGlmIChlcnJvcnMuZXZlcnkoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBlID09PSAnc3RyaW5nJztcbiAgICAgIH0pKSB7XG4gICAgICAgIGNvbnNvbGUud2Fybih0eXBlLCBlcnJvcnMpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udmVydEZpZWxkc0Vycm9yKGVycm9ycykge1xuICBpZiAoIWVycm9ycyB8fCAhZXJyb3JzLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gIHZhciBmaWVsZHMgPSB7fTtcbiAgZXJyb3JzLmZvckVhY2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgdmFyIGZpZWxkID0gZXJyb3IuZmllbGQ7XG4gICAgZmllbGRzW2ZpZWxkXSA9IGZpZWxkc1tmaWVsZF0gfHwgW107XG4gICAgZmllbGRzW2ZpZWxkXS5wdXNoKGVycm9yKTtcbiAgfSk7XG4gIHJldHVybiBmaWVsZHM7XG59XG5mdW5jdGlvbiBmb3JtYXQoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBmID0gYXJnc1swXTtcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuXG4gIGlmICh0eXBlb2YgZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmLmFwcGx5KG51bGwsIGFyZ3Muc2xpY2UoMSkpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBmID09PSAnc3RyaW5nJykge1xuICAgIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uICh4KSB7XG4gICAgICBpZiAoeCA9PT0gJyUlJykge1xuICAgICAgICByZXR1cm4gJyUnO1xuICAgICAgfVxuXG4gICAgICBpZiAoaSA+PSBsZW4pIHtcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoeCkge1xuICAgICAgICBjYXNlICclcyc6XG4gICAgICAgICAgcmV0dXJuIFN0cmluZyhhcmdzW2krK10pO1xuXG4gICAgICAgIGNhc2UgJyVkJzpcbiAgICAgICAgICByZXR1cm4gTnVtYmVyKGFyZ3NbaSsrXSk7XG5cbiAgICAgICAgY2FzZSAnJWonOlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHg7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIHJldHVybiBmO1xufVxuXG5mdW5jdGlvbiBpc05hdGl2ZVN0cmluZ1R5cGUodHlwZSkge1xuICByZXR1cm4gdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZSA9PT0gJ3VybCcgfHwgdHlwZSA9PT0gJ2hleCcgfHwgdHlwZSA9PT0gJ2VtYWlsJyB8fCB0eXBlID09PSAnZGF0ZScgfHwgdHlwZSA9PT0gJ3BhdHRlcm4nO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5VmFsdWUodmFsdWUsIHR5cGUpIHtcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlID09PSAnYXJyYXknICYmIEFycmF5LmlzQXJyYXkodmFsdWUpICYmICF2YWx1ZS5sZW5ndGgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChpc05hdGl2ZVN0cmluZ1R5cGUodHlwZSkgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhdmFsdWUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gYXN5bmNQYXJhbGxlbEFycmF5KGFyciwgZnVuYywgY2FsbGJhY2spIHtcbiAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgdmFyIHRvdGFsID0gMDtcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGg7XG5cbiAgZnVuY3Rpb24gY291bnQoZXJyb3JzKSB7XG4gICAgcmVzdWx0cy5wdXNoLmFwcGx5KHJlc3VsdHMsIGVycm9ycyk7XG4gICAgdG90YWwrKztcblxuICAgIGlmICh0b3RhbCA9PT0gYXJyTGVuZ3RoKSB7XG4gICAgICBjYWxsYmFjayhyZXN1bHRzKTtcbiAgICB9XG4gIH1cblxuICBhcnIuZm9yRWFjaChmdW5jdGlvbiAoYSkge1xuICAgIGZ1bmMoYSwgY291bnQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYXN5bmNTZXJpYWxBcnJheShhcnIsIGZ1bmMsIGNhbGxiYWNrKSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoO1xuXG4gIGZ1bmN0aW9uIG5leHQoZXJyb3JzKSB7XG4gICAgaWYgKGVycm9ycyAmJiBlcnJvcnMubGVuZ3RoKSB7XG4gICAgICBjYWxsYmFjayhlcnJvcnMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBvcmlnaW5hbCA9IGluZGV4O1xuICAgIGluZGV4ID0gaW5kZXggKyAxO1xuXG4gICAgaWYgKG9yaWdpbmFsIDwgYXJyTGVuZ3RoKSB7XG4gICAgICBmdW5jKGFycltvcmlnaW5hbF0sIG5leHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayhbXSk7XG4gICAgfVxuICB9XG5cbiAgbmV4dChbXSk7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5PYmpBcnIob2JqQXJyKSB7XG4gIHZhciByZXQgPSBbXTtcbiAgT2JqZWN0LmtleXMob2JqQXJyKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0LnB1c2guYXBwbHkocmV0LCBvYmpBcnJba10pO1xuICB9KTtcbiAgcmV0dXJuIHJldDtcbn1cblxudmFyIEFzeW5jVmFsaWRhdGlvbkVycm9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfRXJyb3IpIHtcbiAgX2luaGVyaXRzTG9vc2UoQXN5bmNWYWxpZGF0aW9uRXJyb3IsIF9FcnJvcik7XG5cbiAgZnVuY3Rpb24gQXN5bmNWYWxpZGF0aW9uRXJyb3IoZXJyb3JzLCBmaWVsZHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9FcnJvci5jYWxsKHRoaXMsICdBc3luYyBWYWxpZGF0aW9uIEVycm9yJykgfHwgdGhpcztcbiAgICBfdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgX3RoaXMuZmllbGRzID0gZmllbGRzO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHJldHVybiBBc3luY1ZhbGlkYXRpb25FcnJvcjtcbn0oIC8qI19fUFVSRV9fKi9fd3JhcE5hdGl2ZVN1cGVyKEVycm9yKSk7XG5mdW5jdGlvbiBhc3luY01hcChvYmpBcnIsIG9wdGlvbiwgZnVuYywgY2FsbGJhY2spIHtcbiAgaWYgKG9wdGlvbi5maXJzdCkge1xuICAgIHZhciBfcGVuZGluZyA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBuZXh0ID0gZnVuY3Rpb24gbmV4dChlcnJvcnMpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyb3JzKTtcbiAgICAgICAgcmV0dXJuIGVycm9ycy5sZW5ndGggPyByZWplY3QobmV3IEFzeW5jVmFsaWRhdGlvbkVycm9yKGVycm9ycywgY29udmVydEZpZWxkc0Vycm9yKGVycm9ycykpKSA6IHJlc29sdmUoKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBmbGF0dGVuQXJyID0gZmxhdHRlbk9iakFycihvYmpBcnIpO1xuICAgICAgYXN5bmNTZXJpYWxBcnJheShmbGF0dGVuQXJyLCBmdW5jLCBuZXh0KTtcbiAgICB9KTtcblxuICAgIF9wZW5kaW5nW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF9wZW5kaW5nO1xuICB9XG5cbiAgdmFyIGZpcnN0RmllbGRzID0gb3B0aW9uLmZpcnN0RmllbGRzIHx8IFtdO1xuXG4gIGlmIChmaXJzdEZpZWxkcyA9PT0gdHJ1ZSkge1xuICAgIGZpcnN0RmllbGRzID0gT2JqZWN0LmtleXMob2JqQXJyKTtcbiAgfVxuXG4gIHZhciBvYmpBcnJLZXlzID0gT2JqZWN0LmtleXMob2JqQXJyKTtcbiAgdmFyIG9iakFyckxlbmd0aCA9IG9iakFycktleXMubGVuZ3RoO1xuICB2YXIgdG90YWwgPSAwO1xuICB2YXIgcmVzdWx0cyA9IFtdO1xuICB2YXIgcGVuZGluZyA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgbmV4dCA9IGZ1bmN0aW9uIG5leHQoZXJyb3JzKSB7XG4gICAgICByZXN1bHRzLnB1c2guYXBwbHkocmVzdWx0cywgZXJyb3JzKTtcbiAgICAgIHRvdGFsKys7XG5cbiAgICAgIGlmICh0b3RhbCA9PT0gb2JqQXJyTGVuZ3RoKSB7XG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdHMpO1xuICAgICAgICByZXR1cm4gcmVzdWx0cy5sZW5ndGggPyByZWplY3QobmV3IEFzeW5jVmFsaWRhdGlvbkVycm9yKHJlc3VsdHMsIGNvbnZlcnRGaWVsZHNFcnJvcihyZXN1bHRzKSkpIDogcmVzb2x2ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoIW9iakFycktleXMubGVuZ3RoKSB7XG4gICAgICBjYWxsYmFjayhyZXN1bHRzKTtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBvYmpBcnJLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIGFyciA9IG9iakFycltrZXldO1xuXG4gICAgICBpZiAoZmlyc3RGaWVsZHMuaW5kZXhPZihrZXkpICE9PSAtMSkge1xuICAgICAgICBhc3luY1NlcmlhbEFycmF5KGFyciwgZnVuYywgbmV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhc3luY1BhcmFsbGVsQXJyYXkoYXJyLCBmdW5jLCBuZXh0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHBlbmRpbmdbXCJjYXRjaFwiXShmdW5jdGlvbiAoZSkge1xuICAgIHJldHVybiBlO1xuICB9KTtcbiAgcmV0dXJuIHBlbmRpbmc7XG59XG5mdW5jdGlvbiBjb21wbGVtZW50RXJyb3IocnVsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKG9lKSB7XG4gICAgaWYgKG9lICYmIG9lLm1lc3NhZ2UpIHtcbiAgICAgIG9lLmZpZWxkID0gb2UuZmllbGQgfHwgcnVsZS5mdWxsRmllbGQ7XG4gICAgICByZXR1cm4gb2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG1lc3NhZ2U6IHR5cGVvZiBvZSA9PT0gJ2Z1bmN0aW9uJyA/IG9lKCkgOiBvZSxcbiAgICAgIGZpZWxkOiBvZS5maWVsZCB8fCBydWxlLmZ1bGxGaWVsZFxuICAgIH07XG4gIH07XG59XG5mdW5jdGlvbiBkZWVwTWVyZ2UodGFyZ2V0LCBzb3VyY2UpIHtcbiAgaWYgKHNvdXJjZSkge1xuICAgIGZvciAodmFyIHMgaW4gc291cmNlKSB7XG4gICAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KHMpKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVtzXTtcblxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdGFyZ2V0W3NdID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIHRhcmdldFtzXSA9IF9leHRlbmRzKF9leHRlbmRzKHt9LCB0YXJnZXRbc10pLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0W3NdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqICBSdWxlIGZvciB2YWxpZGF0aW5nIHJlcXVpcmVkIGZpZWxkcy5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gZXJyb3JzIEFuIGFycmF5IG9mIGVycm9ycyB0aGF0IHRoaXMgcnVsZSBtYXkgYWRkXG4gKiAgdmFsaWRhdGlvbiBlcnJvcnMgdG8uXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuXG5mdW5jdGlvbiByZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMsIHR5cGUpIHtcbiAgaWYgKHJ1bGUucmVxdWlyZWQgJiYgKCFzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCkgfHwgaXNFbXB0eVZhbHVlKHZhbHVlLCB0eXBlIHx8IHJ1bGUudHlwZSkpKSB7XG4gICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXMucmVxdWlyZWQsIHJ1bGUuZnVsbEZpZWxkKSk7XG4gIH1cbn1cblxuLyoqXG4gKiAgUnVsZSBmb3IgdmFsaWRhdGluZyB3aGl0ZXNwYWNlLlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBlcnJvcnMgQW4gYXJyYXkgb2YgZXJyb3JzIHRoYXQgdGhpcyBydWxlIG1heSBhZGRcbiAqICB2YWxpZGF0aW9uIGVycm9ycyB0by5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5cbmZ1bmN0aW9uIHdoaXRlc3BhY2UocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKSB7XG4gIGlmICgvXlxccyskLy50ZXN0KHZhbHVlKSB8fCB2YWx1ZSA9PT0gJycpIHtcbiAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlcy53aGl0ZXNwYWNlLCBydWxlLmZ1bGxGaWVsZCkpO1xuICB9XG59XG5cbi8qIGVzbGludCBtYXgtbGVuOjAgKi9cblxudmFyIHBhdHRlcm4gPSB7XG4gIC8vIGh0dHA6Ly9lbWFpbHJlZ2V4LmNvbS9cbiAgZW1haWw6IC9eKChbXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfV0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvLFxuICB1cmw6IG5ldyBSZWdFeHAoXCJeKD8hbWFpbHRvOikoPzooPzpodHRwfGh0dHBzfGZ0cCk6Ly98Ly8pKD86XFxcXFMrKD86OlxcXFxTKik/QCk/KD86KD86KD86WzEtOV1cXFxcZD98MVxcXFxkXFxcXGR8MlswMV1cXFxcZHwyMlswLTNdKSg/OlxcXFwuKD86MT9cXFxcZHsxLDJ9fDJbMC00XVxcXFxkfDI1WzAtNV0pKXsyfSg/OlxcXFwuKD86WzAtOV1cXFxcZD98MVxcXFxkXFxcXGR8MlswLTRdXFxcXGR8MjVbMC00XSkpfCg/Oig/OlthLXpcXFxcdTAwYTEtXFxcXHVmZmZmMC05XSstKikqW2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldKykoPzpcXFxcLig/OlthLXpcXFxcdTAwYTEtXFxcXHVmZmZmMC05XSstKikqW2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldKykqKD86XFxcXC4oPzpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZl17Mix9KSkpfGxvY2FsaG9zdCkoPzo6XFxcXGR7Miw1fSk/KD86KC98XFxcXD98IylbXlxcXFxzXSopPyRcIiwgJ2knKSxcbiAgaGV4OiAvXiM/KFthLWYwLTldezZ9fFthLWYwLTldezN9KSQvaVxufTtcbnZhciB0eXBlcyA9IHtcbiAgaW50ZWdlcjogZnVuY3Rpb24gaW50ZWdlcih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlcy5udW1iZXIodmFsdWUpICYmIHBhcnNlSW50KHZhbHVlLCAxMCkgPT09IHZhbHVlO1xuICB9LFxuICBcImZsb2F0XCI6IGZ1bmN0aW9uIGZsb2F0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVzLm51bWJlcih2YWx1ZSkgJiYgIXR5cGVzLmludGVnZXIodmFsdWUpO1xuICB9LFxuICBhcnJheTogZnVuY3Rpb24gYXJyYXkodmFsdWUpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0sXG4gIHJlZ2V4cDogZnVuY3Rpb24gcmVnZXhwKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuICEhbmV3IFJlZ0V4cCh2YWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcbiAgZGF0ZTogZnVuY3Rpb24gZGF0ZSh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUuZ2V0VGltZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUuZ2V0TW9udGggPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlLmdldFllYXIgPT09ICdmdW5jdGlvbicgJiYgIWlzTmFOKHZhbHVlLmdldFRpbWUoKSk7XG4gIH0sXG4gIG51bWJlcjogZnVuY3Rpb24gbnVtYmVyKHZhbHVlKSB7XG4gICAgaWYgKGlzTmFOKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xuICB9LFxuICBvYmplY3Q6IGZ1bmN0aW9uIG9iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmICF0eXBlcy5hcnJheSh2YWx1ZSk7XG4gIH0sXG4gIG1ldGhvZDogZnVuY3Rpb24gbWV0aG9kKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgfSxcbiAgZW1haWw6IGZ1bmN0aW9uIGVtYWlsKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgISF2YWx1ZS5tYXRjaChwYXR0ZXJuLmVtYWlsKSAmJiB2YWx1ZS5sZW5ndGggPCAyNTU7XG4gIH0sXG4gIHVybDogZnVuY3Rpb24gdXJsKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgISF2YWx1ZS5tYXRjaChwYXR0ZXJuLnVybCk7XG4gIH0sXG4gIGhleDogZnVuY3Rpb24gaGV4KHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgISF2YWx1ZS5tYXRjaChwYXR0ZXJuLmhleCk7XG4gIH1cbn07XG4vKipcbiAqICBSdWxlIGZvciB2YWxpZGF0aW5nIHRoZSB0eXBlIG9mIGEgdmFsdWUuXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBiZWluZyB2YWxpZGF0ZWQuXG4gKiAgQHBhcmFtIGVycm9ycyBBbiBhcnJheSBvZiBlcnJvcnMgdGhhdCB0aGlzIHJ1bGUgbWF5IGFkZFxuICogIHZhbGlkYXRpb24gZXJyb3JzIHRvLlxuICogIEBwYXJhbSBvcHRpb25zIFRoZSB2YWxpZGF0aW9uIG9wdGlvbnMuXG4gKiAgQHBhcmFtIG9wdGlvbnMubWVzc2FnZXMgVGhlIHZhbGlkYXRpb24gbWVzc2FnZXMuXG4gKi9cblxuZnVuY3Rpb24gdHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpIHtcbiAgaWYgKHJ1bGUucmVxdWlyZWQgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGN1c3RvbSA9IFsnaW50ZWdlcicsICdmbG9hdCcsICdhcnJheScsICdyZWdleHAnLCAnb2JqZWN0JywgJ21ldGhvZCcsICdlbWFpbCcsICdudW1iZXInLCAnZGF0ZScsICd1cmwnLCAnaGV4J107XG4gIHZhciBydWxlVHlwZSA9IHJ1bGUudHlwZTtcblxuICBpZiAoY3VzdG9tLmluZGV4T2YocnVsZVR5cGUpID4gLTEpIHtcbiAgICBpZiAoIXR5cGVzW3J1bGVUeXBlXSh2YWx1ZSkpIHtcbiAgICAgIGVycm9ycy5wdXNoKGZvcm1hdChvcHRpb25zLm1lc3NhZ2VzLnR5cGVzW3J1bGVUeXBlXSwgcnVsZS5mdWxsRmllbGQsIHJ1bGUudHlwZSkpO1xuICAgIH0gLy8gc3RyYWlnaHQgdHlwZW9mIGNoZWNrXG5cbiAgfSBlbHNlIGlmIChydWxlVHlwZSAmJiB0eXBlb2YgdmFsdWUgIT09IHJ1bGUudHlwZSkge1xuICAgIGVycm9ycy5wdXNoKGZvcm1hdChvcHRpb25zLm1lc3NhZ2VzLnR5cGVzW3J1bGVUeXBlXSwgcnVsZS5mdWxsRmllbGQsIHJ1bGUudHlwZSkpO1xuICB9XG59XG5cbi8qKlxuICogIFJ1bGUgZm9yIHZhbGlkYXRpbmcgbWluaW11bSBhbmQgbWF4aW11bSBhbGxvd2VkIHZhbHVlcy5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gZXJyb3JzIEFuIGFycmF5IG9mIGVycm9ycyB0aGF0IHRoaXMgcnVsZSBtYXkgYWRkXG4gKiAgdmFsaWRhdGlvbiBlcnJvcnMgdG8uXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuXG5mdW5jdGlvbiByYW5nZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpIHtcbiAgdmFyIGxlbiA9IHR5cGVvZiBydWxlLmxlbiA9PT0gJ251bWJlcic7XG4gIHZhciBtaW4gPSB0eXBlb2YgcnVsZS5taW4gPT09ICdudW1iZXInO1xuICB2YXIgbWF4ID0gdHlwZW9mIHJ1bGUubWF4ID09PSAnbnVtYmVyJzsgLy8g5q2j5YiZ5Yy56YWN56CB54K56IyD5Zu05LuOVSswMTAwMDDkuIDnm7TliLBVKzEwRkZGRueahOaWh+Wtl++8iOihpeWFheW5s+mdolN1cHBsZW1lbnRhcnkgUGxhbmXvvIlcblxuICB2YXIgc3BSZWdleHAgPSAvW1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXS9nO1xuICB2YXIgdmFsID0gdmFsdWU7XG4gIHZhciBrZXkgPSBudWxsO1xuICB2YXIgbnVtID0gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJztcbiAgdmFyIHN0ciA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG4gIHZhciBhcnIgPSBBcnJheS5pc0FycmF5KHZhbHVlKTtcblxuICBpZiAobnVtKSB7XG4gICAga2V5ID0gJ251bWJlcic7XG4gIH0gZWxzZSBpZiAoc3RyKSB7XG4gICAga2V5ID0gJ3N0cmluZyc7XG4gIH0gZWxzZSBpZiAoYXJyKSB7XG4gICAga2V5ID0gJ2FycmF5JztcbiAgfSAvLyBpZiB0aGUgdmFsdWUgaXMgbm90IG9mIGEgc3VwcG9ydGVkIHR5cGUgZm9yIHJhbmdlIHZhbGlkYXRpb25cbiAgLy8gdGhlIHZhbGlkYXRpb24gcnVsZSBydWxlIHNob3VsZCB1c2UgdGhlXG4gIC8vIHR5cGUgcHJvcGVydHkgdG8gYWxzbyB0ZXN0IGZvciBhIHBhcnRpY3VsYXIgdHlwZVxuXG5cbiAgaWYgKCFrZXkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoYXJyKSB7XG4gICAgdmFsID0gdmFsdWUubGVuZ3RoO1xuICB9XG5cbiAgaWYgKHN0cikge1xuICAgIC8vIOWkhOeQhueggeeCueWkp+S6jlUrMDEwMDAw55qE5paH5a2XbGVuZ3Ro5bGe5oCn5LiN5YeG56Gu55qEYnVn77yM5aaCXCLwoK638KCut/CgrrdcIi5sZW5naHQgIT09IDNcbiAgICB2YWwgPSB2YWx1ZS5yZXBsYWNlKHNwUmVnZXhwLCAnXycpLmxlbmd0aDtcbiAgfVxuXG4gIGlmIChsZW4pIHtcbiAgICBpZiAodmFsICE9PSBydWxlLmxlbikge1xuICAgICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXNba2V5XS5sZW4sIHJ1bGUuZnVsbEZpZWxkLCBydWxlLmxlbikpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChtaW4gJiYgIW1heCAmJiB2YWwgPCBydWxlLm1pbikge1xuICAgIGVycm9ycy5wdXNoKGZvcm1hdChvcHRpb25zLm1lc3NhZ2VzW2tleV0ubWluLCBydWxlLmZ1bGxGaWVsZCwgcnVsZS5taW4pKTtcbiAgfSBlbHNlIGlmIChtYXggJiYgIW1pbiAmJiB2YWwgPiBydWxlLm1heCkge1xuICAgIGVycm9ycy5wdXNoKGZvcm1hdChvcHRpb25zLm1lc3NhZ2VzW2tleV0ubWF4LCBydWxlLmZ1bGxGaWVsZCwgcnVsZS5tYXgpKTtcbiAgfSBlbHNlIGlmIChtaW4gJiYgbWF4ICYmICh2YWwgPCBydWxlLm1pbiB8fCB2YWwgPiBydWxlLm1heCkpIHtcbiAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlc1trZXldLnJhbmdlLCBydWxlLmZ1bGxGaWVsZCwgcnVsZS5taW4sIHJ1bGUubWF4KSk7XG4gIH1cbn1cblxudmFyIEVOVU0gPSAnZW51bSc7XG4vKipcbiAqICBSdWxlIGZvciB2YWxpZGF0aW5nIGEgdmFsdWUgZXhpc3RzIGluIGFuIGVudW1lcmFibGUgbGlzdC5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gZXJyb3JzIEFuIGFycmF5IG9mIGVycm9ycyB0aGF0IHRoaXMgcnVsZSBtYXkgYWRkXG4gKiAgdmFsaWRhdGlvbiBlcnJvcnMgdG8uXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuXG5mdW5jdGlvbiBlbnVtZXJhYmxlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucykge1xuICBydWxlW0VOVU1dID0gQXJyYXkuaXNBcnJheShydWxlW0VOVU1dKSA/IHJ1bGVbRU5VTV0gOiBbXTtcblxuICBpZiAocnVsZVtFTlVNXS5pbmRleE9mKHZhbHVlKSA9PT0gLTEpIHtcbiAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlc1tFTlVNXSwgcnVsZS5mdWxsRmllbGQsIHJ1bGVbRU5VTV0uam9pbignLCAnKSkpO1xuICB9XG59XG5cbi8qKlxuICogIFJ1bGUgZm9yIHZhbGlkYXRpbmcgYSByZWd1bGFyIGV4cHJlc3Npb24gcGF0dGVybi5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gZXJyb3JzIEFuIGFycmF5IG9mIGVycm9ycyB0aGF0IHRoaXMgcnVsZSBtYXkgYWRkXG4gKiAgdmFsaWRhdGlvbiBlcnJvcnMgdG8uXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuXG5mdW5jdGlvbiBwYXR0ZXJuJDEocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKSB7XG4gIGlmIChydWxlLnBhdHRlcm4pIHtcbiAgICBpZiAocnVsZS5wYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAvLyBpZiBhIFJlZ0V4cCBpbnN0YW5jZSBpcyBwYXNzZWQsIHJlc2V0IGBsYXN0SW5kZXhgIGluIGNhc2UgaXRzIGBnbG9iYWxgXG4gICAgICAvLyBmbGFnIGlzIGFjY2lkZW50YWxseSBzZXQgdG8gYHRydWVgLCB3aGljaCBpbiBhIHZhbGlkYXRpb24gc2NlbmFyaW9cbiAgICAgIC8vIGlzIG5vdCBuZWNlc3NhcnkgYW5kIHRoZSByZXN1bHQgbWlnaHQgYmUgbWlzbGVhZGluZ1xuICAgICAgcnVsZS5wYXR0ZXJuLmxhc3RJbmRleCA9IDA7XG5cbiAgICAgIGlmICghcnVsZS5wYXR0ZXJuLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKGZvcm1hdChvcHRpb25zLm1lc3NhZ2VzLnBhdHRlcm4ubWlzbWF0Y2gsIHJ1bGUuZnVsbEZpZWxkLCB2YWx1ZSwgcnVsZS5wYXR0ZXJuKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcnVsZS5wYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIF9wYXR0ZXJuID0gbmV3IFJlZ0V4cChydWxlLnBhdHRlcm4pO1xuXG4gICAgICBpZiAoIV9wYXR0ZXJuLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKGZvcm1hdChvcHRpb25zLm1lc3NhZ2VzLnBhdHRlcm4ubWlzbWF0Y2gsIHJ1bGUuZnVsbEZpZWxkLCB2YWx1ZSwgcnVsZS5wYXR0ZXJuKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBydWxlcyA9IHtcbiAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICB3aGl0ZXNwYWNlOiB3aGl0ZXNwYWNlLFxuICB0eXBlOiB0eXBlLFxuICByYW5nZTogcmFuZ2UsXG4gIFwiZW51bVwiOiBlbnVtZXJhYmxlLFxuICBwYXR0ZXJuOiBwYXR0ZXJuJDFcbn07XG5cbi8qKlxuICogIFBlcmZvcm1zIHZhbGlkYXRpb24gZm9yIHN0cmluZyB0eXBlcy5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBvcHRpb25zIFRoZSB2YWxpZGF0aW9uIG9wdGlvbnMuXG4gKiAgQHBhcmFtIG9wdGlvbnMubWVzc2FnZXMgVGhlIHZhbGlkYXRpb24gbWVzc2FnZXMuXG4gKi9cblxuZnVuY3Rpb24gc3RyaW5nKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSwgJ3N0cmluZycpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMsICdzdHJpbmcnKTtcblxuICAgIGlmICghaXNFbXB0eVZhbHVlKHZhbHVlLCAnc3RyaW5nJykpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICAgIHJ1bGVzLnJhbmdlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgICBydWxlcy5wYXR0ZXJuKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICAgIGlmIChydWxlLndoaXRlc3BhY2UgPT09IHRydWUpIHtcbiAgICAgICAgcnVsZXMud2hpdGVzcGFjZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59XG5cbi8qKlxuICogIFZhbGlkYXRlcyBhIGZ1bmN0aW9uLlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiAgQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBiZWluZyB2YWxpZGF0ZWQuXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuXG5mdW5jdGlvbiBtZXRob2QocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBydWxlcy50eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn1cblxuLyoqXG4gKiAgVmFsaWRhdGVzIGEgbnVtYmVyLlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiAgQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBiZWluZyB2YWxpZGF0ZWQuXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuXG5mdW5jdGlvbiBudW1iZXIocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAodmFsdWUgPT09ICcnKSB7XG4gICAgICB2YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBydWxlcy50eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgICBydWxlcy5yYW5nZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59XG5cbi8qKlxuICogIFZhbGlkYXRlcyBhIGJvb2xlYW4uXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5cbmZ1bmN0aW9uIF9ib29sZWFuKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcnVsZXMudHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59XG5cbi8qKlxuICogIFZhbGlkYXRlcyB0aGUgcmVndWxhciBleHByZXNzaW9uIHR5cGUuXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5cbmZ1bmN0aW9uIHJlZ2V4cChydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuXG4gICAgaWYgKCFpc0VtcHR5VmFsdWUodmFsdWUpKSB7XG4gICAgICBydWxlcy50eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn1cblxuLyoqXG4gKiAgVmFsaWRhdGVzIGEgbnVtYmVyIGlzIGFuIGludGVnZXIuXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGludGVnZXIocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBydWxlcy50eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgICBydWxlcy5yYW5nZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59XG5cbi8qKlxuICogIFZhbGlkYXRlcyBhIG51bWJlciBpcyBhIGZsb2F0aW5nIHBvaW50IG51bWJlci5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBvcHRpb25zIFRoZSB2YWxpZGF0aW9uIG9wdGlvbnMuXG4gKiAgQHBhcmFtIG9wdGlvbnMubWVzc2FnZXMgVGhlIHZhbGlkYXRpb24gbWVzc2FnZXMuXG4gKi9cblxuZnVuY3Rpb24gZmxvYXRGbihydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICAgIHJ1bGVzLnJhbmdlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn1cblxuLyoqXG4gKiAgVmFsaWRhdGVzIGFuIGFycmF5LlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiAgQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBiZWluZyB2YWxpZGF0ZWQuXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuXG5mdW5jdGlvbiBhcnJheShydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmICgodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucywgJ2FycmF5Jyk7XG5cbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgcnVsZXMudHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgICAgcnVsZXMucmFuZ2UocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufVxuXG4vKipcbiAqICBWYWxpZGF0ZXMgYW4gb2JqZWN0LlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiAgQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBiZWluZyB2YWxpZGF0ZWQuXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuXG5mdW5jdGlvbiBvYmplY3QocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBydWxlcy50eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn1cblxudmFyIEVOVU0kMSA9ICdlbnVtJztcbi8qKlxuICogIFZhbGlkYXRlcyBhbiBlbnVtZXJhYmxlIGxpc3QuXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGVudW1lcmFibGUkMShydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJ1bGVzW0VOVU0kMV0ocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufVxuXG4vKipcbiAqICBWYWxpZGF0ZXMgYSByZWd1bGFyIGV4cHJlc3Npb24gcGF0dGVybi5cbiAqXG4gKiAgUGVyZm9ybXMgdmFsaWRhdGlvbiB3aGVuIGEgcnVsZSBvbmx5IGNvbnRhaW5zXG4gKiAgYSBwYXR0ZXJuIHByb3BlcnR5IGJ1dCBpcyBub3QgZGVjbGFyZWQgYXMgYSBzdHJpbmcgdHlwZS5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBvcHRpb25zIFRoZSB2YWxpZGF0aW9uIG9wdGlvbnMuXG4gKiAgQHBhcmFtIG9wdGlvbnMubWVzc2FnZXMgVGhlIHZhbGlkYXRpb24gbWVzc2FnZXMuXG4gKi9cblxuZnVuY3Rpb24gcGF0dGVybiQyKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSwgJ3N0cmluZycpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuXG4gICAgaWYgKCFpc0VtcHR5VmFsdWUodmFsdWUsICdzdHJpbmcnKSkge1xuICAgICAgcnVsZXMucGF0dGVybihydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59XG5cbmZ1bmN0aW9uIGRhdGUocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgLy8gY29uc29sZS5sb2coJ2ludGVnZXIgcnVsZSBjYWxsZWQgJWonLCBydWxlKTtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTsgLy8gY29uc29sZS5sb2coJ3ZhbGlkYXRlIG9uICVzIHZhbHVlJywgdmFsdWUpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUsICdkYXRlJykgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICBpZiAoIWlzRW1wdHlWYWx1ZSh2YWx1ZSwgJ2RhdGUnKSkge1xuICAgICAgdmFyIGRhdGVPYmplY3Q7XG5cbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgZGF0ZU9iamVjdCA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0ZU9iamVjdCA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcnVsZXMudHlwZShydWxlLCBkYXRlT2JqZWN0LCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICAgIGlmIChkYXRlT2JqZWN0KSB7XG4gICAgICAgIHJ1bGVzLnJhbmdlKHJ1bGUsIGRhdGVPYmplY3QuZ2V0VGltZSgpLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn1cblxuZnVuY3Rpb24gcmVxdWlyZWQkMShydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB0eXBlID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyAnYXJyYXknIDogdHlwZW9mIHZhbHVlO1xuICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMsIHR5cGUpO1xuICBjYWxsYmFjayhlcnJvcnMpO1xufVxuXG5mdW5jdGlvbiB0eXBlJDEocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIHJ1bGVUeXBlID0gcnVsZS50eXBlO1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUsIHJ1bGVUeXBlKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zLCBydWxlVHlwZSk7XG5cbiAgICBpZiAoIWlzRW1wdHlWYWx1ZSh2YWx1ZSwgcnVsZVR5cGUpKSB7XG4gICAgICBydWxlcy50eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn1cblxuLyoqXG4gKiAgUGVyZm9ybXMgdmFsaWRhdGlvbiBmb3IgYW55IHR5cGUuXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGFueShydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn1cblxudmFyIHZhbGlkYXRvcnMgPSB7XG4gIHN0cmluZzogc3RyaW5nLFxuICBtZXRob2Q6IG1ldGhvZCxcbiAgbnVtYmVyOiBudW1iZXIsXG4gIFwiYm9vbGVhblwiOiBfYm9vbGVhbixcbiAgcmVnZXhwOiByZWdleHAsXG4gIGludGVnZXI6IGludGVnZXIsXG4gIFwiZmxvYXRcIjogZmxvYXRGbixcbiAgYXJyYXk6IGFycmF5LFxuICBvYmplY3Q6IG9iamVjdCxcbiAgXCJlbnVtXCI6IGVudW1lcmFibGUkMSxcbiAgcGF0dGVybjogcGF0dGVybiQyLFxuICBkYXRlOiBkYXRlLFxuICB1cmw6IHR5cGUkMSxcbiAgaGV4OiB0eXBlJDEsXG4gIGVtYWlsOiB0eXBlJDEsXG4gIHJlcXVpcmVkOiByZXF1aXJlZCQxLFxuICBhbnk6IGFueVxufTtcblxuZnVuY3Rpb24gbmV3TWVzc2FnZXMoKSB7XG4gIHJldHVybiB7XG4gICAgXCJkZWZhdWx0XCI6ICdWYWxpZGF0aW9uIGVycm9yIG9uIGZpZWxkICVzJyxcbiAgICByZXF1aXJlZDogJyVzIGlzIHJlcXVpcmVkJyxcbiAgICBcImVudW1cIjogJyVzIG11c3QgYmUgb25lIG9mICVzJyxcbiAgICB3aGl0ZXNwYWNlOiAnJXMgY2Fubm90IGJlIGVtcHR5JyxcbiAgICBkYXRlOiB7XG4gICAgICBmb3JtYXQ6ICclcyBkYXRlICVzIGlzIGludmFsaWQgZm9yIGZvcm1hdCAlcycsXG4gICAgICBwYXJzZTogJyVzIGRhdGUgY291bGQgbm90IGJlIHBhcnNlZCwgJXMgaXMgaW52YWxpZCAnLFxuICAgICAgaW52YWxpZDogJyVzIGRhdGUgJXMgaXMgaW52YWxpZCdcbiAgICB9LFxuICAgIHR5cGVzOiB7XG4gICAgICBzdHJpbmc6ICclcyBpcyBub3QgYSAlcycsXG4gICAgICBtZXRob2Q6ICclcyBpcyBub3QgYSAlcyAoZnVuY3Rpb24pJyxcbiAgICAgIGFycmF5OiAnJXMgaXMgbm90IGFuICVzJyxcbiAgICAgIG9iamVjdDogJyVzIGlzIG5vdCBhbiAlcycsXG4gICAgICBudW1iZXI6ICclcyBpcyBub3QgYSAlcycsXG4gICAgICBkYXRlOiAnJXMgaXMgbm90IGEgJXMnLFxuICAgICAgXCJib29sZWFuXCI6ICclcyBpcyBub3QgYSAlcycsXG4gICAgICBpbnRlZ2VyOiAnJXMgaXMgbm90IGFuICVzJyxcbiAgICAgIFwiZmxvYXRcIjogJyVzIGlzIG5vdCBhICVzJyxcbiAgICAgIHJlZ2V4cDogJyVzIGlzIG5vdCBhIHZhbGlkICVzJyxcbiAgICAgIGVtYWlsOiAnJXMgaXMgbm90IGEgdmFsaWQgJXMnLFxuICAgICAgdXJsOiAnJXMgaXMgbm90IGEgdmFsaWQgJXMnLFxuICAgICAgaGV4OiAnJXMgaXMgbm90IGEgdmFsaWQgJXMnXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIGxlbjogJyVzIG11c3QgYmUgZXhhY3RseSAlcyBjaGFyYWN0ZXJzJyxcbiAgICAgIG1pbjogJyVzIG11c3QgYmUgYXQgbGVhc3QgJXMgY2hhcmFjdGVycycsXG4gICAgICBtYXg6ICclcyBjYW5ub3QgYmUgbG9uZ2VyIHRoYW4gJXMgY2hhcmFjdGVycycsXG4gICAgICByYW5nZTogJyVzIG11c3QgYmUgYmV0d2VlbiAlcyBhbmQgJXMgY2hhcmFjdGVycydcbiAgICB9LFxuICAgIG51bWJlcjoge1xuICAgICAgbGVuOiAnJXMgbXVzdCBlcXVhbCAlcycsXG4gICAgICBtaW46ICclcyBjYW5ub3QgYmUgbGVzcyB0aGFuICVzJyxcbiAgICAgIG1heDogJyVzIGNhbm5vdCBiZSBncmVhdGVyIHRoYW4gJXMnLFxuICAgICAgcmFuZ2U6ICclcyBtdXN0IGJlIGJldHdlZW4gJXMgYW5kICVzJ1xuICAgIH0sXG4gICAgYXJyYXk6IHtcbiAgICAgIGxlbjogJyVzIG11c3QgYmUgZXhhY3RseSAlcyBpbiBsZW5ndGgnLFxuICAgICAgbWluOiAnJXMgY2Fubm90IGJlIGxlc3MgdGhhbiAlcyBpbiBsZW5ndGgnLFxuICAgICAgbWF4OiAnJXMgY2Fubm90IGJlIGdyZWF0ZXIgdGhhbiAlcyBpbiBsZW5ndGgnLFxuICAgICAgcmFuZ2U6ICclcyBtdXN0IGJlIGJldHdlZW4gJXMgYW5kICVzIGluIGxlbmd0aCdcbiAgICB9LFxuICAgIHBhdHRlcm46IHtcbiAgICAgIG1pc21hdGNoOiAnJXMgdmFsdWUgJXMgZG9lcyBub3QgbWF0Y2ggcGF0dGVybiAlcydcbiAgICB9LFxuICAgIGNsb25lOiBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICAgIHZhciBjbG9uZWQgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMpKTtcbiAgICAgIGNsb25lZC5jbG9uZSA9IHRoaXMuY2xvbmU7XG4gICAgICByZXR1cm4gY2xvbmVkO1xuICAgIH1cbiAgfTtcbn1cbnZhciBtZXNzYWdlcyA9IG5ld01lc3NhZ2VzKCk7XG5cbi8qKlxuICogIEVuY2Fwc3VsYXRlcyBhIHZhbGlkYXRpb24gc2NoZW1hLlxuICpcbiAqICBAcGFyYW0gZGVzY3JpcHRvciBBbiBvYmplY3QgZGVjbGFyaW5nIHZhbGlkYXRpb24gcnVsZXNcbiAqICBmb3IgdGhpcyBzY2hlbWEuXG4gKi9cblxuZnVuY3Rpb24gU2NoZW1hKGRlc2NyaXB0b3IpIHtcbiAgdGhpcy5ydWxlcyA9IG51bGw7XG4gIHRoaXMuX21lc3NhZ2VzID0gbWVzc2FnZXM7XG4gIHRoaXMuZGVmaW5lKGRlc2NyaXB0b3IpO1xufVxuXG5TY2hlbWEucHJvdG90eXBlID0ge1xuICBtZXNzYWdlczogZnVuY3Rpb24gbWVzc2FnZXMoX21lc3NhZ2VzKSB7XG4gICAgaWYgKF9tZXNzYWdlcykge1xuICAgICAgdGhpcy5fbWVzc2FnZXMgPSBkZWVwTWVyZ2UobmV3TWVzc2FnZXMoKSwgX21lc3NhZ2VzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fbWVzc2FnZXM7XG4gIH0sXG4gIGRlZmluZTogZnVuY3Rpb24gZGVmaW5lKHJ1bGVzKSB7XG4gICAgaWYgKCFydWxlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgY29uZmlndXJlIGEgc2NoZW1hIHdpdGggbm8gcnVsZXMnKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJ1bGVzICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KHJ1bGVzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSdWxlcyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMgPSB7fTtcbiAgICB2YXIgejtcbiAgICB2YXIgaXRlbTtcblxuICAgIGZvciAoeiBpbiBydWxlcykge1xuICAgICAgaWYgKHJ1bGVzLmhhc093blByb3BlcnR5KHopKSB7XG4gICAgICAgIGl0ZW0gPSBydWxlc1t6XTtcbiAgICAgICAgdGhpcy5ydWxlc1t6XSA9IEFycmF5LmlzQXJyYXkoaXRlbSkgPyBpdGVtIDogW2l0ZW1dO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgdmFsaWRhdGU6IGZ1bmN0aW9uIHZhbGlkYXRlKHNvdXJjZV8sIG8sIG9jKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmIChvID09PSB2b2lkIDApIHtcbiAgICAgIG8gPSB7fTtcbiAgICB9XG5cbiAgICBpZiAob2MgPT09IHZvaWQgMCkge1xuICAgICAgb2MgPSBmdW5jdGlvbiBvYygpIHt9O1xuICAgIH1cblxuICAgIHZhciBzb3VyY2UgPSBzb3VyY2VfO1xuICAgIHZhciBvcHRpb25zID0gbztcbiAgICB2YXIgY2FsbGJhY2sgPSBvYztcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmICghdGhpcy5ydWxlcyB8fCBPYmplY3Qua2V5cyh0aGlzLnJ1bGVzKS5sZW5ndGggPT09IDApIHtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcGxldGUocmVzdWx0cykge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgZXJyb3JzID0gW107XG4gICAgICB2YXIgZmllbGRzID0ge307XG5cbiAgICAgIGZ1bmN0aW9uIGFkZChlKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgICAgICAgdmFyIF9lcnJvcnM7XG5cbiAgICAgICAgICBlcnJvcnMgPSAoX2Vycm9ycyA9IGVycm9ycykuY29uY2F0LmFwcGx5KF9lcnJvcnMsIGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVycm9ycy5wdXNoKGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFkZChyZXN1bHRzW2ldKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFlcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgIGVycm9ycyA9IG51bGw7XG4gICAgICAgIGZpZWxkcyA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaWVsZHMgPSBjb252ZXJ0RmllbGRzRXJyb3IoZXJyb3JzKTtcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2soZXJyb3JzLCBmaWVsZHMpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLm1lc3NhZ2VzKSB7XG4gICAgICB2YXIgbWVzc2FnZXMkMSA9IHRoaXMubWVzc2FnZXMoKTtcblxuICAgICAgaWYgKG1lc3NhZ2VzJDEgPT09IG1lc3NhZ2VzKSB7XG4gICAgICAgIG1lc3NhZ2VzJDEgPSBuZXdNZXNzYWdlcygpO1xuICAgICAgfVxuXG4gICAgICBkZWVwTWVyZ2UobWVzc2FnZXMkMSwgb3B0aW9ucy5tZXNzYWdlcyk7XG4gICAgICBvcHRpb25zLm1lc3NhZ2VzID0gbWVzc2FnZXMkMTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucy5tZXNzYWdlcyA9IHRoaXMubWVzc2FnZXMoKTtcbiAgICB9XG5cbiAgICB2YXIgYXJyO1xuICAgIHZhciB2YWx1ZTtcbiAgICB2YXIgc2VyaWVzID0ge307XG4gICAgdmFyIGtleXMgPSBvcHRpb25zLmtleXMgfHwgT2JqZWN0LmtleXModGhpcy5ydWxlcyk7XG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uICh6KSB7XG4gICAgICBhcnIgPSBfdGhpcy5ydWxlc1t6XTtcbiAgICAgIHZhbHVlID0gc291cmNlW3pdO1xuICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgdmFyIHJ1bGUgPSByO1xuXG4gICAgICAgIGlmICh0eXBlb2YgcnVsZS50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBpZiAoc291cmNlID09PSBzb3VyY2VfKSB7XG4gICAgICAgICAgICBzb3VyY2UgPSBfZXh0ZW5kcyh7fSwgc291cmNlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YWx1ZSA9IHNvdXJjZVt6XSA9IHJ1bGUudHJhbnNmb3JtKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgcnVsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJ1bGUgPSB7XG4gICAgICAgICAgICB2YWxpZGF0b3I6IHJ1bGVcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJ1bGUgPSBfZXh0ZW5kcyh7fSwgcnVsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBydWxlLnZhbGlkYXRvciA9IF90aGlzLmdldFZhbGlkYXRpb25NZXRob2QocnVsZSk7XG4gICAgICAgIHJ1bGUuZmllbGQgPSB6O1xuICAgICAgICBydWxlLmZ1bGxGaWVsZCA9IHJ1bGUuZnVsbEZpZWxkIHx8IHo7XG4gICAgICAgIHJ1bGUudHlwZSA9IF90aGlzLmdldFR5cGUocnVsZSk7XG5cbiAgICAgICAgaWYgKCFydWxlLnZhbGlkYXRvcikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlcmllc1t6XSA9IHNlcmllc1t6XSB8fCBbXTtcbiAgICAgICAgc2VyaWVzW3pdLnB1c2goe1xuICAgICAgICAgIHJ1bGU6IHJ1bGUsXG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgIGZpZWxkOiB6XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIGVycm9yRmllbGRzID0ge307XG4gICAgcmV0dXJuIGFzeW5jTWFwKHNlcmllcywgb3B0aW9ucywgZnVuY3Rpb24gKGRhdGEsIGRvSXQpIHtcbiAgICAgIHZhciBydWxlID0gZGF0YS5ydWxlO1xuICAgICAgdmFyIGRlZXAgPSAocnVsZS50eXBlID09PSAnb2JqZWN0JyB8fCBydWxlLnR5cGUgPT09ICdhcnJheScpICYmICh0eXBlb2YgcnVsZS5maWVsZHMgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBydWxlLmRlZmF1bHRGaWVsZCA9PT0gJ29iamVjdCcpO1xuICAgICAgZGVlcCA9IGRlZXAgJiYgKHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgZGF0YS52YWx1ZSk7XG4gICAgICBydWxlLmZpZWxkID0gZGF0YS5maWVsZDtcblxuICAgICAgZnVuY3Rpb24gYWRkRnVsbGZpZWxkKGtleSwgc2NoZW1hKSB7XG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgc2NoZW1hKSwge30sIHtcbiAgICAgICAgICBmdWxsRmllbGQ6IHJ1bGUuZnVsbEZpZWxkICsgXCIuXCIgKyBrZXlcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNiKGUpIHtcbiAgICAgICAgaWYgKGUgPT09IHZvaWQgMCkge1xuICAgICAgICAgIGUgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlcnJvcnMgPSBlO1xuXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShlcnJvcnMpKSB7XG4gICAgICAgICAgZXJyb3JzID0gW2Vycm9yc107XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW9wdGlvbnMuc3VwcHJlc3NXYXJuaW5nICYmIGVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICBTY2hlbWEud2FybmluZygnYXN5bmMtdmFsaWRhdG9yOicsIGVycm9ycyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCAmJiBydWxlLm1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGVycm9ycyA9IFtdLmNvbmNhdChydWxlLm1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgZXJyb3JzID0gZXJyb3JzLm1hcChjb21wbGVtZW50RXJyb3IocnVsZSkpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmZpcnN0ICYmIGVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICBlcnJvckZpZWxkc1tydWxlLmZpZWxkXSA9IDE7XG4gICAgICAgICAgcmV0dXJuIGRvSXQoZXJyb3JzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZGVlcCkge1xuICAgICAgICAgIGRvSXQoZXJyb3JzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBpZiBydWxlIGlzIHJlcXVpcmVkIGJ1dCB0aGUgdGFyZ2V0IG9iamVjdFxuICAgICAgICAgIC8vIGRvZXMgbm90IGV4aXN0IGZhaWwgYXQgdGhlIHJ1bGUgbGV2ZWwgYW5kIGRvbid0XG4gICAgICAgICAgLy8gZ28gZGVlcGVyXG4gICAgICAgICAgaWYgKHJ1bGUucmVxdWlyZWQgJiYgIWRhdGEudmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChydWxlLm1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBlcnJvcnMgPSBbXS5jb25jYXQocnVsZS5tZXNzYWdlKS5tYXAoY29tcGxlbWVudEVycm9yKHJ1bGUpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5lcnJvcikge1xuICAgICAgICAgICAgICBlcnJvcnMgPSBbb3B0aW9ucy5lcnJvcihydWxlLCBmb3JtYXQob3B0aW9ucy5tZXNzYWdlcy5yZXF1aXJlZCwgcnVsZS5maWVsZCkpXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGRvSXQoZXJyb3JzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgZmllbGRzU2NoZW1hID0ge307XG5cbiAgICAgICAgICBpZiAocnVsZS5kZWZhdWx0RmllbGQpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gZGF0YS52YWx1ZSkge1xuICAgICAgICAgICAgICBpZiAoZGF0YS52YWx1ZS5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgIGZpZWxkc1NjaGVtYVtrXSA9IHJ1bGUuZGVmYXVsdEZpZWxkO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmllbGRzU2NoZW1hID0gX2V4dGVuZHMoX2V4dGVuZHMoe30sIGZpZWxkc1NjaGVtYSksIGRhdGEucnVsZS5maWVsZHMpO1xuXG4gICAgICAgICAgZm9yICh2YXIgZiBpbiBmaWVsZHNTY2hlbWEpIHtcbiAgICAgICAgICAgIGlmIChmaWVsZHNTY2hlbWEuaGFzT3duUHJvcGVydHkoZikpIHtcbiAgICAgICAgICAgICAgdmFyIGZpZWxkU2NoZW1hID0gQXJyYXkuaXNBcnJheShmaWVsZHNTY2hlbWFbZl0pID8gZmllbGRzU2NoZW1hW2ZdIDogW2ZpZWxkc1NjaGVtYVtmXV07XG4gICAgICAgICAgICAgIGZpZWxkc1NjaGVtYVtmXSA9IGZpZWxkU2NoZW1hLm1hcChhZGRGdWxsZmllbGQuYmluZChudWxsLCBmKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHNjaGVtYSA9IG5ldyBTY2hlbWEoZmllbGRzU2NoZW1hKTtcbiAgICAgICAgICBzY2hlbWEubWVzc2FnZXMob3B0aW9ucy5tZXNzYWdlcyk7XG5cbiAgICAgICAgICBpZiAoZGF0YS5ydWxlLm9wdGlvbnMpIHtcbiAgICAgICAgICAgIGRhdGEucnVsZS5vcHRpb25zLm1lc3NhZ2VzID0gb3B0aW9ucy5tZXNzYWdlcztcbiAgICAgICAgICAgIGRhdGEucnVsZS5vcHRpb25zLmVycm9yID0gb3B0aW9ucy5lcnJvcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzY2hlbWEudmFsaWRhdGUoZGF0YS52YWx1ZSwgZGF0YS5ydWxlLm9wdGlvbnMgfHwgb3B0aW9ucywgZnVuY3Rpb24gKGVycnMpIHtcbiAgICAgICAgICAgIHZhciBmaW5hbEVycm9ycyA9IFtdO1xuXG4gICAgICAgICAgICBpZiAoZXJyb3JzICYmIGVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgZmluYWxFcnJvcnMucHVzaC5hcHBseShmaW5hbEVycm9ycywgZXJyb3JzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVycnMgJiYgZXJycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgZmluYWxFcnJvcnMucHVzaC5hcHBseShmaW5hbEVycm9ycywgZXJycyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRvSXQoZmluYWxFcnJvcnMubGVuZ3RoID8gZmluYWxFcnJvcnMgOiBudWxsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgcmVzO1xuXG4gICAgICBpZiAocnVsZS5hc3luY1ZhbGlkYXRvcikge1xuICAgICAgICByZXMgPSBydWxlLmFzeW5jVmFsaWRhdG9yKHJ1bGUsIGRhdGEudmFsdWUsIGNiLCBkYXRhLnNvdXJjZSwgb3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKHJ1bGUudmFsaWRhdG9yKSB7XG4gICAgICAgIHJlcyA9IHJ1bGUudmFsaWRhdG9yKHJ1bGUsIGRhdGEudmFsdWUsIGNiLCBkYXRhLnNvdXJjZSwgb3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKHJlcyA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNiKCk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzID09PSBmYWxzZSkge1xuICAgICAgICAgIGNiKHJ1bGUubWVzc2FnZSB8fCBydWxlLmZpZWxkICsgXCIgZmFpbHNcIik7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICBjYihyZXMpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlcyBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgY2IocmVzLm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXMgJiYgcmVzLnRoZW4pIHtcbiAgICAgICAgcmVzLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBjYigpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHJldHVybiBjYihlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwgZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgICAgIGNvbXBsZXRlKHJlc3VsdHMpO1xuICAgIH0pO1xuICB9LFxuICBnZXRUeXBlOiBmdW5jdGlvbiBnZXRUeXBlKHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlID09PSB1bmRlZmluZWQgJiYgcnVsZS5wYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICBydWxlLnR5cGUgPSAncGF0dGVybic7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBydWxlLnZhbGlkYXRvciAhPT0gJ2Z1bmN0aW9uJyAmJiBydWxlLnR5cGUgJiYgIXZhbGlkYXRvcnMuaGFzT3duUHJvcGVydHkocnVsZS50eXBlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGZvcm1hdCgnVW5rbm93biBydWxlIHR5cGUgJXMnLCBydWxlLnR5cGUpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcnVsZS50eXBlIHx8ICdzdHJpbmcnO1xuICB9LFxuICBnZXRWYWxpZGF0aW9uTWV0aG9kOiBmdW5jdGlvbiBnZXRWYWxpZGF0aW9uTWV0aG9kKHJ1bGUpIHtcbiAgICBpZiAodHlwZW9mIHJ1bGUudmFsaWRhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gcnVsZS52YWxpZGF0b3I7XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhydWxlKTtcbiAgICB2YXIgbWVzc2FnZUluZGV4ID0ga2V5cy5pbmRleE9mKCdtZXNzYWdlJyk7XG5cbiAgICBpZiAobWVzc2FnZUluZGV4ICE9PSAtMSkge1xuICAgICAga2V5cy5zcGxpY2UobWVzc2FnZUluZGV4LCAxKTtcbiAgICB9XG5cbiAgICBpZiAoa2V5cy5sZW5ndGggPT09IDEgJiYga2V5c1swXSA9PT0gJ3JlcXVpcmVkJykge1xuICAgICAgcmV0dXJuIHZhbGlkYXRvcnMucmVxdWlyZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvcnNbdGhpcy5nZXRUeXBlKHJ1bGUpXSB8fCBmYWxzZTtcbiAgfVxufTtcblxuU2NoZW1hLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIodHlwZSwgdmFsaWRhdG9yKSB7XG4gIGlmICh0eXBlb2YgdmFsaWRhdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgcmVnaXN0ZXIgYSB2YWxpZGF0b3IgYnkgdHlwZSwgdmFsaWRhdG9yIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICB2YWxpZGF0b3JzW3R5cGVdID0gdmFsaWRhdG9yO1xufTtcblxuU2NoZW1hLndhcm5pbmcgPSB3YXJuaW5nO1xuU2NoZW1hLm1lc3NhZ2VzID0gbWVzc2FnZXM7XG5TY2hlbWEudmFsaWRhdG9ycyA9IHZhbGlkYXRvcnM7XG5cbmV4cG9ydCBkZWZhdWx0IFNjaGVtYTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59IiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX3RvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQXJyYXlcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldChlbnRpdHksIHBhdGhzLCB2YWx1ZSkge1xuICBpZiAoIXBhdGhzLmxlbmd0aCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHZhciBfcGF0aHMgPSBfdG9BcnJheShwYXRocyksXG4gICAgICBwYXRoID0gX3BhdGhzWzBdLFxuICAgICAgcmVzdFBhdGggPSBfcGF0aHMuc2xpY2UoMSk7XG5cbiAgdmFyIGNsb25lO1xuXG4gIGlmICghZW50aXR5ICYmIHR5cGVvZiBwYXRoID09PSAnbnVtYmVyJykge1xuICAgIGNsb25lID0gW107XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShlbnRpdHkpKSB7XG4gICAgY2xvbmUgPSBfdG9Db25zdW1hYmxlQXJyYXkoZW50aXR5KTtcbiAgfSBlbHNlIHtcbiAgICBjbG9uZSA9IF9vYmplY3RTcHJlYWQoe30sIGVudGl0eSk7XG4gIH1cblxuICBjbG9uZVtwYXRoXSA9IHNldChjbG9uZVtwYXRoXSwgcmVzdFBhdGgsIHZhbHVlKTtcbiAgcmV0dXJuIGNsb25lO1xufSIsImltcG9ydCBhcnJheVdpdGhIb2xlcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRoSG9sZXNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheVwiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheVwiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlUmVzdCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVSZXN0XCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9BcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn0iLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCBnZXQgZnJvbSBcInJjLXV0aWwvZXMvdXRpbHMvZ2V0XCI7XG5pbXBvcnQgc2V0IGZyb20gXCJyYy11dGlsL2VzL3V0aWxzL3NldFwiO1xuaW1wb3J0IHsgdG9BcnJheSB9IGZyb20gJy4vdHlwZVV0aWwnO1xuLyoqXG4gKiBDb252ZXJ0IG5hbWUgdG8gaW50ZXJuYWwgc3VwcG9ydGVkIGZvcm1hdC5cbiAqIFRoaXMgZnVuY3Rpb24gc2hvdWxkIGtlZXAgc2luY2Ugd2Ugc3RpbGwgdGhpbmtpbmcgaWYgbmVlZCBzdXBwb3J0IGxpa2UgYGEuYi5jYCBmb3JtYXQuXG4gKiAnYScgPT4gWydhJ11cbiAqIDEyMyA9PiBbMTIzXVxuICogWydhJywgMTIzXSA9PiBbJ2EnLCAxMjNdXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE5hbWVQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHRvQXJyYXkocGF0aCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWUoc3RvcmUsIG5hbWVQYXRoKSB7XG4gIHZhciB2YWx1ZSA9IGdldChzdG9yZSwgbmFtZVBhdGgpO1xuICByZXR1cm4gdmFsdWU7XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0VmFsdWUoc3RvcmUsIG5hbWVQYXRoLCB2YWx1ZSkge1xuICB2YXIgbmV3U3RvcmUgPSBzZXQoc3RvcmUsIG5hbWVQYXRoLCB2YWx1ZSk7XG4gIHJldHVybiBuZXdTdG9yZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZUJ5TmFtZVBhdGhMaXN0KHN0b3JlLCBuYW1lUGF0aExpc3QpIHtcbiAgdmFyIG5ld1N0b3JlID0ge307XG4gIG5hbWVQYXRoTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lUGF0aCkge1xuICAgIHZhciB2YWx1ZSA9IGdldFZhbHVlKHN0b3JlLCBuYW1lUGF0aCk7XG4gICAgbmV3U3RvcmUgPSBzZXRWYWx1ZShuZXdTdG9yZSwgbmFtZVBhdGgsIHZhbHVlKTtcbiAgfSk7XG4gIHJldHVybiBuZXdTdG9yZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb250YWluc05hbWVQYXRoKG5hbWVQYXRoTGlzdCwgbmFtZVBhdGgpIHtcbiAgcmV0dXJuIG5hbWVQYXRoTGlzdCAmJiBuYW1lUGF0aExpc3Quc29tZShmdW5jdGlvbiAocGF0aCkge1xuICAgIHJldHVybiBtYXRjaE5hbWVQYXRoKHBhdGgsIG5hbWVQYXRoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICByZXR1cm4gX3R5cGVvZihvYmopID09PSAnb2JqZWN0JyAmJiBvYmogIT09IG51bGwgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IE9iamVjdC5wcm90b3R5cGU7XG59XG4vKipcbiAqIENvcHkgdmFsdWVzIGludG8gc3RvcmUgYW5kIHJldHVybiBhIG5ldyB2YWx1ZXMgb2JqZWN0XG4gKiAoeyBhOiAxLCBiOiB7IGM6IDIgfSB9LCB7IGE6IDQsIGI6IHsgZDogNSB9IH0pID0+IHsgYTogNCwgYjogeyBjOiAyLCBkOiA1IH0gfVxuICovXG5cblxuZnVuY3Rpb24gaW50ZXJuYWxTZXRWYWx1ZXMoc3RvcmUsIHZhbHVlcykge1xuICB2YXIgbmV3U3RvcmUgPSBBcnJheS5pc0FycmF5KHN0b3JlKSA/IF90b0NvbnN1bWFibGVBcnJheShzdG9yZSkgOiBfb2JqZWN0U3ByZWFkKHt9LCBzdG9yZSk7XG5cbiAgaWYgKCF2YWx1ZXMpIHtcbiAgICByZXR1cm4gbmV3U3RvcmU7XG4gIH1cblxuICBPYmplY3Qua2V5cyh2YWx1ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBwcmV2VmFsdWUgPSBuZXdTdG9yZVtrZXldO1xuICAgIHZhciB2YWx1ZSA9IHZhbHVlc1trZXldOyAvLyBJZiBib3RoIGFyZSBvYmplY3QgKGJ1dCB0YXJnZXQgaXMgbm90IGFycmF5KSwgd2UgdXNlIHJlY3Vyc2lvbiB0byBzZXQgZGVlcCB2YWx1ZVxuXG4gICAgdmFyIHJlY3Vyc2l2ZSA9IGlzT2JqZWN0KHByZXZWYWx1ZSkgJiYgaXNPYmplY3QodmFsdWUpO1xuICAgIG5ld1N0b3JlW2tleV0gPSByZWN1cnNpdmUgPyBpbnRlcm5hbFNldFZhbHVlcyhwcmV2VmFsdWUsIHZhbHVlIHx8IHt9KSA6IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIG5ld1N0b3JlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0VmFsdWVzKHN0b3JlKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCByZXN0VmFsdWVzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICByZXN0VmFsdWVzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiByZXN0VmFsdWVzLnJlZHVjZShmdW5jdGlvbiAoY3VycmVudCwgbmV3U3RvcmUpIHtcbiAgICByZXR1cm4gaW50ZXJuYWxTZXRWYWx1ZXMoY3VycmVudCwgbmV3U3RvcmUpO1xuICB9LCBzdG9yZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hOYW1lUGF0aChuYW1lUGF0aCwgY2hhbmdlZE5hbWVQYXRoKSB7XG4gIGlmICghbmFtZVBhdGggfHwgIWNoYW5nZWROYW1lUGF0aCB8fCBuYW1lUGF0aC5sZW5ndGggIT09IGNoYW5nZWROYW1lUGF0aC5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gbmFtZVBhdGguZXZlcnkoZnVuY3Rpb24gKG5hbWVVbml0LCBpKSB7XG4gICAgcmV0dXJuIGNoYW5nZWROYW1lUGF0aFtpXSA9PT0gbmFtZVVuaXQ7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU2ltaWxhcihzb3VyY2UsIHRhcmdldCkge1xuICBpZiAoc291cmNlID09PSB0YXJnZXQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICghc291cmNlICYmIHRhcmdldCB8fCBzb3VyY2UgJiYgIXRhcmdldCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICghc291cmNlIHx8ICF0YXJnZXQgfHwgX3R5cGVvZihzb3VyY2UpICE9PSAnb2JqZWN0JyB8fCBfdHlwZW9mKHRhcmdldCkgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIgdGFyZ2V0S2V5cyA9IE9iamVjdC5rZXlzKHRhcmdldCk7XG4gIHZhciBrZXlzID0gbmV3IFNldChbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHNvdXJjZUtleXMpLCBfdG9Db25zdW1hYmxlQXJyYXkodGFyZ2V0S2V5cykpKTtcbiAgcmV0dXJuIF90b0NvbnN1bWFibGVBcnJheShrZXlzKS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHNvdXJjZVZhbHVlID0gc291cmNlW2tleV07XG4gICAgdmFyIHRhcmdldFZhbHVlID0gdGFyZ2V0W2tleV07XG5cbiAgICBpZiAodHlwZW9mIHNvdXJjZVZhbHVlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB0YXJnZXRWYWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNvdXJjZVZhbHVlID09PSB0YXJnZXRWYWx1ZTtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdEdldFZhbHVlRnJvbUV2ZW50KHZhbHVlUHJvcE5hbWUpIHtcbiAgdmFyIGV2ZW50ID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdO1xuXG4gIGlmIChldmVudCAmJiBldmVudC50YXJnZXQgJiYgdmFsdWVQcm9wTmFtZSBpbiBldmVudC50YXJnZXQpIHtcbiAgICByZXR1cm4gZXZlbnQudGFyZ2V0W3ZhbHVlUHJvcE5hbWVdO1xuICB9XG5cbiAgcmV0dXJuIGV2ZW50O1xufVxuLyoqXG4gKiBNb3ZlcyBhbiBhcnJheSBpdGVtIGZyb20gb25lIHBvc2l0aW9uIGluIGFuIGFycmF5IHRvIGFub3RoZXIuXG4gKlxuICogTm90ZTogVGhpcyBpcyBhIHB1cmUgZnVuY3Rpb24gc28gYSBuZXcgYXJyYXkgd2lsbCBiZSByZXR1cm5lZCwgaW5zdGVhZFxuICogb2YgYWx0ZXJpbmcgdGhlIGFycmF5IGFyZ3VtZW50LlxuICpcbiAqIEBwYXJhbSBhcnJheSAgICAgICAgIEFycmF5IGluIHdoaWNoIHRvIG1vdmUgYW4gaXRlbS4gICAgICAgICAocmVxdWlyZWQpXG4gKiBAcGFyYW0gbW92ZUluZGV4ICAgICBUaGUgaW5kZXggb2YgdGhlIGl0ZW0gdG8gbW92ZS4gICAgICAgICAgKHJlcXVpcmVkKVxuICogQHBhcmFtIHRvSW5kZXggICAgICAgVGhlIGluZGV4IHRvIG1vdmUgaXRlbSBhdCBtb3ZlSW5kZXggdG8uIChyZXF1aXJlZClcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbW92ZShhcnJheSwgbW92ZUluZGV4LCB0b0luZGV4KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgaWYgKG1vdmVJbmRleCA8IDAgfHwgbW92ZUluZGV4ID49IGxlbmd0aCB8fCB0b0luZGV4IDwgMCB8fCB0b0luZGV4ID49IGxlbmd0aCkge1xuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIHZhciBpdGVtID0gYXJyYXlbbW92ZUluZGV4XTtcbiAgdmFyIGRpZmYgPSBtb3ZlSW5kZXggLSB0b0luZGV4O1xuXG4gIGlmIChkaWZmID4gMCkge1xuICAgIC8vIG1vdmUgbGVmdFxuICAgIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGFycmF5LnNsaWNlKDAsIHRvSW5kZXgpKSwgW2l0ZW1dLCBfdG9Db25zdW1hYmxlQXJyYXkoYXJyYXkuc2xpY2UodG9JbmRleCwgbW92ZUluZGV4KSksIF90b0NvbnN1bWFibGVBcnJheShhcnJheS5zbGljZShtb3ZlSW5kZXggKyAxLCBsZW5ndGgpKSk7XG4gIH1cblxuICBpZiAoZGlmZiA8IDApIHtcbiAgICAvLyBtb3ZlIHJpZ2h0XG4gICAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYXJyYXkuc2xpY2UoMCwgbW92ZUluZGV4KSksIF90b0NvbnN1bWFibGVBcnJheShhcnJheS5zbGljZShtb3ZlSW5kZXggKyAxLCB0b0luZGV4ICsgMSkpLCBbaXRlbV0sIF90b0NvbnN1bWFibGVBcnJheShhcnJheS5zbGljZSh0b0luZGV4ICsgMSwgbGVuZ3RoKSkpO1xuICB9XG5cbiAgcmV0dXJuIGFycmF5O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldChlbnRpdHksIHBhdGgpIHtcbiAgdmFyIGN1cnJlbnQgPSBlbnRpdHk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGN1cnJlbnQgPT09IG51bGwgfHwgY3VycmVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGN1cnJlbnQgPSBjdXJyZW50W3BhdGhbaV1dO1xuICB9XG5cbiAgcmV0dXJuIGN1cnJlbnQ7XG59IiwidmFyIHR5cGVUZW1wbGF0ZSA9IFwiJyR7bmFtZX0nIGlzIG5vdCBhIHZhbGlkICR7dHlwZX1cIjtcbmV4cG9ydCB2YXIgZGVmYXVsdFZhbGlkYXRlTWVzc2FnZXMgPSB7XG4gIGRlZmF1bHQ6IFwiVmFsaWRhdGlvbiBlcnJvciBvbiBmaWVsZCAnJHtuYW1lfSdcIixcbiAgcmVxdWlyZWQ6IFwiJyR7bmFtZX0nIGlzIHJlcXVpcmVkXCIsXG4gIGVudW06IFwiJyR7bmFtZX0nIG11c3QgYmUgb25lIG9mIFske2VudW19XVwiLFxuICB3aGl0ZXNwYWNlOiBcIicke25hbWV9JyBjYW5ub3QgYmUgZW1wdHlcIixcbiAgZGF0ZToge1xuICAgIGZvcm1hdDogXCInJHtuYW1lfScgaXMgaW52YWxpZCBmb3IgZm9ybWF0IGRhdGVcIixcbiAgICBwYXJzZTogXCInJHtuYW1lfScgY291bGQgbm90IGJlIHBhcnNlZCBhcyBkYXRlXCIsXG4gICAgaW52YWxpZDogXCInJHtuYW1lfScgaXMgaW52YWxpZCBkYXRlXCJcbiAgfSxcbiAgdHlwZXM6IHtcbiAgICBzdHJpbmc6IHR5cGVUZW1wbGF0ZSxcbiAgICBtZXRob2Q6IHR5cGVUZW1wbGF0ZSxcbiAgICBhcnJheTogdHlwZVRlbXBsYXRlLFxuICAgIG9iamVjdDogdHlwZVRlbXBsYXRlLFxuICAgIG51bWJlcjogdHlwZVRlbXBsYXRlLFxuICAgIGRhdGU6IHR5cGVUZW1wbGF0ZSxcbiAgICBib29sZWFuOiB0eXBlVGVtcGxhdGUsXG4gICAgaW50ZWdlcjogdHlwZVRlbXBsYXRlLFxuICAgIGZsb2F0OiB0eXBlVGVtcGxhdGUsXG4gICAgcmVnZXhwOiB0eXBlVGVtcGxhdGUsXG4gICAgZW1haWw6IHR5cGVUZW1wbGF0ZSxcbiAgICB1cmw6IHR5cGVUZW1wbGF0ZSxcbiAgICBoZXg6IHR5cGVUZW1wbGF0ZVxuICB9LFxuICBzdHJpbmc6IHtcbiAgICBsZW46IFwiJyR7bmFtZX0nIG11c3QgYmUgZXhhY3RseSAke2xlbn0gY2hhcmFjdGVyc1wiLFxuICAgIG1pbjogXCInJHtuYW1lfScgbXVzdCBiZSBhdCBsZWFzdCAke21pbn0gY2hhcmFjdGVyc1wiLFxuICAgIG1heDogXCInJHtuYW1lfScgY2Fubm90IGJlIGxvbmdlciB0aGFuICR7bWF4fSBjaGFyYWN0ZXJzXCIsXG4gICAgcmFuZ2U6IFwiJyR7bmFtZX0nIG11c3QgYmUgYmV0d2VlbiAke21pbn0gYW5kICR7bWF4fSBjaGFyYWN0ZXJzXCJcbiAgfSxcbiAgbnVtYmVyOiB7XG4gICAgbGVuOiBcIicke25hbWV9JyBtdXN0IGVxdWFsICR7bGVufVwiLFxuICAgIG1pbjogXCInJHtuYW1lfScgY2Fubm90IGJlIGxlc3MgdGhhbiAke21pbn1cIixcbiAgICBtYXg6IFwiJyR7bmFtZX0nIGNhbm5vdCBiZSBncmVhdGVyIHRoYW4gJHttYXh9XCIsXG4gICAgcmFuZ2U6IFwiJyR7bmFtZX0nIG11c3QgYmUgYmV0d2VlbiAke21pbn0gYW5kICR7bWF4fVwiXG4gIH0sXG4gIGFycmF5OiB7XG4gICAgbGVuOiBcIicke25hbWV9JyBtdXN0IGJlIGV4YWN0bHkgJHtsZW59IGluIGxlbmd0aFwiLFxuICAgIG1pbjogXCInJHtuYW1lfScgY2Fubm90IGJlIGxlc3MgdGhhbiAke21pbn0gaW4gbGVuZ3RoXCIsXG4gICAgbWF4OiBcIicke25hbWV9JyBjYW5ub3QgYmUgZ3JlYXRlciB0aGFuICR7bWF4fSBpbiBsZW5ndGhcIixcbiAgICByYW5nZTogXCInJHtuYW1lfScgbXVzdCBiZSBiZXR3ZWVuICR7bWlufSBhbmQgJHttYXh9IGluIGxlbmd0aFwiXG4gIH0sXG4gIHBhdHRlcm46IHtcbiAgICBtaXNtYXRjaDogXCInJHtuYW1lfScgZG9lcyBub3QgbWF0Y2ggcGF0dGVybiAke3BhdHRlcm59XCJcbiAgfVxufTsiLCJpbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiO1xuaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IFJhd0FzeW5jVmFsaWRhdG9yIGZyb20gJ2FzeW5jLXZhbGlkYXRvcic7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwicmMtdXRpbC9lcy93YXJuaW5nXCI7XG5pbXBvcnQgeyBzZXRWYWx1ZXMgfSBmcm9tICcuL3ZhbHVlVXRpbCc7XG5pbXBvcnQgeyBkZWZhdWx0VmFsaWRhdGVNZXNzYWdlcyB9IGZyb20gJy4vbWVzc2FnZXMnOyAvLyBSZW1vdmUgaW5jb3JyZWN0IG9yaWdpbmFsIHRzIGRlZmluZVxuXG52YXIgQXN5bmNWYWxpZGF0b3IgPSBSYXdBc3luY1ZhbGlkYXRvcjtcbi8qKlxuICogUmVwbGFjZSB3aXRoIHRlbXBsYXRlLlxuICogICBgSSdtICR7bmFtZX1gICsgeyBuYW1lOiAnYmFtYm9vJyB9ID0gSSdtIGJhbWJvb1xuICovXG5cbmZ1bmN0aW9uIHJlcGxhY2VNZXNzYWdlKHRlbXBsYXRlLCBrdikge1xuICByZXR1cm4gdGVtcGxhdGUucmVwbGFjZSgvXFwkXFx7XFx3K1xcfS9nLCBmdW5jdGlvbiAoc3RyKSB7XG4gICAgdmFyIGtleSA9IHN0ci5zbGljZSgyLCAtMSk7XG4gICAgcmV0dXJuIGt2W2tleV07XG4gIH0pO1xufVxuLyoqXG4gKiBXZSB1c2UgYGFzeW5jLXZhbGlkYXRvcmAgdG8gdmFsaWRhdGUgcnVsZXMuIFNvIGhhdmUgdG8gaG90IHJlcGxhY2UgdGhlIG1lc3NhZ2Ugd2l0aCB2YWxpZGF0b3IuXG4gKiB7IHJlcXVpcmVkOiAnJHtuYW1lfSBpcyByZXF1aXJlZCcgfSA9PiB7IHJlcXVpcmVkOiAoKSA9PiAnZmllbGQgaXMgcmVxdWlyZWQnIH1cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbnZlcnRNZXNzYWdlcyhtZXNzYWdlcywgbmFtZSwgcnVsZSwgbWVzc2FnZVZhcmlhYmxlcykge1xuICB2YXIga3YgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHJ1bGUpLCB7fSwge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgZW51bTogKHJ1bGUuZW51bSB8fCBbXSkuam9pbignLCAnKVxuICB9KTtcblxuICB2YXIgcmVwbGFjZUZ1bmMgPSBmdW5jdGlvbiByZXBsYWNlRnVuYyh0ZW1wbGF0ZSwgYWRkaXRpb25hbEtWKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZXBsYWNlTWVzc2FnZSh0ZW1wbGF0ZSwgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBrdiksIGFkZGl0aW9uYWxLVikpO1xuICAgIH07XG4gIH07XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG5cblxuICBmdW5jdGlvbiBmaWxsVGVtcGxhdGUoc291cmNlKSB7XG4gICAgdmFyIHRhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChydWxlTmFtZSkge1xuICAgICAgdmFyIHZhbHVlID0gc291cmNlW3J1bGVOYW1lXTtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGFyZ2V0W3J1bGVOYW1lXSA9IHJlcGxhY2VGdW5jKHZhbHVlLCBtZXNzYWdlVmFyaWFibGVzKTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgJiYgX3R5cGVvZih2YWx1ZSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRhcmdldFtydWxlTmFtZV0gPSB7fTtcbiAgICAgICAgZmlsbFRlbXBsYXRlKHZhbHVlLCB0YXJnZXRbcnVsZU5hbWVdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtydWxlTmFtZV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgKi9cblxuXG4gIHJldHVybiBmaWxsVGVtcGxhdGUoc2V0VmFsdWVzKHt9LCBkZWZhdWx0VmFsaWRhdGVNZXNzYWdlcywgbWVzc2FnZXMpKTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVSdWxlKF94LCBfeDIsIF94MywgX3g0LCBfeDUpIHtcbiAgcmV0dXJuIF92YWxpZGF0ZVJ1bGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cbi8qKlxuICogV2UgdXNlIGBhc3luYy12YWxpZGF0b3JgIHRvIHZhbGlkYXRlIHRoZSB2YWx1ZS5cbiAqIEJ1dCBvbmx5IGNoZWNrIG9uZSB2YWx1ZSBpbiBhIHRpbWUgdG8gYXZvaWQgbmFtZVBhdGggdmFsaWRhdGUgaXNzdWUuXG4gKi9cblxuXG5mdW5jdGlvbiBfdmFsaWRhdGVSdWxlKCkge1xuICBfdmFsaWRhdGVSdWxlID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIobmFtZSwgdmFsdWUsIHJ1bGUsIG9wdGlvbnMsIG1lc3NhZ2VWYXJpYWJsZXMpIHtcbiAgICB2YXIgY2xvbmVSdWxlLCBzdWJSdWxlRmllbGQsIHZhbGlkYXRvciwgbWVzc2FnZXMsIHJlc3VsdCwgc3ViUmVzdWx0cztcbiAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGNsb25lUnVsZSA9IF9vYmplY3RTcHJlYWQoe30sIHJ1bGUpOyAvLyBXZSBzaG91bGQgc3BlY2lhbCBoYW5kbGUgYXJyYXkgdmFsaWRhdGVcblxuICAgICAgICAgICAgc3ViUnVsZUZpZWxkID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKGNsb25lUnVsZSAmJiBjbG9uZVJ1bGUudHlwZSA9PT0gJ2FycmF5JyAmJiBjbG9uZVJ1bGUuZGVmYXVsdEZpZWxkKSB7XG4gICAgICAgICAgICAgIHN1YlJ1bGVGaWVsZCA9IGNsb25lUnVsZS5kZWZhdWx0RmllbGQ7XG4gICAgICAgICAgICAgIGRlbGV0ZSBjbG9uZVJ1bGUuZGVmYXVsdEZpZWxkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWxpZGF0b3IgPSBuZXcgQXN5bmNWYWxpZGF0b3IoX2RlZmluZVByb3BlcnR5KHt9LCBuYW1lLCBbY2xvbmVSdWxlXSkpO1xuICAgICAgICAgICAgbWVzc2FnZXMgPSBjb252ZXJ0TWVzc2FnZXMob3B0aW9ucy52YWxpZGF0ZU1lc3NhZ2VzLCBuYW1lLCBjbG9uZVJ1bGUsIG1lc3NhZ2VWYXJpYWJsZXMpO1xuICAgICAgICAgICAgdmFsaWRhdG9yLm1lc3NhZ2VzKG1lc3NhZ2VzKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSA3O1xuICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMDtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsaWRhdG9yLnZhbGlkYXRlKF9kZWZpbmVQcm9wZXJ0eSh7fSwgbmFtZSwgdmFsdWUpLCBfb2JqZWN0U3ByZWFkKHt9LCBvcHRpb25zKSkpO1xuXG4gICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTU7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDEyO1xuICAgICAgICAgICAgX2NvbnRleHQyLnQwID0gX2NvbnRleHQyW1wiY2F0Y2hcIl0oNyk7XG5cbiAgICAgICAgICAgIGlmIChfY29udGV4dDIudDAuZXJyb3JzKSB7XG4gICAgICAgICAgICAgIHJlc3VsdCA9IF9jb250ZXh0Mi50MC5lcnJvcnMubWFwKGZ1bmN0aW9uIChfcmVmMiwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IF9yZWYyLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgvLyBXcmFwIFJlYWN0Tm9kZSB3aXRoIGBrZXlgXG5cbiAgICAgICAgICAgICAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgICAgICAgICAgICAgIFJlYWN0LmlzVmFsaWRFbGVtZW50KG1lc3NhZ2UpID8gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChtZXNzYWdlLCB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogXCJlcnJvcl9cIi5jb25jYXQoaW5kZXgpXG4gICAgICAgICAgICAgICAgICB9KSA6IG1lc3NhZ2VcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoX2NvbnRleHQyLnQwKTtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gW21lc3NhZ2VzLmRlZmF1bHQoKV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgICAgaWYgKCEoIXJlc3VsdC5sZW5ndGggJiYgc3ViUnVsZUZpZWxkKSkge1xuICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDIwO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxODtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbCh2YWx1ZS5tYXAoZnVuY3Rpb24gKHN1YlZhbHVlLCBpKSB7XG4gICAgICAgICAgICAgIHJldHVybiB2YWxpZGF0ZVJ1bGUoXCJcIi5jb25jYXQobmFtZSwgXCIuXCIpLmNvbmNhdChpKSwgc3ViVmFsdWUsIHN1YlJ1bGVGaWVsZCwgb3B0aW9ucywgbWVzc2FnZVZhcmlhYmxlcyk7XG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICBjYXNlIDE4OlxuICAgICAgICAgICAgc3ViUmVzdWx0cyA9IF9jb250ZXh0Mi5zZW50O1xuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoXCJyZXR1cm5cIiwgc3ViUmVzdWx0cy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGVycm9ycykge1xuICAgICAgICAgICAgICByZXR1cm4gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShwcmV2KSwgX3RvQ29uc3VtYWJsZUFycmF5KGVycm9ycykpO1xuICAgICAgICAgICAgfSwgW10pKTtcblxuICAgICAgICAgIGNhc2UgMjA6XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdChcInJldHVyblwiLCByZXN1bHQpO1xuXG4gICAgICAgICAgY2FzZSAyMTpcbiAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzcsIDEyXV0pO1xuICB9KSk7XG4gIHJldHVybiBfdmFsaWRhdGVSdWxlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVJ1bGVzKG5hbWVQYXRoLCB2YWx1ZSwgcnVsZXMsIG9wdGlvbnMsIHZhbGlkYXRlRmlyc3QsIG1lc3NhZ2VWYXJpYWJsZXMpIHtcbiAgdmFyIG5hbWUgPSBuYW1lUGF0aC5qb2luKCcuJyk7IC8vIEZpbGwgcnVsZSB3aXRoIGNvbnRleHRcblxuICB2YXIgZmlsbGVkUnVsZXMgPSBydWxlcy5tYXAoZnVuY3Rpb24gKGN1cnJlbnRSdWxlKSB7XG4gICAgdmFyIG9yaWdpblZhbGlkYXRvckZ1bmMgPSBjdXJyZW50UnVsZS52YWxpZGF0b3I7XG5cbiAgICBpZiAoIW9yaWdpblZhbGlkYXRvckZ1bmMpIHtcbiAgICAgIHJldHVybiBjdXJyZW50UnVsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBjdXJyZW50UnVsZSksIHt9LCB7XG4gICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIHZhbGlkYXRvcihydWxlLCB2YWwsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBoYXNQcm9taXNlID0gZmFsc2U7IC8vIFdyYXAgY2FsbGJhY2sgb25seSBhY2NlcHQgd2hlbiBwcm9taXNlIG5vdCBwcm92aWRlZFxuXG4gICAgICAgIHZhciB3cmFwcGVkQ2FsbGJhY2sgPSBmdW5jdGlvbiB3cmFwcGVkQ2FsbGJhY2soKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFdhaXQgYSB0aWNrIHRvIG1ha2Ugc3VyZSByZXR1cm4gdHlwZSBpcyBhIHByb21pc2VcbiAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoIWhhc1Byb21pc2UsICdZb3VyIHZhbGlkYXRvciBmdW5jdGlvbiBoYXMgYWxyZWFkeSByZXR1cm4gYSBwcm9taXNlLiBgY2FsbGJhY2tgIHdpbGwgYmUgaWdub3JlZC4nKTtcblxuICAgICAgICAgICAgaWYgKCFoYXNQcm9taXNlKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07IC8vIEdldCBwcm9taXNlXG5cblxuICAgICAgICB2YXIgcHJvbWlzZSA9IG9yaWdpblZhbGlkYXRvckZ1bmMocnVsZSwgdmFsLCB3cmFwcGVkQ2FsbGJhY2spO1xuICAgICAgICBoYXNQcm9taXNlID0gcHJvbWlzZSAmJiB0eXBlb2YgcHJvbWlzZS50aGVuID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBwcm9taXNlLmNhdGNoID09PSAnZnVuY3Rpb24nO1xuICAgICAgICAvKipcbiAgICAgICAgICogMS4gVXNlIHByb21pc2UgYXMgdGhlIGZpcnN0IHByaW9yaXR5LlxuICAgICAgICAgKiAyLiBJZiBwcm9taXNlIG5vdCBleGlzdCwgdXNlIGNhbGxiYWNrIHdpdGggd2FybmluZyBpbnN0ZWFkXG4gICAgICAgICAqL1xuXG4gICAgICAgIHdhcm5pbmcoaGFzUHJvbWlzZSwgJ2BjYWxsYmFja2AgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHJldHVybiBhIHByb21pc2UgaW5zdGVhZC4nKTtcblxuICAgICAgICBpZiAoaGFzUHJvbWlzZSkge1xuICAgICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVyciB8fCAnICcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICB2YXIgc3VtbWFyeVByb21pc2U7XG5cbiAgaWYgKHZhbGlkYXRlRmlyc3QgPT09IHRydWUpIHtcbiAgICAvLyA+Pj4+PiBWYWxpZGF0ZSBieSBzZXJpYWxpemF0aW9uXG4gICAgc3VtbWFyeVByb21pc2UgPSBuZXcgUHJvbWlzZSggLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIGksIGVycm9ycztcbiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBpID0gMDtcblxuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgaWYgKCEoaSA8IGZpbGxlZFJ1bGVzLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0O1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWxpZGF0ZVJ1bGUobmFtZSwgdmFsdWUsIGZpbGxlZFJ1bGVzW2ldLCBvcHRpb25zLCBtZXNzYWdlVmFyaWFibGVzKTtcblxuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgZXJyb3JzID0gX2NvbnRleHQuc2VudDtcblxuICAgICAgICAgICAgICAgIGlmICghZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDg7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3JzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIpO1xuXG4gICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlICovXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShbXSk7XG5cbiAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlKTtcbiAgICAgIH0pKTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeDYsIF94Nykge1xuICAgICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9KCkpO1xuICB9IGVsc2Uge1xuICAgIC8vID4+Pj4+IFZhbGlkYXRlIGJ5IHBhcmFsbGVsXG4gICAgdmFyIHJ1bGVQcm9taXNlcyA9IGZpbGxlZFJ1bGVzLm1hcChmdW5jdGlvbiAocnVsZSkge1xuICAgICAgcmV0dXJuIHZhbGlkYXRlUnVsZShuYW1lLCB2YWx1ZSwgcnVsZSwgb3B0aW9ucywgbWVzc2FnZVZhcmlhYmxlcyk7XG4gICAgfSk7XG4gICAgc3VtbWFyeVByb21pc2UgPSAodmFsaWRhdGVGaXJzdCA/IGZpbmlzaE9uRmlyc3RGYWlsZWQocnVsZVByb21pc2VzKSA6IGZpbmlzaE9uQWxsRmFpbGVkKHJ1bGVQcm9taXNlcykpLnRoZW4oZnVuY3Rpb24gKGVycm9ycykge1xuICAgICAgaWYgKCFlcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9ycyk7XG4gICAgfSk7XG4gIH0gLy8gSW50ZXJuYWwgY2F0Y2ggZXJyb3IgdG8gYXZvaWQgY29uc29sZSBlcnJvciBsb2cuXG5cblxuICBzdW1tYXJ5UHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgIHJldHVybiBlO1xuICB9KTtcbiAgcmV0dXJuIHN1bW1hcnlQcm9taXNlO1xufVxuXG5mdW5jdGlvbiBmaW5pc2hPbkFsbEZhaWxlZChfeDgpIHtcbiAgcmV0dXJuIF9maW5pc2hPbkFsbEZhaWxlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfZmluaXNoT25BbGxGYWlsZWQoKSB7XG4gIF9maW5pc2hPbkFsbEZhaWxlZCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKHJ1bGVQcm9taXNlcykge1xuICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0Mykge1xuICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoXCJyZXR1cm5cIiwgUHJvbWlzZS5hbGwocnVsZVByb21pc2VzKS50aGVuKGZ1bmN0aW9uIChlcnJvcnNMaXN0KSB7XG4gICAgICAgICAgICAgIHZhciBfcmVmMztcblxuICAgICAgICAgICAgICB2YXIgZXJyb3JzID0gKF9yZWYzID0gW10pLmNvbmNhdC5hcHBseShfcmVmMywgX3RvQ29uc3VtYWJsZUFycmF5KGVycm9yc0xpc3QpKTtcblxuICAgICAgICAgICAgICByZXR1cm4gZXJyb3JzO1xuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgX2NhbGxlZTMpO1xuICB9KSk7XG4gIHJldHVybiBfZmluaXNoT25BbGxGYWlsZWQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZmluaXNoT25GaXJzdEZhaWxlZChfeDkpIHtcbiAgcmV0dXJuIF9maW5pc2hPbkZpcnN0RmFpbGVkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9maW5pc2hPbkZpcnN0RmFpbGVkKCkge1xuICBfZmluaXNoT25GaXJzdEZhaWxlZCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KHJ1bGVQcm9taXNlcykge1xuICAgIHZhciBjb3VudDtcbiAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGNvdW50ID0gMDtcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KFwicmV0dXJuXCIsIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgIHJ1bGVQcm9taXNlcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChlcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZXJyb3JzKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgY291bnQgKz0gMTtcblxuICAgICAgICAgICAgICAgICAgaWYgKGNvdW50ID09PSBydWxlUHJvbWlzZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoW10pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIF9jYWxsZWU0KTtcbiAgfSkpO1xuICByZXR1cm4gX2ZpbmlzaE9uRmlyc3RGYWlsZWQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzXCI7XG5pbXBvcnQgX2NyZWF0ZVN1cGVyIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVTdXBlclwiO1xuaW1wb3J0IHRvQ2hpbGRyZW5BcnJheSBmcm9tIFwicmMtdXRpbC9lcy9DaGlsZHJlbi90b0FycmF5XCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwicmMtdXRpbC9lcy93YXJuaW5nXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRmllbGRDb250ZXh0LCB7IEhPT0tfTUFSSyB9IGZyb20gJy4vRmllbGRDb250ZXh0JztcbmltcG9ydCB7IHRvQXJyYXkgfSBmcm9tICcuL3V0aWxzL3R5cGVVdGlsJztcbmltcG9ydCB7IHZhbGlkYXRlUnVsZXMgfSBmcm9tICcuL3V0aWxzL3ZhbGlkYXRlVXRpbCc7XG5pbXBvcnQgeyBjb250YWluc05hbWVQYXRoLCBkZWZhdWx0R2V0VmFsdWVGcm9tRXZlbnQsIGdldE5hbWVQYXRoLCBnZXRWYWx1ZSB9IGZyb20gJy4vdXRpbHMvdmFsdWVVdGlsJztcblxuZnVuY3Rpb24gcmVxdWlyZVVwZGF0ZShzaG91bGRVcGRhdGUsIHByZXYsIG5leHQsIHByZXZWYWx1ZSwgbmV4dFZhbHVlLCBpbmZvKSB7XG4gIGlmICh0eXBlb2Ygc2hvdWxkVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHNob3VsZFVwZGF0ZShwcmV2LCBuZXh0LCAnc291cmNlJyBpbiBpbmZvID8ge1xuICAgICAgc291cmNlOiBpbmZvLnNvdXJjZVxuICAgIH0gOiB7fSk7XG4gIH1cblxuICByZXR1cm4gcHJldlZhbHVlICE9PSBuZXh0VmFsdWU7XG59IC8vIFdlIHVzZSBDbGFzcyBpbnN0ZWFkIG9mIEhvb2tzIGhlcmUgc2luY2UgaXQgd2lsbCBjb3N0IG11Y2ggY29kZSBieSB1c2luZyBIb29rcy5cblxuXG52YXIgRmllbGQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEZpZWxkLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEZpZWxkKTtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gU3Vic2NyaXB0aW9ucyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgZnVuY3Rpb24gRmllbGQocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRmllbGQpO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcyk7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICByZXNldENvdW50OiAwXG4gICAgfTtcbiAgICBfdGhpcy5jYW5jZWxSZWdpc3RlckZ1bmMgPSBudWxsO1xuICAgIF90aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBGb2xsb3cgc3RhdGUgc2hvdWxkIG5vdCBtYW5hZ2VtZW50IGluIFN0YXRlIHNpbmNlIGl0IHdpbGwgYXN5bmMgdXBkYXRlIGJ5IFJlYWN0LlxuICAgICAqIFRoaXMgbWFrZXMgZmlyc3QgcmVuZGVyIG9mIGZvcm0gY2FuIG5vdCBnZXQgY29ycmVjdCBzdGF0ZSB2YWx1ZS5cbiAgICAgKi9cblxuICAgIF90aGlzLnRvdWNoZWQgPSBmYWxzZTtcbiAgICAvKiogTWFyayB3aGVuIHRvdWNoZWQgJiB2YWxpZGF0ZWQuIEN1cnJlbnRseSBvbmx5IHVzZWQgZm9yIGBkZXBlbmRlbmNpZXNgICovXG5cbiAgICBfdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgIF90aGlzLnZhbGlkYXRlUHJvbWlzZSA9IG51bGw7XG4gICAgX3RoaXMuZXJyb3JzID0gW107XG5cbiAgICBfdGhpcy5jYW5jZWxSZWdpc3RlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHByZXNlcnZlID0gX3RoaXMkcHJvcHMucHJlc2VydmUsXG4gICAgICAgICAgaXNMaXN0RmllbGQgPSBfdGhpcyRwcm9wcy5pc0xpc3RGaWVsZDtcblxuICAgICAgaWYgKF90aGlzLmNhbmNlbFJlZ2lzdGVyRnVuYykge1xuICAgICAgICBfdGhpcy5jYW5jZWxSZWdpc3RlckZ1bmMoaXNMaXN0RmllbGQsIHByZXNlcnZlKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY2FuY2VsUmVnaXN0ZXJGdW5jID0gbnVsbDtcbiAgICB9OyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IFV0aWxzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG4gICAgX3RoaXMuZ2V0TmFtZVBhdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgbmFtZSA9IF90aGlzJHByb3BzMi5uYW1lLFxuICAgICAgICAgIGZpZWxkQ29udGV4dCA9IF90aGlzJHByb3BzMi5maWVsZENvbnRleHQ7XG4gICAgICB2YXIgX2ZpZWxkQ29udGV4dCRwcmVmaXhOID0gZmllbGRDb250ZXh0LnByZWZpeE5hbWUsXG4gICAgICAgICAgcHJlZml4TmFtZSA9IF9maWVsZENvbnRleHQkcHJlZml4TiA9PT0gdm9pZCAwID8gW10gOiBfZmllbGRDb250ZXh0JHByZWZpeE47XG4gICAgICByZXR1cm4gbmFtZSAhPT0gdW5kZWZpbmVkID8gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShwcmVmaXhOYW1lKSwgX3RvQ29uc3VtYWJsZUFycmF5KG5hbWUpKSA6IFtdO1xuICAgIH07XG5cbiAgICBfdGhpcy5nZXRSdWxlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBfdGhpcyRwcm9wczMkcnVsZXMgPSBfdGhpcyRwcm9wczMucnVsZXMsXG4gICAgICAgICAgcnVsZXMgPSBfdGhpcyRwcm9wczMkcnVsZXMgPT09IHZvaWQgMCA/IFtdIDogX3RoaXMkcHJvcHMzJHJ1bGVzLFxuICAgICAgICAgIGZpZWxkQ29udGV4dCA9IF90aGlzJHByb3BzMy5maWVsZENvbnRleHQ7XG4gICAgICByZXR1cm4gcnVsZXMubWFwKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcnVsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBydWxlKGZpZWxkQ29udGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcnVsZTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5tb3VudGVkKSByZXR1cm47XG4gICAgICAvKipcbiAgICAgICAqIENsZWFuIHVwIGN1cnJlbnQgbm9kZS5cbiAgICAgICAqL1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgcmVzZXRDb3VudCA9IF9yZWYucmVzZXRDb3VudDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICByZXNldENvdW50OiByZXNldENvdW50ICsgMVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PSBGaWVsZCBFbnRpdHkgSW50ZXJmYWNlcyA9PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gVHJpZ2dlciBieSBzdG9yZSB1cGRhdGUuIENoZWNrIGlmIG5lZWQgdXBkYXRlIHRoZSBjb21wb25lbnRcblxuXG4gICAgX3RoaXMub25TdG9yZUNoYW5nZSA9IGZ1bmN0aW9uIChwcmV2U3RvcmUsIG5hbWVQYXRoTGlzdCwgaW5mbykge1xuICAgICAgdmFyIF90aGlzJHByb3BzNCA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHNob3VsZFVwZGF0ZSA9IF90aGlzJHByb3BzNC5zaG91bGRVcGRhdGUsXG4gICAgICAgICAgX3RoaXMkcHJvcHM0JGRlcGVuZGVuID0gX3RoaXMkcHJvcHM0LmRlcGVuZGVuY2llcyxcbiAgICAgICAgICBkZXBlbmRlbmNpZXMgPSBfdGhpcyRwcm9wczQkZGVwZW5kZW4gPT09IHZvaWQgMCA/IFtdIDogX3RoaXMkcHJvcHM0JGRlcGVuZGVuLFxuICAgICAgICAgIG9uUmVzZXQgPSBfdGhpcyRwcm9wczQub25SZXNldDtcbiAgICAgIHZhciBzdG9yZSA9IGluZm8uc3RvcmU7XG5cbiAgICAgIHZhciBuYW1lUGF0aCA9IF90aGlzLmdldE5hbWVQYXRoKCk7XG5cbiAgICAgIHZhciBwcmV2VmFsdWUgPSBfdGhpcy5nZXRWYWx1ZShwcmV2U3RvcmUpO1xuXG4gICAgICB2YXIgY3VyVmFsdWUgPSBfdGhpcy5nZXRWYWx1ZShzdG9yZSk7XG5cbiAgICAgIHZhciBuYW1lUGF0aE1hdGNoID0gbmFtZVBhdGhMaXN0ICYmIGNvbnRhaW5zTmFtZVBhdGgobmFtZVBhdGhMaXN0LCBuYW1lUGF0aCk7IC8vIGBzZXRGaWVsZHNWYWx1ZWAgaXMgYSBxdWljayBhY2Nlc3MgdG8gdXBkYXRlIHJlbGF0ZWQgc3RhdHVzXG5cbiAgICAgIGlmIChpbmZvLnR5cGUgPT09ICd2YWx1ZVVwZGF0ZScgJiYgaW5mby5zb3VyY2UgPT09ICdleHRlcm5hbCcgJiYgcHJldlZhbHVlICE9PSBjdXJWYWx1ZSkge1xuICAgICAgICBfdGhpcy50b3VjaGVkID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMuZGlydHkgPSB0cnVlO1xuICAgICAgICBfdGhpcy52YWxpZGF0ZVByb21pc2UgPSBudWxsO1xuICAgICAgICBfdGhpcy5lcnJvcnMgPSBbXTtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChpbmZvLnR5cGUpIHtcbiAgICAgICAgY2FzZSAncmVzZXQnOlxuICAgICAgICAgIGlmICghbmFtZVBhdGhMaXN0IHx8IG5hbWVQYXRoTWF0Y2gpIHtcbiAgICAgICAgICAgIC8vIENsZWFuIHVwIHN0YXRlXG4gICAgICAgICAgICBfdGhpcy50b3VjaGVkID0gZmFsc2U7XG4gICAgICAgICAgICBfdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgX3RoaXMudmFsaWRhdGVQcm9taXNlID0gbnVsbDtcbiAgICAgICAgICAgIF90aGlzLmVycm9ycyA9IFtdO1xuXG4gICAgICAgICAgICBpZiAob25SZXNldCkge1xuICAgICAgICAgICAgICBvblJlc2V0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF90aGlzLnJlZnJlc2goKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3NldEZpZWxkJzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZiAobmFtZVBhdGhNYXRjaCkge1xuICAgICAgICAgICAgICB2YXIgZGF0YSA9IGluZm8uZGF0YTtcblxuICAgICAgICAgICAgICBpZiAoJ3RvdWNoZWQnIGluIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy50b3VjaGVkID0gZGF0YS50b3VjaGVkO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKCd2YWxpZGF0aW5nJyBpbiBkYXRhICYmICEoJ29yaWdpblJDRmllbGQnIGluIGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudmFsaWRhdGVQcm9taXNlID0gZGF0YS52YWxpZGF0aW5nID8gUHJvbWlzZS5yZXNvbHZlKFtdKSA6IG51bGw7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoJ2Vycm9ycycgaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgIF90aGlzLmVycm9ycyA9IGRhdGEuZXJyb3JzIHx8IFtdO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgX3RoaXMuZGlydHkgPSB0cnVlO1xuXG4gICAgICAgICAgICAgIF90aGlzLnJlUmVuZGVyKCk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSAvLyBIYW5kbGUgdXBkYXRlIGJ5IGBzZXRGaWVsZGAgd2l0aCBgc2hvdWxkVXBkYXRlYFxuXG5cbiAgICAgICAgICAgIGlmIChzaG91bGRVcGRhdGUgJiYgIW5hbWVQYXRoLmxlbmd0aCAmJiByZXF1aXJlVXBkYXRlKHNob3VsZFVwZGF0ZSwgcHJldlN0b3JlLCBzdG9yZSwgcHJldlZhbHVlLCBjdXJWYWx1ZSwgaW5mbykpIHtcbiAgICAgICAgICAgICAgX3RoaXMucmVSZW5kZXIoKTtcblxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlICdkZXBlbmRlbmNpZXNVcGRhdGUnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVHJpZ2dlciB3aGVuIG1hcmtlZCBgZGVwZW5kZW5jaWVzYCB1cGRhdGVkLiBSZWxhdGVkIGZpZWxkcyB3aWxsIGFsbCB1cGRhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIGRlcGVuZGVuY3lMaXN0ID0gZGVwZW5kZW5jaWVzLm1hcChnZXROYW1lUGF0aCk7IC8vIE5vIG5lZWQgZm9yIGBuYW1lUGF0aE1hdGhgIGNoZWNrIGFuZCBgc2hvdWxkVXBkYXRlYCBjaGVjaywgc2luY2UgYHZhbHVlVXBkYXRlYCB3aWxsIGJlXG4gICAgICAgICAgICAvLyBlbWl0dGVkIGVhcmxpZXIgYW5kIHRoZXkgd2lsbCB3b3JrIHRoZXJlXG4gICAgICAgICAgICAvLyBJZiBzZXQgaXQgbWF5IGNhdXNlIHVubmVjZXNzYXJ5IHR3aWNlIHJlcmVuZGVyaW5nXG5cbiAgICAgICAgICAgIGlmIChkZXBlbmRlbmN5TGlzdC5zb21lKGZ1bmN0aW9uIChkZXBlbmRlbmN5KSB7XG4gICAgICAgICAgICAgIHJldHVybiBjb250YWluc05hbWVQYXRoKGluZm8ucmVsYXRlZEZpZWxkcywgZGVwZW5kZW5jeSk7XG4gICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgICBfdGhpcy5yZVJlbmRlcigpO1xuXG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8gMS4gSWYgYG5hbWVQYXRoYCBleGlzdHMgaW4gYG5hbWVQYXRoTGlzdGAsIG1lYW5zIGl0J3MgcmVsYXRlZCB2YWx1ZSBhbmQgc2hvdWxkIHVwZGF0ZVxuICAgICAgICAgIC8vICAgICAgRm9yIGV4YW1wbGUgPExpc3QgbmFtZT1cImxpc3RcIj48RmllbGQgbmFtZT17WydsaXN0JywgMF19PjwvTGlzdD5cbiAgICAgICAgICAvLyAgICAgIElmIGBuYW1lUGF0aExpc3RgIGlzIFtbJ2xpc3QnXV0gKExpc3QgdmFsdWUgdXBkYXRlKSwgRmllbGQgc2hvdWxkIGJlIHVwZGF0ZWRcbiAgICAgICAgICAvLyAgICAgIElmIGBuYW1lUGF0aExpc3RgIGlzIFtbJ2xpc3QnLCAwXV0gKEZpZWxkIHZhbHVlIHVwZGF0ZSksIExpc3Qgc2hvdWxkbid0IGJlIHVwZGF0ZWRcbiAgICAgICAgICAvLyAyLlxuICAgICAgICAgIC8vICAgMi4xIElmIGBkZXBlbmRlbmNpZXNgIGlzIHNldCwgYG5hbWVgIGlzIG5vdCBzZXQgYW5kIGBzaG91bGRVcGRhdGVgIGlzIG5vdCBzZXQsXG4gICAgICAgICAgLy8gICAgICAgZG9uJ3QgdXNlIGBzaG91bGRVcGRhdGVgLiBgZGVwZW5kZW5jaWVzYCBpcyB2aWV3IGFzIGEgc2hvcnRjdXQgaWYgYHNob3VsZFVwZGF0ZWBcbiAgICAgICAgICAvLyAgICAgICBpcyBub3QgcHJvdmlkZWRcbiAgICAgICAgICAvLyAgIDIuMiBJZiBgc2hvdWxkVXBkYXRlYCBwcm92aWRlZCwgdXNlIGN1c3RvbWl6ZSBsb2dpYyB0byB1cGRhdGUgdGhlIGZpZWxkXG4gICAgICAgICAgLy8gICAgICAgZWxzZSB0byBjaGVjayBpZiB2YWx1ZSBjaGFuZ2VkXG4gICAgICAgICAgaWYgKG5hbWVQYXRoTWF0Y2ggfHwgKCFkZXBlbmRlbmNpZXMubGVuZ3RoIHx8IG5hbWVQYXRoLmxlbmd0aCB8fCBzaG91bGRVcGRhdGUpICYmIHJlcXVpcmVVcGRhdGUoc2hvdWxkVXBkYXRlLCBwcmV2U3RvcmUsIHN0b3JlLCBwcmV2VmFsdWUsIGN1clZhbHVlLCBpbmZvKSkge1xuICAgICAgICAgICAgX3RoaXMucmVSZW5kZXIoKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2hvdWxkVXBkYXRlID09PSB0cnVlKSB7XG4gICAgICAgIF90aGlzLnJlUmVuZGVyKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnZhbGlkYXRlUnVsZXMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgLy8gV2Ugc2hvdWxkIGZpeGVkIG5hbWVQYXRoICYgdmFsdWUgdG8gYXZvaWQgZGV2ZWxvcGVyIGNoYW5nZSB0aGVuIGJ5IGZvcm0gZnVuY3Rpb25cbiAgICAgIHZhciBuYW1lUGF0aCA9IF90aGlzLmdldE5hbWVQYXRoKCk7XG5cbiAgICAgIHZhciBjdXJyZW50VmFsdWUgPSBfdGhpcy5nZXRWYWx1ZSgpOyAvLyBGb3JjZSBjaGFuZ2UgdG8gYXN5bmMgdG8gYXZvaWQgcnVsZSBPT0QgdW5kZXIgcmVuZGVyUHJvcHMgZmllbGRcblxuXG4gICAgICB2YXIgcm9vdFByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5tb3VudGVkKSB7XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF90aGlzJHByb3BzNSA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgX3RoaXMkcHJvcHM1JHZhbGlkYXRlID0gX3RoaXMkcHJvcHM1LnZhbGlkYXRlRmlyc3QsXG4gICAgICAgICAgICB2YWxpZGF0ZUZpcnN0ID0gX3RoaXMkcHJvcHM1JHZhbGlkYXRlID09PSB2b2lkIDAgPyBmYWxzZSA6IF90aGlzJHByb3BzNSR2YWxpZGF0ZSxcbiAgICAgICAgICAgIG1lc3NhZ2VWYXJpYWJsZXMgPSBfdGhpcyRwcm9wczUubWVzc2FnZVZhcmlhYmxlcztcblxuICAgICAgICB2YXIgX3JlZjIgPSBvcHRpb25zIHx8IHt9LFxuICAgICAgICAgICAgdHJpZ2dlck5hbWUgPSBfcmVmMi50cmlnZ2VyTmFtZTtcblxuICAgICAgICB2YXIgZmlsdGVyZWRSdWxlcyA9IF90aGlzLmdldFJ1bGVzKCk7XG5cbiAgICAgICAgaWYgKHRyaWdnZXJOYW1lKSB7XG4gICAgICAgICAgZmlsdGVyZWRSdWxlcyA9IGZpbHRlcmVkUnVsZXMuZmlsdGVyKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICAgICAgICB2YXIgdmFsaWRhdGVUcmlnZ2VyID0gcnVsZS52YWxpZGF0ZVRyaWdnZXI7XG5cbiAgICAgICAgICAgIGlmICghdmFsaWRhdGVUcmlnZ2VyKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdHJpZ2dlckxpc3QgPSB0b0FycmF5KHZhbGlkYXRlVHJpZ2dlcik7XG4gICAgICAgICAgICByZXR1cm4gdHJpZ2dlckxpc3QuaW5jbHVkZXModHJpZ2dlck5hbWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHByb21pc2UgPSB2YWxpZGF0ZVJ1bGVzKG5hbWVQYXRoLCBjdXJyZW50VmFsdWUsIGZpbHRlcmVkUnVsZXMsIG9wdGlvbnMsIHZhbGlkYXRlRmlyc3QsIG1lc3NhZ2VWYXJpYWJsZXMpO1xuICAgICAgICBwcm9taXNlLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBlcnJvcnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuXG4gICAgICAgICAgaWYgKF90aGlzLnZhbGlkYXRlUHJvbWlzZSA9PT0gcm9vdFByb21pc2UpIHtcbiAgICAgICAgICAgIF90aGlzLnZhbGlkYXRlUHJvbWlzZSA9IG51bGw7XG4gICAgICAgICAgICBfdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG5cbiAgICAgICAgICAgIF90aGlzLnJlUmVuZGVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICB9KTtcbiAgICAgIF90aGlzLnZhbGlkYXRlUHJvbWlzZSA9IHJvb3RQcm9taXNlO1xuICAgICAgX3RoaXMuZGlydHkgPSB0cnVlO1xuICAgICAgX3RoaXMuZXJyb3JzID0gW107IC8vIEZvcmNlIHRyaWdnZXIgcmUtcmVuZGVyIHNpbmNlIHdlIG5lZWQgc3luYyByZW5kZXJQcm9wcyB3aXRoIG5ldyBtZXRhXG5cbiAgICAgIF90aGlzLnJlUmVuZGVyKCk7XG5cbiAgICAgIHJldHVybiByb290UHJvbWlzZTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaXNGaWVsZFZhbGlkYXRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gISFfdGhpcy52YWxpZGF0ZVByb21pc2U7XG4gICAgfTtcblxuICAgIF90aGlzLmlzRmllbGRUb3VjaGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnRvdWNoZWQ7XG4gICAgfTtcblxuICAgIF90aGlzLmlzRmllbGREaXJ0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5kaXJ0eTtcbiAgICB9O1xuXG4gICAgX3RoaXMuZ2V0RXJyb3JzID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLmVycm9ycztcbiAgICB9O1xuXG4gICAgX3RoaXMuaXNMaXN0RmllbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMuaXNMaXN0RmllbGQ7XG4gICAgfTtcblxuICAgIF90aGlzLmlzTGlzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5pc0xpc3Q7XG4gICAgfTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gQ2hpbGQgQ29tcG9uZW50ID09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblxuICAgIF90aGlzLmdldE1ldGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBNYWtlIGVycm9yICYgdmFsaWRhdGluZyBpbiBjYWNoZSB0byBzYXZlIHBlcmZcbiAgICAgIF90aGlzLnByZXZWYWxpZGF0aW5nID0gX3RoaXMuaXNGaWVsZFZhbGlkYXRpbmcoKTtcbiAgICAgIHZhciBtZXRhID0ge1xuICAgICAgICB0b3VjaGVkOiBfdGhpcy5pc0ZpZWxkVG91Y2hlZCgpLFxuICAgICAgICB2YWxpZGF0aW5nOiBfdGhpcy5wcmV2VmFsaWRhdGluZyxcbiAgICAgICAgZXJyb3JzOiBfdGhpcy5lcnJvcnMsXG4gICAgICAgIG5hbWU6IF90aGlzLmdldE5hbWVQYXRoKClcbiAgICAgIH07XG4gICAgICByZXR1cm4gbWV0YTtcbiAgICB9OyAvLyBPbmx5IHJldHVybiB2YWxpZGF0ZSBjaGlsZCBub2RlLiBJZiBpbnZhbGlkYXRlLCB3aWxsIGRvIG5vdGhpbmcgYWJvdXQgZmllbGQuXG5cblxuICAgIF90aGlzLmdldE9ubHlDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZHJlbikge1xuICAgICAgLy8gU3VwcG9ydCByZW5kZXIgcHJvcHNcbiAgICAgIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIG1ldGEgPSBfdGhpcy5nZXRNZXRhKCk7XG5cbiAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgX3RoaXMuZ2V0T25seUNoaWxkKGNoaWxkcmVuKF90aGlzLmdldENvbnRyb2xsZWQoKSwgbWV0YSwgX3RoaXMucHJvcHMuZmllbGRDb250ZXh0KSkpLCB7fSwge1xuICAgICAgICAgIGlzRnVuY3Rpb246IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IC8vIEZpbGVkIGVsZW1lbnQgb25seVxuXG5cbiAgICAgIHZhciBjaGlsZExpc3QgPSB0b0NoaWxkcmVuQXJyYXkoY2hpbGRyZW4pO1xuXG4gICAgICBpZiAoY2hpbGRMaXN0Lmxlbmd0aCAhPT0gMSB8fCAhIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZExpc3RbMF0pKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY2hpbGQ6IGNoaWxkTGlzdCxcbiAgICAgICAgICBpc0Z1bmN0aW9uOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjaGlsZDogY2hpbGRMaXN0WzBdLFxuICAgICAgICBpc0Z1bmN0aW9uOiBmYWxzZVxuICAgICAgfTtcbiAgICB9OyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gRmllbGQgQ29udHJvbCA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG4gICAgX3RoaXMuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgICAgIHZhciBnZXRGaWVsZHNWYWx1ZSA9IF90aGlzLnByb3BzLmZpZWxkQ29udGV4dC5nZXRGaWVsZHNWYWx1ZTtcblxuICAgICAgdmFyIG5hbWVQYXRoID0gX3RoaXMuZ2V0TmFtZVBhdGgoKTtcblxuICAgICAgcmV0dXJuIGdldFZhbHVlKHN0b3JlIHx8IGdldEZpZWxkc1ZhbHVlKHRydWUpLCBuYW1lUGF0aCk7XG4gICAgfTtcblxuICAgIF90aGlzLmdldENvbnRyb2xsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY2hpbGRQcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICB2YXIgX3RoaXMkcHJvcHM2ID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgdHJpZ2dlciA9IF90aGlzJHByb3BzNi50cmlnZ2VyLFxuICAgICAgICAgIHZhbGlkYXRlVHJpZ2dlciA9IF90aGlzJHByb3BzNi52YWxpZGF0ZVRyaWdnZXIsXG4gICAgICAgICAgZ2V0VmFsdWVGcm9tRXZlbnQgPSBfdGhpcyRwcm9wczYuZ2V0VmFsdWVGcm9tRXZlbnQsXG4gICAgICAgICAgbm9ybWFsaXplID0gX3RoaXMkcHJvcHM2Lm5vcm1hbGl6ZSxcbiAgICAgICAgICB2YWx1ZVByb3BOYW1lID0gX3RoaXMkcHJvcHM2LnZhbHVlUHJvcE5hbWUsXG4gICAgICAgICAgZ2V0VmFsdWVQcm9wcyA9IF90aGlzJHByb3BzNi5nZXRWYWx1ZVByb3BzLFxuICAgICAgICAgIGZpZWxkQ29udGV4dCA9IF90aGlzJHByb3BzNi5maWVsZENvbnRleHQ7XG4gICAgICB2YXIgbWVyZ2VkVmFsaWRhdGVUcmlnZ2VyID0gdmFsaWRhdGVUcmlnZ2VyICE9PSB1bmRlZmluZWQgPyB2YWxpZGF0ZVRyaWdnZXIgOiBmaWVsZENvbnRleHQudmFsaWRhdGVUcmlnZ2VyO1xuXG4gICAgICB2YXIgbmFtZVBhdGggPSBfdGhpcy5nZXROYW1lUGF0aCgpO1xuXG4gICAgICB2YXIgZ2V0SW50ZXJuYWxIb29rcyA9IGZpZWxkQ29udGV4dC5nZXRJbnRlcm5hbEhvb2tzLFxuICAgICAgICAgIGdldEZpZWxkc1ZhbHVlID0gZmllbGRDb250ZXh0LmdldEZpZWxkc1ZhbHVlO1xuXG4gICAgICB2YXIgX2dldEludGVybmFsSG9va3MgPSBnZXRJbnRlcm5hbEhvb2tzKEhPT0tfTUFSSyksXG4gICAgICAgICAgZGlzcGF0Y2ggPSBfZ2V0SW50ZXJuYWxIb29rcy5kaXNwYXRjaDtcblxuICAgICAgdmFyIHZhbHVlID0gX3RoaXMuZ2V0VmFsdWUoKTtcblxuICAgICAgdmFyIG1lcmdlZEdldFZhbHVlUHJvcHMgPSBnZXRWYWx1ZVByb3BzIHx8IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwgdmFsdWVQcm9wTmFtZSwgdmFsKTtcbiAgICAgIH07IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5cblxuICAgICAgdmFyIG9yaWdpblRyaWdnZXJGdW5jID0gY2hpbGRQcm9wc1t0cmlnZ2VyXTtcblxuICAgICAgdmFyIGNvbnRyb2wgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGNoaWxkUHJvcHMpLCBtZXJnZWRHZXRWYWx1ZVByb3BzKHZhbHVlKSk7IC8vIEFkZCB0cmlnZ2VyXG5cblxuICAgICAgY29udHJvbFt0cmlnZ2VyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gTWFyayBhcyB0b3VjaGVkXG4gICAgICAgIF90aGlzLnRvdWNoZWQgPSB0cnVlO1xuICAgICAgICBfdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICAgIHZhciBuZXdWYWx1ZTtcblxuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdldFZhbHVlRnJvbUV2ZW50KSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBnZXRWYWx1ZUZyb21FdmVudC5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1ZhbHVlID0gZGVmYXVsdEdldFZhbHVlRnJvbUV2ZW50LmFwcGx5KHZvaWQgMCwgW3ZhbHVlUHJvcE5hbWVdLmNvbmNhdChhcmdzKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobm9ybWFsaXplKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBub3JtYWxpemUobmV3VmFsdWUsIHZhbHVlLCBnZXRGaWVsZHNWYWx1ZSh0cnVlKSk7XG4gICAgICAgIH1cblxuICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgdHlwZTogJ3VwZGF0ZVZhbHVlJyxcbiAgICAgICAgICBuYW1lUGF0aDogbmFtZVBhdGgsXG4gICAgICAgICAgdmFsdWU6IG5ld1ZhbHVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChvcmlnaW5UcmlnZ2VyRnVuYykge1xuICAgICAgICAgIG9yaWdpblRyaWdnZXJGdW5jLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH07IC8vIEFkZCB2YWxpZGF0ZVRyaWdnZXJcblxuXG4gICAgICB2YXIgdmFsaWRhdGVUcmlnZ2VyTGlzdCA9IHRvQXJyYXkobWVyZ2VkVmFsaWRhdGVUcmlnZ2VyIHx8IFtdKTtcbiAgICAgIHZhbGlkYXRlVHJpZ2dlckxpc3QuZm9yRWFjaChmdW5jdGlvbiAodHJpZ2dlck5hbWUpIHtcbiAgICAgICAgLy8gV3JhcCBhZGRpdGlvbmFsIGZ1bmN0aW9uIG9mIGNvbXBvbmVudCwgc28gdGhhdCB3ZSBjYW4gZ2V0IGxhdGVzdCB2YWx1ZSBmcm9tIHN0b3JlXG4gICAgICAgIHZhciBvcmlnaW5UcmlnZ2VyID0gY29udHJvbFt0cmlnZ2VyTmFtZV07XG5cbiAgICAgICAgY29udHJvbFt0cmlnZ2VyTmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKG9yaWdpblRyaWdnZXIpIHtcbiAgICAgICAgICAgIG9yaWdpblRyaWdnZXIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgICAgIH0gLy8gQWx3YXlzIHVzZSBsYXRlc3QgcnVsZXNcblxuXG4gICAgICAgICAgdmFyIHJ1bGVzID0gX3RoaXMucHJvcHMucnVsZXM7XG5cbiAgICAgICAgICBpZiAocnVsZXMgJiYgcnVsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBXZSBkaXNwYXRjaCB2YWxpZGF0ZSB0byByb290LFxuICAgICAgICAgICAgLy8gc2luY2UgaXQgd2lsbCB1cGRhdGUgcmVsYXRlZCBkYXRhIHdpdGggb3RoZXIgZmllbGQgd2l0aCBzYW1lIG5hbWVcbiAgICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgdHlwZTogJ3ZhbGlkYXRlRmllbGQnLFxuICAgICAgICAgICAgICBuYW1lUGF0aDogbmFtZVBhdGgsXG4gICAgICAgICAgICAgIHRyaWdnZXJOYW1lOiB0cmlnZ2VyTmFtZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gY29udHJvbDtcbiAgICB9OyAvLyBSZWdpc3RlciBvbiBpbml0XG5cblxuICAgIGlmIChwcm9wcy5maWVsZENvbnRleHQpIHtcbiAgICAgIHZhciBnZXRJbnRlcm5hbEhvb2tzID0gcHJvcHMuZmllbGRDb250ZXh0LmdldEludGVybmFsSG9va3M7XG5cbiAgICAgIHZhciBfZ2V0SW50ZXJuYWxIb29rczIgPSBnZXRJbnRlcm5hbEhvb2tzKEhPT0tfTUFSSyksXG4gICAgICAgICAgaW5pdEVudGl0eVZhbHVlID0gX2dldEludGVybmFsSG9va3MyLmluaXRFbnRpdHlWYWx1ZTtcblxuICAgICAgaW5pdEVudGl0eVZhbHVlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRmllbGQsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgc2hvdWxkVXBkYXRlID0gX3RoaXMkcHJvcHM3LnNob3VsZFVwZGF0ZSxcbiAgICAgICAgICBmaWVsZENvbnRleHQgPSBfdGhpcyRwcm9wczcuZmllbGRDb250ZXh0O1xuICAgICAgdGhpcy5tb3VudGVkID0gdHJ1ZTsgLy8gUmVnaXN0ZXIgb24gaW5pdFxuXG4gICAgICBpZiAoZmllbGRDb250ZXh0KSB7XG4gICAgICAgIHZhciBnZXRJbnRlcm5hbEhvb2tzID0gZmllbGRDb250ZXh0LmdldEludGVybmFsSG9va3M7XG5cbiAgICAgICAgdmFyIF9nZXRJbnRlcm5hbEhvb2tzMyA9IGdldEludGVybmFsSG9va3MoSE9PS19NQVJLKSxcbiAgICAgICAgICAgIHJlZ2lzdGVyRmllbGQgPSBfZ2V0SW50ZXJuYWxIb29rczMucmVnaXN0ZXJGaWVsZDtcblxuICAgICAgICB0aGlzLmNhbmNlbFJlZ2lzdGVyRnVuYyA9IHJlZ2lzdGVyRmllbGQodGhpcyk7XG4gICAgICB9IC8vIE9uZSBtb3JlIHJlbmRlciBmb3IgY29tcG9uZW50IGluIGNhc2UgZmllbGRzIG5vdCByZWFkeVxuXG5cbiAgICAgIGlmIChzaG91bGRVcGRhdGUgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5yZVJlbmRlcigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuY2FuY2VsUmVnaXN0ZXIoKTtcbiAgICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZVJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZVJlbmRlcigpIHtcbiAgICAgIGlmICghdGhpcy5tb3VudGVkKSByZXR1cm47XG4gICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgcmVzZXRDb3VudCA9IHRoaXMuc3RhdGUucmVzZXRDb3VudDtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICAgIHZhciBfdGhpcyRnZXRPbmx5Q2hpbGQgPSB0aGlzLmdldE9ubHlDaGlsZChjaGlsZHJlbiksXG4gICAgICAgICAgY2hpbGQgPSBfdGhpcyRnZXRPbmx5Q2hpbGQuY2hpbGQsXG4gICAgICAgICAgaXNGdW5jdGlvbiA9IF90aGlzJGdldE9ubHlDaGlsZC5pc0Z1bmN0aW9uOyAvLyBOb3QgbmVlZCB0byBgY2xvbmVFbGVtZW50YCBzaW5jZSB1c2VyIGNhbiBoYW5kbGUgdGhpcyBpbiByZW5kZXIgZnVuY3Rpb24gc2VsZlxuXG5cbiAgICAgIHZhciByZXR1cm5DaGlsZE5vZGU7XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKSB7XG4gICAgICAgIHJldHVybkNoaWxkTm9kZSA9IGNoaWxkO1xuICAgICAgfSBlbHNlIGlmICggLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICByZXR1cm5DaGlsZE5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB0aGlzLmdldENvbnRyb2xsZWQoY2hpbGQucHJvcHMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoIWNoaWxkLCAnYGNoaWxkcmVuYCBvZiBGaWVsZCBpcyBub3QgdmFsaWRhdGUgUmVhY3RFbGVtZW50LicpO1xuICAgICAgICByZXR1cm5DaGlsZE5vZGUgPSBjaGlsZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCB7XG4gICAgICAgIGtleTogcmVzZXRDb3VudFxuICAgICAgfSwgcmV0dXJuQ2hpbGROb2RlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRmllbGQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkZpZWxkLmNvbnRleHRUeXBlID0gRmllbGRDb250ZXh0O1xuRmllbGQuZGVmYXVsdFByb3BzID0ge1xuICB0cmlnZ2VyOiAnb25DaGFuZ2UnLFxuICB2YWx1ZVByb3BOYW1lOiAndmFsdWUnXG59O1xuXG5mdW5jdGlvbiBXcmFwcGVyRmllbGQoX3JlZjQpIHtcbiAgdmFyIG5hbWUgPSBfcmVmNC5uYW1lLFxuICAgICAgcmVzdFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWY0LCBbXCJuYW1lXCJdKTtcblxuICB2YXIgZmllbGRDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChGaWVsZENvbnRleHQpO1xuICB2YXIgbmFtZVBhdGggPSBuYW1lICE9PSB1bmRlZmluZWQgPyBnZXROYW1lUGF0aChuYW1lKSA6IHVuZGVmaW5lZDtcbiAgdmFyIGtleSA9ICdrZWVwJztcblxuICBpZiAoIXJlc3RQcm9wcy5pc0xpc3RGaWVsZCkge1xuICAgIGtleSA9IFwiX1wiLmNvbmNhdCgobmFtZVBhdGggfHwgW10pLmpvaW4oJ18nKSk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm5pbmcocmVzdFByb3BzLnByZXNlcnZlICE9PSBmYWxzZSB8fCAhcmVzdFByb3BzLmlzTGlzdEZpZWxkLCAnYHByZXNlcnZlYCBzaG91bGQgbm90IGFwcGx5IG9uIEZvcm0uTGlzdCBmaWVsZHMuJyk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRmllbGQsIF9leHRlbmRzKHtcbiAgICBrZXk6IGtleSxcbiAgICBuYW1lOiBuYW1lUGF0aFxuICB9LCByZXN0UHJvcHMsIHtcbiAgICBmaWVsZENvbnRleHQ6IGZpZWxkQ29udGV4dFxuICB9KSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFdyYXBwZXJGaWVsZDsiLCJpbXBvcnQgYXJyYXlXaXRoSG9sZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aEhvbGVzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5TGltaXQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheUxpbWl0XCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5XCI7XG5pbXBvcnQgbm9uSXRlcmFibGVSZXN0IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVJlc3RcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjtcbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG4gIHZhciBfZSA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kID0gdHJ1ZTtcbiAgICBfZSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfYXJyO1xufSIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IHsgbWF0Y2hOYW1lUGF0aCB9IGZyb20gJy4vdmFsdWVVdGlsJztcbi8qKlxuICogTmFtZU1hcCBsaWtlIGEgYE1hcGAgYnV0IGFjY2VwdHMgYHN0cmluZ1tdYCBhcyBrZXkuXG4gKi9cblxudmFyIE5hbWVNYXAgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBOYW1lTWFwKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOYW1lTWFwKTtcblxuICAgIHRoaXMubGlzdCA9IFtdO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE5hbWVNYXAsIFt7XG4gICAga2V5OiBcInNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5saXN0LmZpbmRJbmRleChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hOYW1lUGF0aChpdGVtLmtleSwga2V5KTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgIHRoaXMubGlzdFtpbmRleF0udmFsdWUgPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGlzdC5wdXNoKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy5saXN0LmZpbmQoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoTmFtZVBhdGgoaXRlbS5rZXksIGtleSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQgJiYgcmVzdWx0LnZhbHVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ1cGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKGtleSwgdXBkYXRlcikge1xuICAgICAgdmFyIG9yaWdpbiA9IHRoaXMuZ2V0KGtleSk7XG4gICAgICB2YXIgbmV4dCA9IHVwZGF0ZXIob3JpZ2luKTtcblxuICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgIHRoaXMuZGVsZXRlKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldChrZXksIG5leHQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkZWxldGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2RlbGV0ZShrZXkpIHtcbiAgICAgIHRoaXMubGlzdCA9IHRoaXMubGlzdC5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuICFtYXRjaE5hbWVQYXRoKGl0ZW0ua2V5LCBrZXkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm1hcFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzLmxpc3QubWFwKGNhbGxiYWNrKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidG9KU09OXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgIHZhciBqc29uID0ge307XG4gICAgICB0aGlzLm1hcChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIga2V5ID0gX3JlZi5rZXksXG4gICAgICAgICAgICB2YWx1ZSA9IF9yZWYudmFsdWU7XG4gICAgICAgIGpzb25ba2V5LmpvaW4oJy4nKV0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBqc29uO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBOYW1lTWFwO1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBOYW1lTWFwOyIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJyYy11dGlsL2VzL3dhcm5pbmdcIjtcbmltcG9ydCB7IEhPT0tfTUFSSyB9IGZyb20gJy4vRmllbGRDb250ZXh0JztcbmltcG9ydCB7IGFsbFByb21pc2VGaW5pc2ggfSBmcm9tICcuL3V0aWxzL2FzeW5jVXRpbCc7XG5pbXBvcnQgTmFtZU1hcCBmcm9tICcuL3V0aWxzL05hbWVNYXAnO1xuaW1wb3J0IHsgZGVmYXVsdFZhbGlkYXRlTWVzc2FnZXMgfSBmcm9tICcuL3V0aWxzL21lc3NhZ2VzJztcbmltcG9ydCB7IGNsb25lQnlOYW1lUGF0aExpc3QsIGNvbnRhaW5zTmFtZVBhdGgsIGdldE5hbWVQYXRoLCBnZXRWYWx1ZSwgc2V0VmFsdWUsIHNldFZhbHVlcyB9IGZyb20gJy4vdXRpbHMvdmFsdWVVdGlsJztcbmV4cG9ydCB2YXIgRm9ybVN0b3JlID0gZnVuY3Rpb24gRm9ybVN0b3JlKGZvcmNlUm9vdFVwZGF0ZSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGb3JtU3RvcmUpO1xuXG4gIHRoaXMuZm9ybUhvb2tlZCA9IGZhbHNlO1xuICB0aGlzLnN1YnNjcmliYWJsZSA9IHRydWU7XG4gIHRoaXMuc3RvcmUgPSB7fTtcbiAgdGhpcy5maWVsZEVudGl0aWVzID0gW107XG4gIHRoaXMuaW5pdGlhbFZhbHVlcyA9IHt9O1xuICB0aGlzLmNhbGxiYWNrcyA9IHt9O1xuICB0aGlzLnZhbGlkYXRlTWVzc2FnZXMgPSBudWxsO1xuICB0aGlzLnByZXNlcnZlID0gbnVsbDtcbiAgdGhpcy5sYXN0VmFsaWRhdGVQcm9taXNlID0gbnVsbDtcblxuICB0aGlzLmdldEZvcm0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldEZpZWxkVmFsdWU6IF90aGlzLmdldEZpZWxkVmFsdWUsXG4gICAgICBnZXRGaWVsZHNWYWx1ZTogX3RoaXMuZ2V0RmllbGRzVmFsdWUsXG4gICAgICBnZXRGaWVsZEVycm9yOiBfdGhpcy5nZXRGaWVsZEVycm9yLFxuICAgICAgZ2V0RmllbGRzRXJyb3I6IF90aGlzLmdldEZpZWxkc0Vycm9yLFxuICAgICAgaXNGaWVsZHNUb3VjaGVkOiBfdGhpcy5pc0ZpZWxkc1RvdWNoZWQsXG4gICAgICBpc0ZpZWxkVG91Y2hlZDogX3RoaXMuaXNGaWVsZFRvdWNoZWQsXG4gICAgICBpc0ZpZWxkVmFsaWRhdGluZzogX3RoaXMuaXNGaWVsZFZhbGlkYXRpbmcsXG4gICAgICBpc0ZpZWxkc1ZhbGlkYXRpbmc6IF90aGlzLmlzRmllbGRzVmFsaWRhdGluZyxcbiAgICAgIHJlc2V0RmllbGRzOiBfdGhpcy5yZXNldEZpZWxkcyxcbiAgICAgIHNldEZpZWxkczogX3RoaXMuc2V0RmllbGRzLFxuICAgICAgc2V0RmllbGRzVmFsdWU6IF90aGlzLnNldEZpZWxkc1ZhbHVlLFxuICAgICAgdmFsaWRhdGVGaWVsZHM6IF90aGlzLnZhbGlkYXRlRmllbGRzLFxuICAgICAgc3VibWl0OiBfdGhpcy5zdWJtaXQsXG4gICAgICBnZXRJbnRlcm5hbEhvb2tzOiBfdGhpcy5nZXRJbnRlcm5hbEhvb2tzXG4gICAgfTtcbiAgfTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09IEludGVybmFsIEhvb2tzID09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cbiAgdGhpcy5nZXRJbnRlcm5hbEhvb2tzID0gZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChrZXkgPT09IEhPT0tfTUFSSykge1xuICAgICAgX3RoaXMuZm9ybUhvb2tlZCA9IHRydWU7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXNwYXRjaDogX3RoaXMuZGlzcGF0Y2gsXG4gICAgICAgIGluaXRFbnRpdHlWYWx1ZTogX3RoaXMuaW5pdEVudGl0eVZhbHVlLFxuICAgICAgICByZWdpc3RlckZpZWxkOiBfdGhpcy5yZWdpc3RlckZpZWxkLFxuICAgICAgICB1c2VTdWJzY3JpYmU6IF90aGlzLnVzZVN1YnNjcmliZSxcbiAgICAgICAgc2V0SW5pdGlhbFZhbHVlczogX3RoaXMuc2V0SW5pdGlhbFZhbHVlcyxcbiAgICAgICAgc2V0Q2FsbGJhY2tzOiBfdGhpcy5zZXRDYWxsYmFja3MsXG4gICAgICAgIHNldFZhbGlkYXRlTWVzc2FnZXM6IF90aGlzLnNldFZhbGlkYXRlTWVzc2FnZXMsXG4gICAgICAgIGdldEZpZWxkczogX3RoaXMuZ2V0RmllbGRzLFxuICAgICAgICBzZXRQcmVzZXJ2ZTogX3RoaXMuc2V0UHJlc2VydmVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgd2FybmluZyhmYWxzZSwgJ2BnZXRJbnRlcm5hbEhvb2tzYCBpcyBpbnRlcm5hbCB1c2FnZS4gU2hvdWxkIG5vdCBjYWxsIGRpcmVjdGx5LicpO1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHRoaXMudXNlU3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliYWJsZSkge1xuICAgIF90aGlzLnN1YnNjcmliYWJsZSA9IHN1YnNjcmliYWJsZTtcbiAgfTtcbiAgLyoqXG4gICAqIEZpcnN0IHRpbWUgYHNldEluaXRpYWxWYWx1ZXNgIHNob3VsZCB1cGRhdGUgc3RvcmUgd2l0aCBpbml0aWFsIHZhbHVlXG4gICAqL1xuXG5cbiAgdGhpcy5zZXRJbml0aWFsVmFsdWVzID0gZnVuY3Rpb24gKGluaXRpYWxWYWx1ZXMsIGluaXQpIHtcbiAgICBfdGhpcy5pbml0aWFsVmFsdWVzID0gaW5pdGlhbFZhbHVlcyB8fCB7fTtcblxuICAgIGlmIChpbml0KSB7XG4gICAgICBfdGhpcy5zdG9yZSA9IHNldFZhbHVlcyh7fSwgaW5pdGlhbFZhbHVlcywgX3RoaXMuc3RvcmUpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmdldEluaXRpYWxWYWx1ZSA9IGZ1bmN0aW9uIChuYW1lUGF0aCkge1xuICAgIHJldHVybiBnZXRWYWx1ZShfdGhpcy5pbml0aWFsVmFsdWVzLCBuYW1lUGF0aCk7XG4gIH07XG5cbiAgdGhpcy5zZXRDYWxsYmFja3MgPSBmdW5jdGlvbiAoY2FsbGJhY2tzKSB7XG4gICAgX3RoaXMuY2FsbGJhY2tzID0gY2FsbGJhY2tzO1xuICB9O1xuXG4gIHRoaXMuc2V0VmFsaWRhdGVNZXNzYWdlcyA9IGZ1bmN0aW9uICh2YWxpZGF0ZU1lc3NhZ2VzKSB7XG4gICAgX3RoaXMudmFsaWRhdGVNZXNzYWdlcyA9IHZhbGlkYXRlTWVzc2FnZXM7XG4gIH07XG5cbiAgdGhpcy5zZXRQcmVzZXJ2ZSA9IGZ1bmN0aW9uIChwcmVzZXJ2ZSkge1xuICAgIF90aGlzLnByZXNlcnZlID0gcHJlc2VydmU7XG4gIH07IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09IERldiBXYXJuaW5nID09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG4gIHRoaXMudGltZW91dElkID0gbnVsbDtcblxuICB0aGlzLndhcm5pbmdVbmhvb2tlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhX3RoaXMudGltZW91dElkICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBfdGhpcy50aW1lb3V0SWQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnRpbWVvdXRJZCA9IG51bGw7XG5cbiAgICAgICAgaWYgKCFfdGhpcy5mb3JtSG9va2VkKSB7XG4gICAgICAgICAgd2FybmluZyhmYWxzZSwgJ0luc3RhbmNlIGNyZWF0ZWQgYnkgYHVzZUZvcm1gIGlzIG5vdCBjb25uZWN0ZWQgdG8gYW55IEZvcm0gZWxlbWVudC4gRm9yZ2V0IHRvIHBhc3MgYGZvcm1gIHByb3A/Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PSBGaWVsZHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIC8qKlxuICAgKiBHZXQgcmVnaXN0ZXJlZCBmaWVsZCBlbnRpdGllcy5cbiAgICogQHBhcmFtIHB1cmUgT25seSByZXR1cm4gZmllbGQgd2hpY2ggaGFzIGEgYG5hbWVgLiBEZWZhdWx0OiBmYWxzZVxuICAgKi9cblxuXG4gIHRoaXMuZ2V0RmllbGRFbnRpdGllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHVyZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICBpZiAoIXB1cmUpIHtcbiAgICAgIHJldHVybiBfdGhpcy5maWVsZEVudGl0aWVzO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcy5maWVsZEVudGl0aWVzLmZpbHRlcihmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5nZXROYW1lUGF0aCgpLmxlbmd0aDtcbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLmdldEZpZWxkc01hcCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHVyZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgdmFyIGNhY2hlID0gbmV3IE5hbWVNYXAoKTtcblxuICAgIF90aGlzLmdldEZpZWxkRW50aXRpZXMocHVyZSkuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHZhciBuYW1lUGF0aCA9IGZpZWxkLmdldE5hbWVQYXRoKCk7XG4gICAgICBjYWNoZS5zZXQobmFtZVBhdGgsIGZpZWxkKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBjYWNoZTtcbiAgfTtcblxuICB0aGlzLmdldEZpZWxkRW50aXRpZXNGb3JOYW1lUGF0aExpc3QgPSBmdW5jdGlvbiAobmFtZUxpc3QpIHtcbiAgICBpZiAoIW5hbWVMaXN0KSB7XG4gICAgICByZXR1cm4gX3RoaXMuZ2V0RmllbGRFbnRpdGllcyh0cnVlKTtcbiAgICB9XG5cbiAgICB2YXIgY2FjaGUgPSBfdGhpcy5nZXRGaWVsZHNNYXAodHJ1ZSk7XG5cbiAgICByZXR1cm4gbmFtZUxpc3QubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgbmFtZVBhdGggPSBnZXROYW1lUGF0aChuYW1lKTtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQobmFtZVBhdGgpIHx8IHtcbiAgICAgICAgSU5WQUxJREFURV9OQU1FX1BBVEg6IGdldE5hbWVQYXRoKG5hbWUpXG4gICAgICB9O1xuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMuZ2V0RmllbGRzVmFsdWUgPSBmdW5jdGlvbiAobmFtZUxpc3QsIGZpbHRlckZ1bmMpIHtcbiAgICBfdGhpcy53YXJuaW5nVW5ob29rZWQoKTtcblxuICAgIGlmIChuYW1lTGlzdCA9PT0gdHJ1ZSAmJiAhZmlsdGVyRnVuYykge1xuICAgICAgcmV0dXJuIF90aGlzLnN0b3JlO1xuICAgIH1cblxuICAgIHZhciBmaWVsZEVudGl0aWVzID0gX3RoaXMuZ2V0RmllbGRFbnRpdGllc0Zvck5hbWVQYXRoTGlzdChBcnJheS5pc0FycmF5KG5hbWVMaXN0KSA/IG5hbWVMaXN0IDogbnVsbCk7XG5cbiAgICB2YXIgZmlsdGVyZWROYW1lTGlzdCA9IFtdO1xuICAgIGZpZWxkRW50aXRpZXMuZm9yRWFjaChmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgICB2YXIgX2VudGl0eSRpc0xpc3RGaWVsZDtcblxuICAgICAgdmFyIG5hbWVQYXRoID0gJ0lOVkFMSURBVEVfTkFNRV9QQVRIJyBpbiBlbnRpdHkgPyBlbnRpdHkuSU5WQUxJREFURV9OQU1FX1BBVEggOiBlbnRpdHkuZ2V0TmFtZVBhdGgoKTsgLy8gSWdub3JlIHdoZW4gaXQncyBhIGxpc3QgaXRlbSBhbmQgbm90IHNwZWNpZmljIHRoZSBuYW1lUGF0aCxcbiAgICAgIC8vIHNpbmNlIHBhcmVudCBmaWVsZCBpcyBhbHJlYWR5IHRha2UgaW4gY291bnRcblxuICAgICAgaWYgKCFuYW1lTGlzdCAmJiAoKF9lbnRpdHkkaXNMaXN0RmllbGQgPSBlbnRpdHkuaXNMaXN0RmllbGQpID09PSBudWxsIHx8IF9lbnRpdHkkaXNMaXN0RmllbGQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lbnRpdHkkaXNMaXN0RmllbGQuY2FsbChlbnRpdHkpKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghZmlsdGVyRnVuYykge1xuICAgICAgICBmaWx0ZXJlZE5hbWVMaXN0LnB1c2gobmFtZVBhdGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG1ldGEgPSAnZ2V0TWV0YScgaW4gZW50aXR5ID8gZW50aXR5LmdldE1ldGEoKSA6IG51bGw7XG5cbiAgICAgICAgaWYgKGZpbHRlckZ1bmMobWV0YSkpIHtcbiAgICAgICAgICBmaWx0ZXJlZE5hbWVMaXN0LnB1c2gobmFtZVBhdGgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNsb25lQnlOYW1lUGF0aExpc3QoX3RoaXMuc3RvcmUsIGZpbHRlcmVkTmFtZUxpc3QubWFwKGdldE5hbWVQYXRoKSk7XG4gIH07XG5cbiAgdGhpcy5nZXRGaWVsZFZhbHVlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfdGhpcy53YXJuaW5nVW5ob29rZWQoKTtcblxuICAgIHZhciBuYW1lUGF0aCA9IGdldE5hbWVQYXRoKG5hbWUpO1xuICAgIHJldHVybiBnZXRWYWx1ZShfdGhpcy5zdG9yZSwgbmFtZVBhdGgpO1xuICB9O1xuXG4gIHRoaXMuZ2V0RmllbGRzRXJyb3IgPSBmdW5jdGlvbiAobmFtZUxpc3QpIHtcbiAgICBfdGhpcy53YXJuaW5nVW5ob29rZWQoKTtcblxuICAgIHZhciBmaWVsZEVudGl0aWVzID0gX3RoaXMuZ2V0RmllbGRFbnRpdGllc0Zvck5hbWVQYXRoTGlzdChuYW1lTGlzdCk7XG5cbiAgICByZXR1cm4gZmllbGRFbnRpdGllcy5tYXAoZnVuY3Rpb24gKGVudGl0eSwgaW5kZXgpIHtcbiAgICAgIGlmIChlbnRpdHkgJiYgISgnSU5WQUxJREFURV9OQU1FX1BBVEgnIGluIGVudGl0eSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBuYW1lOiBlbnRpdHkuZ2V0TmFtZVBhdGgoKSxcbiAgICAgICAgICBlcnJvcnM6IGVudGl0eS5nZXRFcnJvcnMoKVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBnZXROYW1lUGF0aChuYW1lTGlzdFtpbmRleF0pLFxuICAgICAgICBlcnJvcnM6IFtdXG4gICAgICB9O1xuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMuZ2V0RmllbGRFcnJvciA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX3RoaXMud2FybmluZ1VuaG9va2VkKCk7XG5cbiAgICB2YXIgbmFtZVBhdGggPSBnZXROYW1lUGF0aChuYW1lKTtcblxuICAgIHZhciBmaWVsZEVycm9yID0gX3RoaXMuZ2V0RmllbGRzRXJyb3IoW25hbWVQYXRoXSlbMF07XG5cbiAgICByZXR1cm4gZmllbGRFcnJvci5lcnJvcnM7XG4gIH07XG5cbiAgdGhpcy5pc0ZpZWxkc1RvdWNoZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgX3RoaXMud2FybmluZ1VuaG9va2VkKCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIGFyZzAgPSBhcmdzWzBdLFxuICAgICAgICBhcmcxID0gYXJnc1sxXTtcbiAgICB2YXIgbmFtZVBhdGhMaXN0O1xuICAgIHZhciBpc0FsbEZpZWxkc1RvdWNoZWQgPSBmYWxzZTtcblxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgbmFtZVBhdGhMaXN0ID0gbnVsbDtcbiAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcwKSkge1xuICAgICAgICBuYW1lUGF0aExpc3QgPSBhcmcwLm1hcChnZXROYW1lUGF0aCk7XG4gICAgICAgIGlzQWxsRmllbGRzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmFtZVBhdGhMaXN0ID0gbnVsbDtcbiAgICAgICAgaXNBbGxGaWVsZHNUb3VjaGVkID0gYXJnMDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZVBhdGhMaXN0ID0gYXJnMC5tYXAoZ2V0TmFtZVBhdGgpO1xuICAgICAgaXNBbGxGaWVsZHNUb3VjaGVkID0gYXJnMTtcbiAgICB9XG5cbiAgICB2YXIgZmllbGRFbnRpdGllcyA9IF90aGlzLmdldEZpZWxkRW50aXRpZXModHJ1ZSk7XG5cbiAgICB2YXIgaXNGaWVsZFRvdWNoZWQgPSBmdW5jdGlvbiBpc0ZpZWxkVG91Y2hlZChmaWVsZCkge1xuICAgICAgcmV0dXJuIGZpZWxkLmlzRmllbGRUb3VjaGVkKCk7XG4gICAgfTsgLy8gPT09PT0gV2lsbCBnZXQgZnVsbHkgY29tcGFyZSB3aGVuIG5vdCBjb25maWcgbmFtZVBhdGhMaXN0ID09PT09XG5cblxuICAgIGlmICghbmFtZVBhdGhMaXN0KSB7XG4gICAgICByZXR1cm4gaXNBbGxGaWVsZHNUb3VjaGVkID8gZmllbGRFbnRpdGllcy5ldmVyeShpc0ZpZWxkVG91Y2hlZCkgOiBmaWVsZEVudGl0aWVzLnNvbWUoaXNGaWVsZFRvdWNoZWQpO1xuICAgIH0gLy8gR2VuZXJhdGUgYSBuZXN0IHRyZWUgZm9yIHZhbGlkYXRlXG5cblxuICAgIHZhciBtYXAgPSBuZXcgTmFtZU1hcCgpO1xuICAgIG5hbWVQYXRoTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChzaG9ydE5hbWVQYXRoKSB7XG4gICAgICBtYXAuc2V0KHNob3J0TmFtZVBhdGgsIFtdKTtcbiAgICB9KTtcbiAgICBmaWVsZEVudGl0aWVzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICB2YXIgZmllbGROYW1lUGF0aCA9IGZpZWxkLmdldE5hbWVQYXRoKCk7IC8vIEZpbmQgbWF0Y2hlZCBlbnRpdHkgYW5kIHB1dCBpbnRvIGxpc3RcblxuICAgICAgbmFtZVBhdGhMaXN0LmZvckVhY2goZnVuY3Rpb24gKHNob3J0TmFtZVBhdGgpIHtcbiAgICAgICAgaWYgKHNob3J0TmFtZVBhdGguZXZlcnkoZnVuY3Rpb24gKG5hbWVVbml0LCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGZpZWxkTmFtZVBhdGhbaV0gPT09IG5hbWVVbml0O1xuICAgICAgICB9KSkge1xuICAgICAgICAgIG1hcC51cGRhdGUoc2hvcnROYW1lUGF0aCwgZnVuY3Rpb24gKGxpc3QpIHtcbiAgICAgICAgICAgIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGxpc3QpLCBbZmllbGRdKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7IC8vIENoZWNrIGlmIE5hbWVNYXAgdmFsdWUgaXMgdG91Y2hlZFxuXG4gICAgdmFyIGlzTmFtZVBhdGhMaXN0VG91Y2hlZCA9IGZ1bmN0aW9uIGlzTmFtZVBhdGhMaXN0VG91Y2hlZChlbnRpdGllcykge1xuICAgICAgcmV0dXJuIGVudGl0aWVzLnNvbWUoaXNGaWVsZFRvdWNoZWQpO1xuICAgIH07XG5cbiAgICB2YXIgbmFtZVBhdGhMaXN0RW50aXRpZXMgPSBtYXAubWFwKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgdmFsdWUgPSBfcmVmLnZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiBpc0FsbEZpZWxkc1RvdWNoZWQgPyBuYW1lUGF0aExpc3RFbnRpdGllcy5ldmVyeShpc05hbWVQYXRoTGlzdFRvdWNoZWQpIDogbmFtZVBhdGhMaXN0RW50aXRpZXMuc29tZShpc05hbWVQYXRoTGlzdFRvdWNoZWQpO1xuICB9O1xuXG4gIHRoaXMuaXNGaWVsZFRvdWNoZWQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIF90aGlzLndhcm5pbmdVbmhvb2tlZCgpO1xuXG4gICAgcmV0dXJuIF90aGlzLmlzRmllbGRzVG91Y2hlZChbbmFtZV0pO1xuICB9O1xuXG4gIHRoaXMuaXNGaWVsZHNWYWxpZGF0aW5nID0gZnVuY3Rpb24gKG5hbWVMaXN0KSB7XG4gICAgX3RoaXMud2FybmluZ1VuaG9va2VkKCk7XG5cbiAgICB2YXIgZmllbGRFbnRpdGllcyA9IF90aGlzLmdldEZpZWxkRW50aXRpZXMoKTtcblxuICAgIGlmICghbmFtZUxpc3QpIHtcbiAgICAgIHJldHVybiBmaWVsZEVudGl0aWVzLnNvbWUoZnVuY3Rpb24gKHRlc3RGaWVsZCkge1xuICAgICAgICByZXR1cm4gdGVzdEZpZWxkLmlzRmllbGRWYWxpZGF0aW5nKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgbmFtZVBhdGhMaXN0ID0gbmFtZUxpc3QubWFwKGdldE5hbWVQYXRoKTtcbiAgICByZXR1cm4gZmllbGRFbnRpdGllcy5zb21lKGZ1bmN0aW9uICh0ZXN0RmllbGQpIHtcbiAgICAgIHZhciBmaWVsZE5hbWVQYXRoID0gdGVzdEZpZWxkLmdldE5hbWVQYXRoKCk7XG4gICAgICByZXR1cm4gY29udGFpbnNOYW1lUGF0aChuYW1lUGF0aExpc3QsIGZpZWxkTmFtZVBhdGgpICYmIHRlc3RGaWVsZC5pc0ZpZWxkVmFsaWRhdGluZygpO1xuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMuaXNGaWVsZFZhbGlkYXRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIF90aGlzLndhcm5pbmdVbmhvb2tlZCgpO1xuXG4gICAgcmV0dXJuIF90aGlzLmlzRmllbGRzVmFsaWRhdGluZyhbbmFtZV0pO1xuICB9O1xuICAvKipcbiAgICogUmVzZXQgRmllbGQgd2l0aCBmaWVsZCBgaW5pdGlhbFZhbHVlYCBwcm9wLlxuICAgKiBDYW4gcGFzcyBgZW50aXRpZXNgIG9yIGBuYW1lUGF0aExpc3RgIG9yIGp1c3Qgbm90aGluZy5cbiAgICovXG5cblxuICB0aGlzLnJlc2V0V2l0aEZpZWxkSW5pdGlhbFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpbmZvID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAvLyBDcmVhdGUgY2FjaGVcbiAgICB2YXIgY2FjaGUgPSBuZXcgTmFtZU1hcCgpO1xuXG4gICAgdmFyIGZpZWxkRW50aXRpZXMgPSBfdGhpcy5nZXRGaWVsZEVudGl0aWVzKHRydWUpO1xuXG4gICAgZmllbGRFbnRpdGllcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgdmFyIGluaXRpYWxWYWx1ZSA9IGZpZWxkLnByb3BzLmluaXRpYWxWYWx1ZTtcbiAgICAgIHZhciBuYW1lUGF0aCA9IGZpZWxkLmdldE5hbWVQYXRoKCk7IC8vIFJlY29yZCBvbmx5IGlmIGhhcyBgaW5pdGlhbFZhbHVlYFxuXG4gICAgICBpZiAoaW5pdGlhbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIHJlY29yZHMgPSBjYWNoZS5nZXQobmFtZVBhdGgpIHx8IG5ldyBTZXQoKTtcbiAgICAgICAgcmVjb3Jkcy5hZGQoe1xuICAgICAgICAgIGVudGl0eTogZmllbGQsXG4gICAgICAgICAgdmFsdWU6IGluaXRpYWxWYWx1ZVxuICAgICAgICB9KTtcbiAgICAgICAgY2FjaGUuc2V0KG5hbWVQYXRoLCByZWNvcmRzKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gUmVzZXRcblxuICAgIHZhciByZXNldFdpdGhGaWVsZHMgPSBmdW5jdGlvbiByZXNldFdpdGhGaWVsZHMoZW50aXRpZXMpIHtcbiAgICAgIGVudGl0aWVzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgIHZhciBpbml0aWFsVmFsdWUgPSBmaWVsZC5wcm9wcy5pbml0aWFsVmFsdWU7XG5cbiAgICAgICAgaWYgKGluaXRpYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIG5hbWVQYXRoID0gZmllbGQuZ2V0TmFtZVBhdGgoKTtcblxuICAgICAgICAgIHZhciBmb3JtSW5pdGlhbFZhbHVlID0gX3RoaXMuZ2V0SW5pdGlhbFZhbHVlKG5hbWVQYXRoKTtcblxuICAgICAgICAgIGlmIChmb3JtSW5pdGlhbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIFdhcm5pbmcgaWYgY29uZmxpY3Qgd2l0aCBmb3JtIGluaXRpYWxWYWx1ZXMgYW5kIGRvIG5vdCBtb2RpZnkgdmFsdWVcbiAgICAgICAgICAgIHdhcm5pbmcoZmFsc2UsIFwiRm9ybSBhbHJlYWR5IHNldCAnaW5pdGlhbFZhbHVlcycgd2l0aCBwYXRoICdcIi5jb25jYXQobmFtZVBhdGguam9pbignLicpLCBcIicuIEZpZWxkIGNhbiBub3Qgb3ZlcndyaXRlIGl0LlwiKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciByZWNvcmRzID0gY2FjaGUuZ2V0KG5hbWVQYXRoKTtcblxuICAgICAgICAgICAgaWYgKHJlY29yZHMgJiYgcmVjb3Jkcy5zaXplID4gMSkge1xuICAgICAgICAgICAgICAvLyBXYXJuaW5nIGlmIG11bHRpcGxlIGZpZWxkIHNldCBgaW5pdGlhbFZhbHVlYGFuZCBkbyBub3QgbW9kaWZ5IHZhbHVlXG4gICAgICAgICAgICAgIHdhcm5pbmcoZmFsc2UsIFwiTXVsdGlwbGUgRmllbGQgd2l0aCBwYXRoICdcIi5jb25jYXQobmFtZVBhdGguam9pbignLicpLCBcIicgc2V0ICdpbml0aWFsVmFsdWUnLiBDYW4gbm90IGRlY2lkZSB3aGljaCBvbmUgdG8gcGljay5cIikpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZWNvcmRzKSB7XG4gICAgICAgICAgICAgIHZhciBvcmlnaW5WYWx1ZSA9IF90aGlzLmdldEZpZWxkVmFsdWUobmFtZVBhdGgpOyAvLyBTZXQgYGluaXRpYWxWYWx1ZWBcblxuXG4gICAgICAgICAgICAgIGlmICghaW5mby5za2lwRXhpc3QgfHwgb3JpZ2luVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnN0b3JlID0gc2V0VmFsdWUoX3RoaXMuc3RvcmUsIG5hbWVQYXRoLCBfdG9Db25zdW1hYmxlQXJyYXkocmVjb3JkcylbMF0udmFsdWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgdmFyIHJlcXVpcmVkRmllbGRFbnRpdGllcztcblxuICAgIGlmIChpbmZvLmVudGl0aWVzKSB7XG4gICAgICByZXF1aXJlZEZpZWxkRW50aXRpZXMgPSBpbmZvLmVudGl0aWVzO1xuICAgIH0gZWxzZSBpZiAoaW5mby5uYW1lUGF0aExpc3QpIHtcbiAgICAgIHJlcXVpcmVkRmllbGRFbnRpdGllcyA9IFtdO1xuICAgICAgaW5mby5uYW1lUGF0aExpc3QuZm9yRWFjaChmdW5jdGlvbiAobmFtZVBhdGgpIHtcbiAgICAgICAgdmFyIHJlY29yZHMgPSBjYWNoZS5nZXQobmFtZVBhdGgpO1xuXG4gICAgICAgIGlmIChyZWNvcmRzKSB7XG4gICAgICAgICAgdmFyIF9yZXF1aXJlZEZpZWxkRW50aXRpZTtcblxuICAgICAgICAgIChfcmVxdWlyZWRGaWVsZEVudGl0aWUgPSByZXF1aXJlZEZpZWxkRW50aXRpZXMpLnB1c2guYXBwbHkoX3JlcXVpcmVkRmllbGRFbnRpdGllLCBfdG9Db25zdW1hYmxlQXJyYXkoX3RvQ29uc3VtYWJsZUFycmF5KHJlY29yZHMpLm1hcChmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgcmV0dXJuIHIuZW50aXR5O1xuICAgICAgICAgIH0pKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXF1aXJlZEZpZWxkRW50aXRpZXMgPSBmaWVsZEVudGl0aWVzO1xuICAgIH1cblxuICAgIHJlc2V0V2l0aEZpZWxkcyhyZXF1aXJlZEZpZWxkRW50aXRpZXMpO1xuICB9O1xuXG4gIHRoaXMucmVzZXRGaWVsZHMgPSBmdW5jdGlvbiAobmFtZUxpc3QpIHtcbiAgICBfdGhpcy53YXJuaW5nVW5ob29rZWQoKTtcblxuICAgIHZhciBwcmV2U3RvcmUgPSBfdGhpcy5zdG9yZTtcblxuICAgIGlmICghbmFtZUxpc3QpIHtcbiAgICAgIF90aGlzLnN0b3JlID0gc2V0VmFsdWVzKHt9LCBfdGhpcy5pbml0aWFsVmFsdWVzKTtcblxuICAgICAgX3RoaXMucmVzZXRXaXRoRmllbGRJbml0aWFsVmFsdWUoKTtcblxuICAgICAgX3RoaXMubm90aWZ5T2JzZXJ2ZXJzKHByZXZTdG9yZSwgbnVsbCwge1xuICAgICAgICB0eXBlOiAncmVzZXQnXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gUmVzZXQgYnkgYG5hbWVMaXN0YFxuXG5cbiAgICB2YXIgbmFtZVBhdGhMaXN0ID0gbmFtZUxpc3QubWFwKGdldE5hbWVQYXRoKTtcbiAgICBuYW1lUGF0aExpc3QuZm9yRWFjaChmdW5jdGlvbiAobmFtZVBhdGgpIHtcbiAgICAgIHZhciBpbml0aWFsVmFsdWUgPSBfdGhpcy5nZXRJbml0aWFsVmFsdWUobmFtZVBhdGgpO1xuXG4gICAgICBfdGhpcy5zdG9yZSA9IHNldFZhbHVlKF90aGlzLnN0b3JlLCBuYW1lUGF0aCwgaW5pdGlhbFZhbHVlKTtcbiAgICB9KTtcblxuICAgIF90aGlzLnJlc2V0V2l0aEZpZWxkSW5pdGlhbFZhbHVlKHtcbiAgICAgIG5hbWVQYXRoTGlzdDogbmFtZVBhdGhMaXN0XG4gICAgfSk7XG5cbiAgICBfdGhpcy5ub3RpZnlPYnNlcnZlcnMocHJldlN0b3JlLCBuYW1lUGF0aExpc3QsIHtcbiAgICAgIHR5cGU6ICdyZXNldCdcbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLnNldEZpZWxkcyA9IGZ1bmN0aW9uIChmaWVsZHMpIHtcbiAgICBfdGhpcy53YXJuaW5nVW5ob29rZWQoKTtcblxuICAgIHZhciBwcmV2U3RvcmUgPSBfdGhpcy5zdG9yZTtcbiAgICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGREYXRhKSB7XG4gICAgICB2YXIgbmFtZSA9IGZpZWxkRGF0YS5uYW1lLFxuICAgICAgICAgIGVycm9ycyA9IGZpZWxkRGF0YS5lcnJvcnMsXG4gICAgICAgICAgZGF0YSA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhmaWVsZERhdGEsIFtcIm5hbWVcIiwgXCJlcnJvcnNcIl0pO1xuXG4gICAgICB2YXIgbmFtZVBhdGggPSBnZXROYW1lUGF0aChuYW1lKTsgLy8gVmFsdWVcblxuICAgICAgaWYgKCd2YWx1ZScgaW4gZGF0YSkge1xuICAgICAgICBfdGhpcy5zdG9yZSA9IHNldFZhbHVlKF90aGlzLnN0b3JlLCBuYW1lUGF0aCwgZGF0YS52YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLm5vdGlmeU9ic2VydmVycyhwcmV2U3RvcmUsIFtuYW1lUGF0aF0sIHtcbiAgICAgICAgdHlwZTogJ3NldEZpZWxkJyxcbiAgICAgICAgZGF0YTogZmllbGREYXRhXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLmdldEZpZWxkcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZW50aXRpZXMgPSBfdGhpcy5nZXRGaWVsZEVudGl0aWVzKHRydWUpO1xuXG4gICAgdmFyIGZpZWxkcyA9IGVudGl0aWVzLm1hcChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHZhciBuYW1lUGF0aCA9IGZpZWxkLmdldE5hbWVQYXRoKCk7XG4gICAgICB2YXIgbWV0YSA9IGZpZWxkLmdldE1ldGEoKTtcblxuICAgICAgdmFyIGZpZWxkRGF0YSA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbWV0YSksIHt9LCB7XG4gICAgICAgIG5hbWU6IG5hbWVQYXRoLFxuICAgICAgICB2YWx1ZTogX3RoaXMuZ2V0RmllbGRWYWx1ZShuYW1lUGF0aClcbiAgICAgIH0pO1xuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZmllbGREYXRhLCAnb3JpZ2luUkNGaWVsZCcsIHtcbiAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZpZWxkRGF0YTtcbiAgICB9KTtcbiAgICByZXR1cm4gZmllbGRzO1xuICB9OyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT0gT2JzZXJ2ZXIgPT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgLyoqXG4gICAqIFRoaXMgb25seSB0cmlnZ2VyIHdoZW4gYSBmaWVsZCBpcyBvbiBjb25zdHJ1Y3RvciB0byBhdm9pZCB3ZSBnZXQgaW5pdGlhbFZhbHVlIHRvbyBsYXRlXG4gICAqL1xuXG5cbiAgdGhpcy5pbml0RW50aXR5VmFsdWUgPSBmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgdmFyIGluaXRpYWxWYWx1ZSA9IGVudGl0eS5wcm9wcy5pbml0aWFsVmFsdWU7XG5cbiAgICBpZiAoaW5pdGlhbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBuYW1lUGF0aCA9IGVudGl0eS5nZXROYW1lUGF0aCgpO1xuICAgICAgdmFyIHByZXZWYWx1ZSA9IGdldFZhbHVlKF90aGlzLnN0b3JlLCBuYW1lUGF0aCk7XG5cbiAgICAgIGlmIChwcmV2VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBfdGhpcy5zdG9yZSA9IHNldFZhbHVlKF90aGlzLnN0b3JlLCBuYW1lUGF0aCwgaW5pdGlhbFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdGhpcy5yZWdpc3RlckZpZWxkID0gZnVuY3Rpb24gKGVudGl0eSkge1xuICAgIF90aGlzLmZpZWxkRW50aXRpZXMucHVzaChlbnRpdHkpOyAvLyBTZXQgaW5pdGlhbCB2YWx1ZXNcblxuXG4gICAgaWYgKGVudGl0eS5wcm9wcy5pbml0aWFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIHByZXZTdG9yZSA9IF90aGlzLnN0b3JlO1xuXG4gICAgICBfdGhpcy5yZXNldFdpdGhGaWVsZEluaXRpYWxWYWx1ZSh7XG4gICAgICAgIGVudGl0aWVzOiBbZW50aXR5XSxcbiAgICAgICAgc2tpcEV4aXN0OiB0cnVlXG4gICAgICB9KTtcblxuICAgICAgX3RoaXMubm90aWZ5T2JzZXJ2ZXJzKHByZXZTdG9yZSwgW2VudGl0eS5nZXROYW1lUGF0aCgpXSwge1xuICAgICAgICB0eXBlOiAndmFsdWVVcGRhdGUnLFxuICAgICAgICBzb3VyY2U6ICdpbnRlcm5hbCdcbiAgICAgIH0pO1xuICAgIH0gLy8gdW4tcmVnaXN0ZXIgZmllbGQgY2FsbGJhY2tcblxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpc0xpc3RGaWVsZCwgcHJlc2VydmUpIHtcbiAgICAgIF90aGlzLmZpZWxkRW50aXRpZXMgPSBfdGhpcy5maWVsZEVudGl0aWVzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gZW50aXR5O1xuICAgICAgfSk7IC8vIENsZWFuIHVwIHN0b3JlIHZhbHVlIGlmIHByZXNlcnZlXG5cbiAgICAgIHZhciBtZXJnZWRQcmVzZXJ2ZSA9IHByZXNlcnZlICE9PSB1bmRlZmluZWQgPyBwcmVzZXJ2ZSA6IF90aGlzLnByZXNlcnZlO1xuXG4gICAgICBpZiAobWVyZ2VkUHJlc2VydmUgPT09IGZhbHNlICYmICFpc0xpc3RGaWVsZCkge1xuICAgICAgICB2YXIgbmFtZVBhdGggPSBlbnRpdHkuZ2V0TmFtZVBhdGgoKTtcblxuICAgICAgICBpZiAobmFtZVBhdGgubGVuZ3RoICYmIF90aGlzLmdldEZpZWxkVmFsdWUobmFtZVBhdGgpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBfdGhpcy5zdG9yZSA9IHNldFZhbHVlKF90aGlzLnN0b3JlLCBuYW1lUGF0aCwgdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgdGhpcy5kaXNwYXRjaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICBjYXNlICd1cGRhdGVWYWx1ZSc6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgbmFtZVBhdGggPSBhY3Rpb24ubmFtZVBhdGgsXG4gICAgICAgICAgICAgIHZhbHVlID0gYWN0aW9uLnZhbHVlO1xuXG4gICAgICAgICAgX3RoaXMudXBkYXRlVmFsdWUobmFtZVBhdGgsIHZhbHVlKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgJ3ZhbGlkYXRlRmllbGQnOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIF9uYW1lUGF0aCA9IGFjdGlvbi5uYW1lUGF0aCxcbiAgICAgICAgICAgICAgdHJpZ2dlck5hbWUgPSBhY3Rpb24udHJpZ2dlck5hbWU7XG5cbiAgICAgICAgICBfdGhpcy52YWxpZGF0ZUZpZWxkcyhbX25hbWVQYXRoXSwge1xuICAgICAgICAgICAgdHJpZ2dlck5hbWU6IHRyaWdnZXJOYW1lXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OiAvLyBDdXJyZW50bHkgd2UgZG9uJ3QgaGF2ZSBvdGhlciBhY3Rpb24uIERvIG5vdGhpbmcuXG5cbiAgICB9XG4gIH07XG5cbiAgdGhpcy5ub3RpZnlPYnNlcnZlcnMgPSBmdW5jdGlvbiAocHJldlN0b3JlLCBuYW1lUGF0aExpc3QsIGluZm8pIHtcbiAgICBpZiAoX3RoaXMuc3Vic2NyaWJhYmxlKSB7XG4gICAgICB2YXIgbWVyZ2VkSW5mbyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgaW5mbyksIHt9LCB7XG4gICAgICAgIHN0b3JlOiBfdGhpcy5nZXRGaWVsZHNWYWx1ZSh0cnVlKVxuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLmdldEZpZWxkRW50aXRpZXMoKS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICB2YXIgb25TdG9yZUNoYW5nZSA9IF9yZWYyLm9uU3RvcmVDaGFuZ2U7XG4gICAgICAgIG9uU3RvcmVDaGFuZ2UocHJldlN0b3JlLCBuYW1lUGF0aExpc3QsIG1lcmdlZEluZm8pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzLmZvcmNlUm9vdFVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLnVwZGF0ZVZhbHVlID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIG5hbWVQYXRoID0gZ2V0TmFtZVBhdGgobmFtZSk7XG4gICAgdmFyIHByZXZTdG9yZSA9IF90aGlzLnN0b3JlO1xuICAgIF90aGlzLnN0b3JlID0gc2V0VmFsdWUoX3RoaXMuc3RvcmUsIG5hbWVQYXRoLCB2YWx1ZSk7XG5cbiAgICBfdGhpcy5ub3RpZnlPYnNlcnZlcnMocHJldlN0b3JlLCBbbmFtZVBhdGhdLCB7XG4gICAgICB0eXBlOiAndmFsdWVVcGRhdGUnLFxuICAgICAgc291cmNlOiAnaW50ZXJuYWwnXG4gICAgfSk7IC8vIE5vdGlmeSBkZXBlbmRlbmNpZXMgY2hpbGRyZW4gd2l0aCBwYXJlbnQgdXBkYXRlXG4gICAgLy8gV2UgbmVlZCBkZWxheSB0byB0cmlnZ2VyIHZhbGlkYXRlIGluIGNhc2UgRmllbGQgaXMgdW5kZXIgcmVuZGVyIHByb3BzXG5cblxuICAgIHZhciBjaGlsZHJlbkZpZWxkcyA9IF90aGlzLmdldERlcGVuZGVuY3lDaGlsZHJlbkZpZWxkcyhuYW1lUGF0aCk7XG5cbiAgICBpZiAoY2hpbGRyZW5GaWVsZHMubGVuZ3RoKSB7XG4gICAgICBfdGhpcy52YWxpZGF0ZUZpZWxkcyhjaGlsZHJlbkZpZWxkcyk7XG4gICAgfVxuXG4gICAgX3RoaXMubm90aWZ5T2JzZXJ2ZXJzKHByZXZTdG9yZSwgY2hpbGRyZW5GaWVsZHMsIHtcbiAgICAgIHR5cGU6ICdkZXBlbmRlbmNpZXNVcGRhdGUnLFxuICAgICAgcmVsYXRlZEZpZWxkczogW25hbWVQYXRoXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGNoaWxkcmVuRmllbGRzKSlcbiAgICB9KTsgLy8gdHJpZ2dlciBjYWxsYmFjayBmdW5jdGlvblxuXG5cbiAgICB2YXIgb25WYWx1ZXNDaGFuZ2UgPSBfdGhpcy5jYWxsYmFja3Mub25WYWx1ZXNDaGFuZ2U7XG5cbiAgICBpZiAob25WYWx1ZXNDaGFuZ2UpIHtcbiAgICAgIHZhciBjaGFuZ2VkVmFsdWVzID0gY2xvbmVCeU5hbWVQYXRoTGlzdChfdGhpcy5zdG9yZSwgW25hbWVQYXRoXSk7XG4gICAgICBvblZhbHVlc0NoYW5nZShjaGFuZ2VkVmFsdWVzLCBfdGhpcy5nZXRGaWVsZHNWYWx1ZSgpKTtcbiAgICB9XG5cbiAgICBfdGhpcy50cmlnZ2VyT25GaWVsZHNDaGFuZ2UoW25hbWVQYXRoXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGNoaWxkcmVuRmllbGRzKSkpO1xuICB9OyAvLyBMZXQgYWxsIGNoaWxkIEZpZWxkIGdldCB1cGRhdGUuXG5cblxuICB0aGlzLnNldEZpZWxkc1ZhbHVlID0gZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgX3RoaXMud2FybmluZ1VuaG9va2VkKCk7XG5cbiAgICB2YXIgcHJldlN0b3JlID0gX3RoaXMuc3RvcmU7XG5cbiAgICBpZiAoc3RvcmUpIHtcbiAgICAgIF90aGlzLnN0b3JlID0gc2V0VmFsdWVzKF90aGlzLnN0b3JlLCBzdG9yZSk7XG4gICAgfVxuXG4gICAgX3RoaXMubm90aWZ5T2JzZXJ2ZXJzKHByZXZTdG9yZSwgbnVsbCwge1xuICAgICAgdHlwZTogJ3ZhbHVlVXBkYXRlJyxcbiAgICAgIHNvdXJjZTogJ2V4dGVybmFsJ1xuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMuZ2V0RGVwZW5kZW5jeUNoaWxkcmVuRmllbGRzID0gZnVuY3Rpb24gKHJvb3ROYW1lUGF0aCkge1xuICAgIHZhciBjaGlsZHJlbiA9IG5ldyBTZXQoKTtcbiAgICB2YXIgY2hpbGRyZW5GaWVsZHMgPSBbXTtcbiAgICB2YXIgZGVwZW5kZW5jaWVzMmZpZWxkcyA9IG5ldyBOYW1lTWFwKCk7XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgbWFwc1xuICAgICAqIENhbiB1c2UgY2FjaGUgdG8gc2F2ZSBwZXJmIGlmIHVzZXIgcmVwb3J0IHBlcmZvcm1hbmNlIGlzc3VlIHdpdGggdGhpc1xuICAgICAqL1xuXG4gICAgX3RoaXMuZ2V0RmllbGRFbnRpdGllcygpLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICB2YXIgZGVwZW5kZW5jaWVzID0gZmllbGQucHJvcHMuZGVwZW5kZW5jaWVzO1xuICAgICAgKGRlcGVuZGVuY2llcyB8fCBbXSkuZm9yRWFjaChmdW5jdGlvbiAoZGVwZW5kZW5jeSkge1xuICAgICAgICB2YXIgZGVwZW5kZW5jeU5hbWVQYXRoID0gZ2V0TmFtZVBhdGgoZGVwZW5kZW5jeSk7XG4gICAgICAgIGRlcGVuZGVuY2llczJmaWVsZHMudXBkYXRlKGRlcGVuZGVuY3lOYW1lUGF0aCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBmaWVsZHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG5ldyBTZXQoKTtcbiAgICAgICAgICBmaWVsZHMuYWRkKGZpZWxkKTtcbiAgICAgICAgICByZXR1cm4gZmllbGRzO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdmFyIGZpbGxDaGlsZHJlbiA9IGZ1bmN0aW9uIGZpbGxDaGlsZHJlbihuYW1lUGF0aCkge1xuICAgICAgdmFyIGZpZWxkcyA9IGRlcGVuZGVuY2llczJmaWVsZHMuZ2V0KG5hbWVQYXRoKSB8fCBuZXcgU2V0KCk7XG4gICAgICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgaWYgKCFjaGlsZHJlbi5oYXMoZmllbGQpKSB7XG4gICAgICAgICAgY2hpbGRyZW4uYWRkKGZpZWxkKTtcbiAgICAgICAgICB2YXIgZmllbGROYW1lUGF0aCA9IGZpZWxkLmdldE5hbWVQYXRoKCk7XG5cbiAgICAgICAgICBpZiAoZmllbGQuaXNGaWVsZERpcnR5KCkgJiYgZmllbGROYW1lUGF0aC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNoaWxkcmVuRmllbGRzLnB1c2goZmllbGROYW1lUGF0aCk7XG4gICAgICAgICAgICBmaWxsQ2hpbGRyZW4oZmllbGROYW1lUGF0aCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgZmlsbENoaWxkcmVuKHJvb3ROYW1lUGF0aCk7XG4gICAgcmV0dXJuIGNoaWxkcmVuRmllbGRzO1xuICB9O1xuXG4gIHRoaXMudHJpZ2dlck9uRmllbGRzQ2hhbmdlID0gZnVuY3Rpb24gKG5hbWVQYXRoTGlzdCwgZmlsZWRFcnJvcnMpIHtcbiAgICB2YXIgb25GaWVsZHNDaGFuZ2UgPSBfdGhpcy5jYWxsYmFja3Mub25GaWVsZHNDaGFuZ2U7XG5cbiAgICBpZiAob25GaWVsZHNDaGFuZ2UpIHtcbiAgICAgIHZhciBmaWVsZHMgPSBfdGhpcy5nZXRGaWVsZHMoKTtcbiAgICAgIC8qKlxuICAgICAgICogRmlsbCBlcnJvcnMgc2luY2UgYGZpZWxkc2AgbWF5IGJlIHJlcGxhY2VkIGJ5IGNvbnRyb2xsZWQgZmllbGRzXG4gICAgICAgKi9cblxuXG4gICAgICBpZiAoZmlsZWRFcnJvcnMpIHtcbiAgICAgICAgdmFyIGNhY2hlID0gbmV3IE5hbWVNYXAoKTtcbiAgICAgICAgZmlsZWRFcnJvcnMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICAgICAgICB2YXIgbmFtZSA9IF9yZWYzLm5hbWUsXG4gICAgICAgICAgICAgIGVycm9ycyA9IF9yZWYzLmVycm9ycztcbiAgICAgICAgICBjYWNoZS5zZXQobmFtZSwgZXJyb3JzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgIGZpZWxkLmVycm9ycyA9IGNhY2hlLmdldChmaWVsZC5uYW1lKSB8fCBmaWVsZC5lcnJvcnM7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hhbmdlZEZpZWxkcyA9IGZpZWxkcy5maWx0ZXIoZnVuY3Rpb24gKF9yZWY0KSB7XG4gICAgICAgIHZhciBmaWVsZE5hbWUgPSBfcmVmNC5uYW1lO1xuICAgICAgICByZXR1cm4gY29udGFpbnNOYW1lUGF0aChuYW1lUGF0aExpc3QsIGZpZWxkTmFtZSk7XG4gICAgICB9KTtcbiAgICAgIG9uRmllbGRzQ2hhbmdlKGNoYW5nZWRGaWVsZHMsIGZpZWxkcyk7XG4gICAgfVxuICB9OyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT0gVmFsaWRhdGUgPT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblxuICB0aGlzLnZhbGlkYXRlRmllbGRzID0gZnVuY3Rpb24gKG5hbWVMaXN0LCBvcHRpb25zKSB7XG4gICAgX3RoaXMud2FybmluZ1VuaG9va2VkKCk7XG5cbiAgICB2YXIgcHJvdmlkZU5hbWVMaXN0ID0gISFuYW1lTGlzdDtcbiAgICB2YXIgbmFtZVBhdGhMaXN0ID0gcHJvdmlkZU5hbWVMaXN0ID8gbmFtZUxpc3QubWFwKGdldE5hbWVQYXRoKSA6IFtdOyAvLyBDb2xsZWN0IHJlc3VsdCBpbiBwcm9taXNlIGxpc3RcblxuICAgIHZhciBwcm9taXNlTGlzdCA9IFtdO1xuXG4gICAgX3RoaXMuZ2V0RmllbGRFbnRpdGllcyh0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgLy8gQWRkIGZpZWxkIGlmIG5vdCBwcm92aWRlIGBuYW1lTGlzdGBcbiAgICAgIGlmICghcHJvdmlkZU5hbWVMaXN0KSB7XG4gICAgICAgIG5hbWVQYXRoTGlzdC5wdXNoKGZpZWxkLmdldE5hbWVQYXRoKCkpO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBSZWN1cnNpdmUgdmFsaWRhdGUgaWYgY29uZmlndXJlZC5cbiAgICAgICAqIFRPRE86IHBlcmYgaW1wcm92ZW1lbnQgQHpvbWJpZUpcbiAgICAgICAqL1xuXG5cbiAgICAgIGlmICgob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJlY3Vyc2l2ZSkgJiYgcHJvdmlkZU5hbWVMaXN0KSB7XG4gICAgICAgIHZhciBuYW1lUGF0aCA9IGZpZWxkLmdldE5hbWVQYXRoKCk7XG5cbiAgICAgICAgaWYgKCAvLyBuYW1lTGlzdFtpXSA9PT0gdW5kZWZpbmVkIOivtOaYjuaYr+S7pSBuYW1lTGlzdCDlvIDlpLTnmoRcbiAgICAgICAgLy8gWyduYW1lJ10gLT4gWyduYW1lJywnbGlzdCddXG4gICAgICAgIG5hbWVQYXRoLmV2ZXJ5KGZ1bmN0aW9uIChuYW1lVW5pdCwgaSkge1xuICAgICAgICAgIHJldHVybiBuYW1lTGlzdFtpXSA9PT0gbmFtZVVuaXQgfHwgbmFtZUxpc3RbaV0gPT09IHVuZGVmaW5lZDtcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICBuYW1lUGF0aExpc3QucHVzaChuYW1lUGF0aCk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gU2tpcCBpZiB3aXRob3V0IHJ1bGVcblxuXG4gICAgICBpZiAoIWZpZWxkLnByb3BzLnJ1bGVzIHx8ICFmaWVsZC5wcm9wcy5ydWxlcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZmllbGROYW1lUGF0aCA9IGZpZWxkLmdldE5hbWVQYXRoKCk7IC8vIEFkZCBmaWVsZCB2YWxpZGF0ZSBydWxlIGluIHRvIHByb21pc2UgbGlzdFxuXG4gICAgICBpZiAoIXByb3ZpZGVOYW1lTGlzdCB8fCBjb250YWluc05hbWVQYXRoKG5hbWVQYXRoTGlzdCwgZmllbGROYW1lUGF0aCkpIHtcbiAgICAgICAgdmFyIHByb21pc2UgPSBmaWVsZC52YWxpZGF0ZVJ1bGVzKF9vYmplY3RTcHJlYWQoe1xuICAgICAgICAgIHZhbGlkYXRlTWVzc2FnZXM6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZGVmYXVsdFZhbGlkYXRlTWVzc2FnZXMpLCBfdGhpcy52YWxpZGF0ZU1lc3NhZ2VzKVxuICAgICAgICB9LCBvcHRpb25zKSk7IC8vIFdyYXAgcHJvbWlzZSB3aXRoIGZpZWxkXG5cbiAgICAgICAgcHJvbWlzZUxpc3QucHVzaChwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiBmaWVsZE5hbWVQYXRoLFxuICAgICAgICAgICAgZXJyb3JzOiBbXVxuICAgICAgICAgIH07XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcnMpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3Qoe1xuICAgICAgICAgICAgbmFtZTogZmllbGROYW1lUGF0aCxcbiAgICAgICAgICAgIGVycm9yczogZXJyb3JzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciBzdW1tYXJ5UHJvbWlzZSA9IGFsbFByb21pc2VGaW5pc2gocHJvbWlzZUxpc3QpO1xuICAgIF90aGlzLmxhc3RWYWxpZGF0ZVByb21pc2UgPSBzdW1tYXJ5UHJvbWlzZTsgLy8gTm90aWZ5IGZpZWxkcyB3aXRoIHJ1bGUgdGhhdCB2YWxpZGF0ZSBoYXMgZmluaXNoZWQgYW5kIG5lZWQgdXBkYXRlXG5cbiAgICBzdW1tYXJ5UHJvbWlzZS5jYXRjaChmdW5jdGlvbiAocmVzdWx0cykge1xuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0cykge1xuICAgICAgdmFyIHJlc3VsdE5hbWVQYXRoTGlzdCA9IHJlc3VsdHMubWFwKGZ1bmN0aW9uIChfcmVmNSkge1xuICAgICAgICB2YXIgbmFtZSA9IF9yZWY1Lm5hbWU7XG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLm5vdGlmeU9ic2VydmVycyhfdGhpcy5zdG9yZSwgcmVzdWx0TmFtZVBhdGhMaXN0LCB7XG4gICAgICAgIHR5cGU6ICd2YWxpZGF0ZUZpbmlzaCdcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy50cmlnZ2VyT25GaWVsZHNDaGFuZ2UocmVzdWx0TmFtZVBhdGhMaXN0LCByZXN1bHRzKTtcbiAgICB9KTtcbiAgICB2YXIgcmV0dXJuUHJvbWlzZSA9IHN1bW1hcnlQcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLmxhc3RWYWxpZGF0ZVByb21pc2UgPT09IHN1bW1hcnlQcm9taXNlKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoX3RoaXMuZ2V0RmllbGRzVmFsdWUobmFtZVBhdGhMaXN0KSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChbXSk7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgICAgIHZhciBlcnJvckxpc3QgPSByZXN1bHRzLmZpbHRlcihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgIHJldHVybiByZXN1bHQgJiYgcmVzdWx0LmVycm9ycy5sZW5ndGg7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh7XG4gICAgICAgIHZhbHVlczogX3RoaXMuZ2V0RmllbGRzVmFsdWUobmFtZVBhdGhMaXN0KSxcbiAgICAgICAgZXJyb3JGaWVsZHM6IGVycm9yTGlzdCxcbiAgICAgICAgb3V0T2ZEYXRlOiBfdGhpcy5sYXN0VmFsaWRhdGVQcm9taXNlICE9PSBzdW1tYXJ5UHJvbWlzZVxuICAgICAgfSk7XG4gICAgfSk7IC8vIERvIG5vdCB0aHJvdyBpbiBjb25zb2xlXG5cbiAgICByZXR1cm5Qcm9taXNlLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gZTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0dXJuUHJvbWlzZTtcbiAgfTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PSBTdWJtaXQgPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cbiAgdGhpcy5zdWJtaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgX3RoaXMud2FybmluZ1VuaG9va2VkKCk7XG5cbiAgICBfdGhpcy52YWxpZGF0ZUZpZWxkcygpLnRoZW4oZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgdmFyIG9uRmluaXNoID0gX3RoaXMuY2FsbGJhY2tzLm9uRmluaXNoO1xuXG4gICAgICBpZiAob25GaW5pc2gpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBvbkZpbmlzaCh2YWx1ZXMpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAvLyBTaG91bGQgcHJpbnQgZXJyb3IgaWYgdXNlciBgb25GaW5pc2hgIGNhbGxiYWNrIGZhaWxlZFxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgb25GaW5pc2hGYWlsZWQgPSBfdGhpcy5jYWxsYmFja3Mub25GaW5pc2hGYWlsZWQ7XG5cbiAgICAgIGlmIChvbkZpbmlzaEZhaWxlZCkge1xuICAgICAgICBvbkZpbmlzaEZhaWxlZChlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLmZvcmNlUm9vdFVwZGF0ZSA9IGZvcmNlUm9vdFVwZGF0ZTtcbn07XG5cbmZ1bmN0aW9uIHVzZUZvcm0oZm9ybSkge1xuICB2YXIgZm9ybVJlZiA9IFJlYWN0LnVzZVJlZigpO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZSh7fSksXG4gICAgICBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAyKSxcbiAgICAgIGZvcmNlVXBkYXRlID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcblxuICBpZiAoIWZvcm1SZWYuY3VycmVudCkge1xuICAgIGlmIChmb3JtKSB7XG4gICAgICBmb3JtUmVmLmN1cnJlbnQgPSBmb3JtO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDcmVhdGUgYSBuZXcgRm9ybVN0b3JlIGlmIG5vdCBwcm92aWRlZFxuICAgICAgdmFyIGZvcmNlUmVSZW5kZXIgPSBmdW5jdGlvbiBmb3JjZVJlUmVuZGVyKCkge1xuICAgICAgICBmb3JjZVVwZGF0ZSh7fSk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgZm9ybVN0b3JlID0gbmV3IEZvcm1TdG9yZShmb3JjZVJlUmVuZGVyKTtcbiAgICAgIGZvcm1SZWYuY3VycmVudCA9IGZvcm1TdG9yZS5nZXRGb3JtKCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFtmb3JtUmVmLmN1cnJlbnRdO1xufVxuXG5leHBvcnQgZGVmYXVsdCB1c2VGb3JtOyIsImV4cG9ydCBmdW5jdGlvbiBhbGxQcm9taXNlRmluaXNoKHByb21pc2VMaXN0KSB7XG4gIHZhciBoYXNFcnJvciA9IGZhbHNlO1xuICB2YXIgY291bnQgPSBwcm9taXNlTGlzdC5sZW5ndGg7XG4gIHZhciByZXN1bHRzID0gW107XG5cbiAgaWYgKCFwcm9taXNlTGlzdC5sZW5ndGgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtdKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgcHJvbWlzZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAocHJvbWlzZSwgaW5kZXgpIHtcbiAgICAgIHByb21pc2UuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICBjb3VudCAtPSAxO1xuICAgICAgICByZXN1bHRzW2luZGV4XSA9IHJlc3VsdDtcblxuICAgICAgICBpZiAoY291bnQgPiAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc0Vycm9yKSB7XG4gICAgICAgICAgcmVqZWN0KHJlc3VsdHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzb2x2ZShyZXN1bHRzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0iLCJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbnZhciBGb3JtQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgdHJpZ2dlckZvcm1DaGFuZ2U6IGZ1bmN0aW9uIHRyaWdnZXJGb3JtQ2hhbmdlKCkge30sXG4gIHRyaWdnZXJGb3JtRmluaXNoOiBmdW5jdGlvbiB0cmlnZ2VyRm9ybUZpbmlzaCgpIHt9LFxuICByZWdpc3RlckZvcm06IGZ1bmN0aW9uIHJlZ2lzdGVyRm9ybSgpIHt9LFxuICB1bnJlZ2lzdGVyRm9ybTogZnVuY3Rpb24gdW5yZWdpc3RlckZvcm0oKSB7fVxufSk7XG5cbnZhciBGb3JtUHJvdmlkZXIgPSBmdW5jdGlvbiBGb3JtUHJvdmlkZXIoX3JlZikge1xuICB2YXIgdmFsaWRhdGVNZXNzYWdlcyA9IF9yZWYudmFsaWRhdGVNZXNzYWdlcyxcbiAgICAgIG9uRm9ybUNoYW5nZSA9IF9yZWYub25Gb3JtQ2hhbmdlLFxuICAgICAgb25Gb3JtRmluaXNoID0gX3JlZi5vbkZvcm1GaW5pc2gsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gIHZhciBmb3JtQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRm9ybUNvbnRleHQpO1xuICB2YXIgZm9ybXNSZWYgPSBSZWFjdC51c2VSZWYoe30pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBmb3JtQ29udGV4dCksIHt9LCB7XG4gICAgICB2YWxpZGF0ZU1lc3NhZ2VzOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGZvcm1Db250ZXh0LnZhbGlkYXRlTWVzc2FnZXMpLCB2YWxpZGF0ZU1lc3NhZ2VzKSxcbiAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgLy8gPSAgICAgICAgICAgICAgICAgIEdsb2JhbCBGb3JtIENvbnRyb2wgICAgICAgICAgICAgICAgICA9XG4gICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgIHRyaWdnZXJGb3JtQ2hhbmdlOiBmdW5jdGlvbiB0cmlnZ2VyRm9ybUNoYW5nZShuYW1lLCBjaGFuZ2VkRmllbGRzKSB7XG4gICAgICAgIGlmIChvbkZvcm1DaGFuZ2UpIHtcbiAgICAgICAgICBvbkZvcm1DaGFuZ2UobmFtZSwge1xuICAgICAgICAgICAgY2hhbmdlZEZpZWxkczogY2hhbmdlZEZpZWxkcyxcbiAgICAgICAgICAgIGZvcm1zOiBmb3Jtc1JlZi5jdXJyZW50XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtQ29udGV4dC50cmlnZ2VyRm9ybUNoYW5nZShuYW1lLCBjaGFuZ2VkRmllbGRzKTtcbiAgICAgIH0sXG4gICAgICB0cmlnZ2VyRm9ybUZpbmlzaDogZnVuY3Rpb24gdHJpZ2dlckZvcm1GaW5pc2gobmFtZSwgdmFsdWVzKSB7XG4gICAgICAgIGlmIChvbkZvcm1GaW5pc2gpIHtcbiAgICAgICAgICBvbkZvcm1GaW5pc2gobmFtZSwge1xuICAgICAgICAgICAgdmFsdWVzOiB2YWx1ZXMsXG4gICAgICAgICAgICBmb3JtczogZm9ybXNSZWYuY3VycmVudFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybUNvbnRleHQudHJpZ2dlckZvcm1GaW5pc2gobmFtZSwgdmFsdWVzKTtcbiAgICAgIH0sXG4gICAgICByZWdpc3RlckZvcm06IGZ1bmN0aW9uIHJlZ2lzdGVyRm9ybShuYW1lLCBmb3JtKSB7XG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgZm9ybXNSZWYuY3VycmVudCA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZm9ybXNSZWYuY3VycmVudCksIHt9LCBfZGVmaW5lUHJvcGVydHkoe30sIG5hbWUsIGZvcm0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1Db250ZXh0LnJlZ2lzdGVyRm9ybShuYW1lLCBmb3JtKTtcbiAgICAgIH0sXG4gICAgICB1bnJlZ2lzdGVyRm9ybTogZnVuY3Rpb24gdW5yZWdpc3RlckZvcm0obmFtZSkge1xuICAgICAgICB2YXIgbmV3Rm9ybXMgPSBfb2JqZWN0U3ByZWFkKHt9LCBmb3Jtc1JlZi5jdXJyZW50KTtcblxuICAgICAgICBkZWxldGUgbmV3Rm9ybXNbbmFtZV07XG4gICAgICAgIGZvcm1zUmVmLmN1cnJlbnQgPSBuZXdGb3JtcztcbiAgICAgICAgZm9ybUNvbnRleHQudW5yZWdpc3RlckZvcm0obmFtZSk7XG4gICAgICB9XG4gICAgfSlcbiAgfSwgY2hpbGRyZW4pO1xufTtcblxuZXhwb3J0IHsgRm9ybVByb3ZpZGVyIH07XG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udGV4dDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlRm9ybSBmcm9tICcuL3VzZUZvcm0nO1xuaW1wb3J0IEZpZWxkQ29udGV4dCwgeyBIT09LX01BUksgfSBmcm9tICcuL0ZpZWxkQ29udGV4dCc7XG5pbXBvcnQgRm9ybUNvbnRleHQgZnJvbSAnLi9Gb3JtQ29udGV4dCc7XG5pbXBvcnQgeyBpc1NpbWlsYXIgfSBmcm9tICcuL3V0aWxzL3ZhbHVlVXRpbCc7XG5cbnZhciBGb3JtID0gZnVuY3Rpb24gRm9ybShfcmVmLCByZWYpIHtcbiAgdmFyIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICBpbml0aWFsVmFsdWVzID0gX3JlZi5pbml0aWFsVmFsdWVzLFxuICAgICAgZmllbGRzID0gX3JlZi5maWVsZHMsXG4gICAgICBmb3JtID0gX3JlZi5mb3JtLFxuICAgICAgcHJlc2VydmUgPSBfcmVmLnByZXNlcnZlLFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgX3JlZiRjb21wb25lbnQgPSBfcmVmLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9yZWYkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZm9ybScgOiBfcmVmJGNvbXBvbmVudCxcbiAgICAgIHZhbGlkYXRlTWVzc2FnZXMgPSBfcmVmLnZhbGlkYXRlTWVzc2FnZXMsXG4gICAgICBfcmVmJHZhbGlkYXRlVHJpZ2dlciA9IF9yZWYudmFsaWRhdGVUcmlnZ2VyLFxuICAgICAgdmFsaWRhdGVUcmlnZ2VyID0gX3JlZiR2YWxpZGF0ZVRyaWdnZXIgPT09IHZvaWQgMCA/ICdvbkNoYW5nZScgOiBfcmVmJHZhbGlkYXRlVHJpZ2dlcixcbiAgICAgIG9uVmFsdWVzQ2hhbmdlID0gX3JlZi5vblZhbHVlc0NoYW5nZSxcbiAgICAgIF9vbkZpZWxkc0NoYW5nZSA9IF9yZWYub25GaWVsZHNDaGFuZ2UsXG4gICAgICBfb25GaW5pc2ggPSBfcmVmLm9uRmluaXNoLFxuICAgICAgb25GaW5pc2hGYWlsZWQgPSBfcmVmLm9uRmluaXNoRmFpbGVkLFxuICAgICAgcmVzdFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcIm5hbWVcIiwgXCJpbml0aWFsVmFsdWVzXCIsIFwiZmllbGRzXCIsIFwiZm9ybVwiLCBcInByZXNlcnZlXCIsIFwiY2hpbGRyZW5cIiwgXCJjb21wb25lbnRcIiwgXCJ2YWxpZGF0ZU1lc3NhZ2VzXCIsIFwidmFsaWRhdGVUcmlnZ2VyXCIsIFwib25WYWx1ZXNDaGFuZ2VcIiwgXCJvbkZpZWxkc0NoYW5nZVwiLCBcIm9uRmluaXNoXCIsIFwib25GaW5pc2hGYWlsZWRcIl0pO1xuXG4gIHZhciBmb3JtQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRm9ybUNvbnRleHQpOyAvLyBXZSBjdXN0b21pemUgaGFuZGxlIGV2ZW50IHNpbmNlIENvbnRleHQgd2lsbCBtYWtlcyBhbGwgdGhlIGNvbnN1bWVyIHJlLXJlbmRlcjpcbiAgLy8gaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2NvbnRleHQuaHRtbCNjb250ZXh0cHJvdmlkZXJcblxuICB2YXIgX3VzZUZvcm0gPSB1c2VGb3JtKGZvcm0pLFxuICAgICAgX3VzZUZvcm0yID0gX3NsaWNlZFRvQXJyYXkoX3VzZUZvcm0sIDEpLFxuICAgICAgZm9ybUluc3RhbmNlID0gX3VzZUZvcm0yWzBdO1xuXG4gIHZhciBfZm9ybUluc3RhbmNlJGdldEludGUgPSBmb3JtSW5zdGFuY2UuZ2V0SW50ZXJuYWxIb29rcyhIT09LX01BUkspLFxuICAgICAgdXNlU3Vic2NyaWJlID0gX2Zvcm1JbnN0YW5jZSRnZXRJbnRlLnVzZVN1YnNjcmliZSxcbiAgICAgIHNldEluaXRpYWxWYWx1ZXMgPSBfZm9ybUluc3RhbmNlJGdldEludGUuc2V0SW5pdGlhbFZhbHVlcyxcbiAgICAgIHNldENhbGxiYWNrcyA9IF9mb3JtSW5zdGFuY2UkZ2V0SW50ZS5zZXRDYWxsYmFja3MsXG4gICAgICBzZXRWYWxpZGF0ZU1lc3NhZ2VzID0gX2Zvcm1JbnN0YW5jZSRnZXRJbnRlLnNldFZhbGlkYXRlTWVzc2FnZXMsXG4gICAgICBzZXRQcmVzZXJ2ZSA9IF9mb3JtSW5zdGFuY2UkZ2V0SW50ZS5zZXRQcmVzZXJ2ZTsgLy8gUGFzcyByZWYgd2l0aCBmb3JtIGluc3RhbmNlXG5cblxuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmb3JtSW5zdGFuY2U7XG4gIH0pOyAvLyBSZWdpc3RlciBmb3JtIGludG8gQ29udGV4dFxuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZm9ybUNvbnRleHQucmVnaXN0ZXJGb3JtKG5hbWUsIGZvcm1JbnN0YW5jZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvcm1Db250ZXh0LnVucmVnaXN0ZXJGb3JtKG5hbWUpO1xuICAgIH07XG4gIH0sIFtmb3JtQ29udGV4dCwgZm9ybUluc3RhbmNlLCBuYW1lXSk7IC8vIFBhc3MgcHJvcHMgdG8gc3RvcmVcblxuICBzZXRWYWxpZGF0ZU1lc3NhZ2VzKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZm9ybUNvbnRleHQudmFsaWRhdGVNZXNzYWdlcyksIHZhbGlkYXRlTWVzc2FnZXMpKTtcbiAgc2V0Q2FsbGJhY2tzKHtcbiAgICBvblZhbHVlc0NoYW5nZTogb25WYWx1ZXNDaGFuZ2UsXG4gICAgb25GaWVsZHNDaGFuZ2U6IGZ1bmN0aW9uIG9uRmllbGRzQ2hhbmdlKGNoYW5nZWRGaWVsZHMpIHtcbiAgICAgIGZvcm1Db250ZXh0LnRyaWdnZXJGb3JtQ2hhbmdlKG5hbWUsIGNoYW5nZWRGaWVsZHMpO1xuXG4gICAgICBpZiAoX29uRmllbGRzQ2hhbmdlKSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCByZXN0ID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICByZXN0W19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9vbkZpZWxkc0NoYW5nZS5hcHBseSh2b2lkIDAsIFtjaGFuZ2VkRmllbGRzXS5jb25jYXQocmVzdCkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgb25GaW5pc2g6IGZ1bmN0aW9uIG9uRmluaXNoKHZhbHVlcykge1xuICAgICAgZm9ybUNvbnRleHQudHJpZ2dlckZvcm1GaW5pc2gobmFtZSwgdmFsdWVzKTtcblxuICAgICAgaWYgKF9vbkZpbmlzaCkge1xuICAgICAgICBfb25GaW5pc2godmFsdWVzKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG9uRmluaXNoRmFpbGVkOiBvbkZpbmlzaEZhaWxlZFxuICB9KTtcbiAgc2V0UHJlc2VydmUocHJlc2VydmUpOyAvLyBTZXQgaW5pdGlhbCB2YWx1ZSwgaW5pdCBzdG9yZSB2YWx1ZSB3aGVuIGZpcnN0IG1vdW50XG5cbiAgdmFyIG1vdW50UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBzZXRJbml0aWFsVmFsdWVzKGluaXRpYWxWYWx1ZXMsICFtb3VudFJlZi5jdXJyZW50KTtcblxuICBpZiAoIW1vdW50UmVmLmN1cnJlbnQpIHtcbiAgICBtb3VudFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgfSAvLyBQcmVwYXJlIGNoaWxkcmVuIGJ5IGBjaGlsZHJlbmAgdHlwZVxuXG5cbiAgdmFyIGNoaWxkcmVuTm9kZSA9IGNoaWxkcmVuO1xuICB2YXIgY2hpbGRyZW5SZW5kZXJQcm9wcyA9IHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJztcblxuICBpZiAoY2hpbGRyZW5SZW5kZXJQcm9wcykge1xuICAgIHZhciB2YWx1ZXMgPSBmb3JtSW5zdGFuY2UuZ2V0RmllbGRzVmFsdWUodHJ1ZSk7XG4gICAgY2hpbGRyZW5Ob2RlID0gY2hpbGRyZW4odmFsdWVzLCBmb3JtSW5zdGFuY2UpO1xuICB9IC8vIE5vdCB1c2Ugc3Vic2NyaWJlIHdoZW4gdXNpbmcgcmVuZGVyIHByb3BzXG5cblxuICB1c2VTdWJzY3JpYmUoIWNoaWxkcmVuUmVuZGVyUHJvcHMpOyAvLyBMaXN0ZW4gaWYgZmllbGRzIHByb3ZpZGVkLiBXZSB1c2UgcmVmIHRvIHNhdmUgcHJldiBkYXRhIGhlcmUgdG8gYXZvaWQgYWRkaXRpb25hbCByZW5kZXJcblxuICB2YXIgcHJldkZpZWxkc1JlZiA9IFJlYWN0LnVzZVJlZigpO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghaXNTaW1pbGFyKHByZXZGaWVsZHNSZWYuY3VycmVudCB8fCBbXSwgZmllbGRzIHx8IFtdKSkge1xuICAgICAgZm9ybUluc3RhbmNlLnNldEZpZWxkcyhmaWVsZHMgfHwgW10pO1xuICAgIH1cblxuICAgIHByZXZGaWVsZHNSZWYuY3VycmVudCA9IGZpZWxkcztcbiAgfSwgW2ZpZWxkcywgZm9ybUluc3RhbmNlXSk7XG4gIHZhciBmb3JtQ29udGV4dFZhbHVlID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZm9ybUluc3RhbmNlKSwge30sIHtcbiAgICAgIHZhbGlkYXRlVHJpZ2dlcjogdmFsaWRhdGVUcmlnZ2VyXG4gICAgfSk7XG4gIH0sIFtmb3JtSW5zdGFuY2UsIHZhbGlkYXRlVHJpZ2dlcl0pO1xuICB2YXIgd3JhcHBlck5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGaWVsZENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogZm9ybUNvbnRleHRWYWx1ZVxuICB9LCBjaGlsZHJlbk5vZGUpO1xuXG4gIGlmIChDb21wb25lbnQgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIHdyYXBwZXJOb2RlO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHJlc3RQcm9wcywge1xuICAgIG9uU3VibWl0OiBmdW5jdGlvbiBvblN1Ym1pdChldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZm9ybUluc3RhbmNlLnN1Ym1pdCgpO1xuICAgIH1cbiAgfSksIHdyYXBwZXJOb2RlKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZvcm07IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEZpZWxkIGZyb20gJy4vRmllbGQnO1xuaW1wb3J0IExpc3QgZnJvbSAnLi9MaXN0JztcbmltcG9ydCB1c2VGb3JtIGZyb20gJy4vdXNlRm9ybSc7XG5pbXBvcnQgRmllbGRGb3JtIGZyb20gJy4vRm9ybSc7XG5pbXBvcnQgeyBGb3JtUHJvdmlkZXIgfSBmcm9tICcuL0Zvcm1Db250ZXh0JztcbnZhciBJbnRlcm5hbEZvcm0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihGaWVsZEZvcm0pO1xudmFyIFJlZkZvcm0gPSBJbnRlcm5hbEZvcm07XG5SZWZGb3JtLkZvcm1Qcm92aWRlciA9IEZvcm1Qcm92aWRlcjtcblJlZkZvcm0uRmllbGQgPSBGaWVsZDtcblJlZkZvcm0uTGlzdCA9IExpc3Q7XG5SZWZGb3JtLnVzZUZvcm0gPSB1c2VGb3JtO1xuZXhwb3J0IHsgRmllbGQsIExpc3QsIHVzZUZvcm0sIEZvcm1Qcm92aWRlciB9O1xuZXhwb3J0IGRlZmF1bHQgUmVmRm9ybTsiLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJyYy11dGlsL2VzL3dhcm5pbmdcIjtcbmltcG9ydCBGaWVsZENvbnRleHQgZnJvbSAnLi9GaWVsZENvbnRleHQnO1xuaW1wb3J0IEZpZWxkIGZyb20gJy4vRmllbGQnO1xuaW1wb3J0IHsgbW92ZSBhcyBfbW92ZSwgZ2V0TmFtZVBhdGggfSBmcm9tICcuL3V0aWxzL3ZhbHVlVXRpbCc7XG5cbnZhciBMaXN0ID0gZnVuY3Rpb24gTGlzdChfcmVmKSB7XG4gIHZhciBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgaW5pdGlhbFZhbHVlID0gX3JlZi5pbml0aWFsVmFsdWUsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBydWxlcyA9IF9yZWYucnVsZXMsXG4gICAgICB2YWxpZGF0ZVRyaWdnZXIgPSBfcmVmLnZhbGlkYXRlVHJpZ2dlcjtcbiAgdmFyIGNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KEZpZWxkQ29udGV4dCk7XG4gIHZhciBrZXlSZWYgPSBSZWFjdC51c2VSZWYoe1xuICAgIGtleXM6IFtdLFxuICAgIGlkOiAwXG4gIH0pO1xuICB2YXIga2V5TWFuYWdlciA9IGtleVJlZi5jdXJyZW50OyAvLyBVc2VyIHNob3VsZCBub3QgcGFzcyBgY2hpbGRyZW5gIGFzIG90aGVyIHR5cGUuXG5cbiAgaWYgKHR5cGVvZiBjaGlsZHJlbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHdhcm5pbmcoZmFsc2UsICdGb3JtLkxpc3Qgb25seSBhY2NlcHRzIGZ1bmN0aW9uIGFzIGNoaWxkcmVuLicpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHBhcmVudFByZWZpeE5hbWUgPSBnZXROYW1lUGF0aChjb250ZXh0LnByZWZpeE5hbWUpIHx8IFtdO1xuICB2YXIgcHJlZml4TmFtZSA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkocGFyZW50UHJlZml4TmFtZSksIF90b0NvbnN1bWFibGVBcnJheShnZXROYW1lUGF0aChuYW1lKSkpO1xuXG4gIHZhciBzaG91bGRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRVcGRhdGUocHJldlZhbHVlLCBuZXh0VmFsdWUsIF9yZWYyKSB7XG4gICAgdmFyIHNvdXJjZSA9IF9yZWYyLnNvdXJjZTtcblxuICAgIGlmIChzb3VyY2UgPT09ICdpbnRlcm5hbCcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJldlZhbHVlICE9PSBuZXh0VmFsdWU7XG4gIH07XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZpZWxkQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGNvbnRleHQpLCB7fSwge1xuICAgICAgcHJlZml4TmFtZTogcHJlZml4TmFtZVxuICAgIH0pXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZpZWxkLCB7XG4gICAgbmFtZTogW10sXG4gICAgc2hvdWxkVXBkYXRlOiBzaG91bGRVcGRhdGUsXG4gICAgcnVsZXM6IHJ1bGVzLFxuICAgIHZhbGlkYXRlVHJpZ2dlcjogdmFsaWRhdGVUcmlnZ2VyLFxuICAgIGluaXRpYWxWYWx1ZTogaW5pdGlhbFZhbHVlLFxuICAgIGlzTGlzdDogdHJ1ZVxuICB9LCBmdW5jdGlvbiAoX3JlZjMsIG1ldGEpIHtcbiAgICB2YXIgX3JlZjMkdmFsdWUgPSBfcmVmMy52YWx1ZSxcbiAgICAgICAgdmFsdWUgPSBfcmVmMyR2YWx1ZSA9PT0gdm9pZCAwID8gW10gOiBfcmVmMyR2YWx1ZSxcbiAgICAgICAgb25DaGFuZ2UgPSBfcmVmMy5vbkNoYW5nZTtcbiAgICB2YXIgZ2V0RmllbGRWYWx1ZSA9IGNvbnRleHQuZ2V0RmllbGRWYWx1ZTtcblxuICAgIHZhciBnZXROZXdWYWx1ZSA9IGZ1bmN0aW9uIGdldE5ld1ZhbHVlKCkge1xuICAgICAgdmFyIHZhbHVlcyA9IGdldEZpZWxkVmFsdWUocHJlZml4TmFtZSB8fCBbXSk7XG4gICAgICByZXR1cm4gdmFsdWVzIHx8IFtdO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWx3YXlzIGdldCBsYXRlc3QgdmFsdWUgaW4gY2FzZSB1c2VyIHVwZGF0ZSBmaWVsZHMgYnkgYGZvcm1gIGFwaS5cbiAgICAgKi9cblxuXG4gICAgdmFyIG9wZXJhdGlvbnMgPSB7XG4gICAgICBhZGQ6IGZ1bmN0aW9uIGFkZChkZWZhdWx0VmFsdWUsIGluZGV4KSB7XG4gICAgICAgIC8vIE1hcHBpbmcga2V5c1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBnZXROZXdWYWx1ZSgpO1xuXG4gICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDw9IG5ld1ZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgIGtleU1hbmFnZXIua2V5cyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoa2V5TWFuYWdlci5rZXlzLnNsaWNlKDAsIGluZGV4KSksIFtrZXlNYW5hZ2VyLmlkXSwgX3RvQ29uc3VtYWJsZUFycmF5KGtleU1hbmFnZXIua2V5cy5zbGljZShpbmRleCkpKTtcbiAgICAgICAgICBvbkNoYW5nZShbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KG5ld1ZhbHVlLnNsaWNlKDAsIGluZGV4KSksIFtkZWZhdWx0VmFsdWVdLCBfdG9Db25zdW1hYmxlQXJyYXkobmV3VmFsdWUuc2xpY2UoaW5kZXgpKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIChpbmRleCA8IDAgfHwgaW5kZXggPiBuZXdWYWx1ZS5sZW5ndGgpKSB7XG4gICAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAnVGhlIHNlY29uZCBwYXJhbWV0ZXIgb2YgdGhlIGFkZCBmdW5jdGlvbiBzaG91bGQgYmUgYSB2YWxpZCBwb3NpdGl2ZSBudW1iZXIuJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAga2V5TWFuYWdlci5rZXlzID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShrZXlNYW5hZ2VyLmtleXMpLCBba2V5TWFuYWdlci5pZF0pO1xuICAgICAgICAgIG9uQ2hhbmdlKFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkobmV3VmFsdWUpLCBbZGVmYXVsdFZhbHVlXSkpO1xuICAgICAgICB9XG5cbiAgICAgICAga2V5TWFuYWdlci5pZCArPSAxO1xuICAgICAgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKGluZGV4KSB7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IGdldE5ld1ZhbHVlKCk7XG4gICAgICAgIHZhciBpbmRleFNldCA9IG5ldyBTZXQoQXJyYXkuaXNBcnJheShpbmRleCkgPyBpbmRleCA6IFtpbmRleF0pO1xuXG4gICAgICAgIGlmIChpbmRleFNldC5zaXplIDw9IDApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBrZXlNYW5hZ2VyLmtleXMgPSBrZXlNYW5hZ2VyLmtleXMuZmlsdGVyKGZ1bmN0aW9uIChfLCBrZXlzSW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gIWluZGV4U2V0LmhhcyhrZXlzSW5kZXgpO1xuICAgICAgICB9KTsgLy8gVHJpZ2dlciBzdG9yZSBjaGFuZ2VcblxuICAgICAgICBvbkNoYW5nZShuZXdWYWx1ZS5maWx0ZXIoZnVuY3Rpb24gKF8sIHZhbHVlSW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gIWluZGV4U2V0Lmhhcyh2YWx1ZUluZGV4KTtcbiAgICAgICAgfSkpO1xuICAgICAgfSxcbiAgICAgIG1vdmU6IGZ1bmN0aW9uIG1vdmUoZnJvbSwgdG8pIHtcbiAgICAgICAgaWYgKGZyb20gPT09IHRvKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gZ2V0TmV3VmFsdWUoKTsgLy8gRG8gbm90IGhhbmRsZSBvdXQgb2YgcmFuZ2VcblxuICAgICAgICBpZiAoZnJvbSA8IDAgfHwgZnJvbSA+PSBuZXdWYWx1ZS5sZW5ndGggfHwgdG8gPCAwIHx8IHRvID49IG5ld1ZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGtleU1hbmFnZXIua2V5cyA9IF9tb3ZlKGtleU1hbmFnZXIua2V5cywgZnJvbSwgdG8pOyAvLyBUcmlnZ2VyIHN0b3JlIGNoYW5nZVxuXG4gICAgICAgIG9uQ2hhbmdlKF9tb3ZlKG5ld1ZhbHVlLCBmcm9tLCB0bykpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIGxpc3RWYWx1ZSA9IHZhbHVlIHx8IFtdO1xuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGxpc3RWYWx1ZSkpIHtcbiAgICAgIGxpc3RWYWx1ZSA9IFtdO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuaW5nKGZhbHNlLCBcIkN1cnJlbnQgdmFsdWUgb2YgJ1wiLmNvbmNhdChwcmVmaXhOYW1lLmpvaW4oJyA+ICcpLCBcIicgaXMgbm90IGFuIGFycmF5IHR5cGUuXCIpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGRyZW4obGlzdFZhbHVlLm1hcChmdW5jdGlvbiAoX18sIGluZGV4KSB7XG4gICAgICB2YXIga2V5ID0ga2V5TWFuYWdlci5rZXlzW2luZGV4XTtcblxuICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGtleU1hbmFnZXIua2V5c1tpbmRleF0gPSBrZXlNYW5hZ2VyLmlkO1xuICAgICAgICBrZXkgPSBrZXlNYW5hZ2VyLmtleXNbaW5kZXhdO1xuICAgICAgICBrZXlNYW5hZ2VyLmlkICs9IDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IGluZGV4LFxuICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgaXNMaXN0RmllbGQ6IHRydWVcbiAgICAgIH07XG4gICAgfSksIG9wZXJhdGlvbnMsIG1ldGEpO1xuICB9KSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMaXN0OyIsInZhciBsb2NhbGUgPSB7XG4gIGxvY2FsZTogJ2VuX1VTJyxcbiAgdG9kYXk6ICdUb2RheScsXG4gIG5vdzogJ05vdycsXG4gIGJhY2tUb1RvZGF5OiAnQmFjayB0byB0b2RheScsXG4gIG9rOiAnT2snLFxuICBjbGVhcjogJ0NsZWFyJyxcbiAgbW9udGg6ICdNb250aCcsXG4gIHllYXI6ICdZZWFyJyxcbiAgdGltZVNlbGVjdDogJ3NlbGVjdCB0aW1lJyxcbiAgZGF0ZVNlbGVjdDogJ3NlbGVjdCBkYXRlJyxcbiAgd2Vla1NlbGVjdDogJ0Nob29zZSBhIHdlZWsnLFxuICBtb250aFNlbGVjdDogJ0Nob29zZSBhIG1vbnRoJyxcbiAgeWVhclNlbGVjdDogJ0Nob29zZSBhIHllYXInLFxuICBkZWNhZGVTZWxlY3Q6ICdDaG9vc2UgYSBkZWNhZGUnLFxuICB5ZWFyRm9ybWF0OiAnWVlZWScsXG4gIGRhdGVGb3JtYXQ6ICdNL0QvWVlZWScsXG4gIGRheUZvcm1hdDogJ0QnLFxuICBkYXRlVGltZUZvcm1hdDogJ00vRC9ZWVlZIEhIOm1tOnNzJyxcbiAgbW9udGhCZWZvcmVZZWFyOiB0cnVlLFxuICBwcmV2aW91c01vbnRoOiAnUHJldmlvdXMgbW9udGggKFBhZ2VVcCknLFxuICBuZXh0TW9udGg6ICdOZXh0IG1vbnRoIChQYWdlRG93biknLFxuICBwcmV2aW91c1llYXI6ICdMYXN0IHllYXIgKENvbnRyb2wgKyBsZWZ0KScsXG4gIG5leHRZZWFyOiAnTmV4dCB5ZWFyIChDb250cm9sICsgcmlnaHQpJyxcbiAgcHJldmlvdXNEZWNhZGU6ICdMYXN0IGRlY2FkZScsXG4gIG5leHREZWNhZGU6ICdOZXh0IGRlY2FkZScsXG4gIHByZXZpb3VzQ2VudHVyeTogJ0xhc3QgY2VudHVyeScsXG4gIG5leHRDZW50dXJ5OiAnTmV4dCBjZW50dXJ5J1xufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJ2YXIgbG9jYWxlID0ge1xuICBwbGFjZWhvbGRlcjogJ1NlbGVjdCB0aW1lJyxcbiAgcmFuZ2VQbGFjZWhvbGRlcjogWydTdGFydCB0aW1lJywgJ0VuZCB0aW1lJ11cbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgQ2FsZW5kYXJMb2NhbGUgZnJvbSBcInJjLXBpY2tlci9lcy9sb2NhbGUvZW5fVVNcIjtcbmltcG9ydCBUaW1lUGlja2VyTG9jYWxlIGZyb20gJy4uLy4uL3RpbWUtcGlja2VyL2xvY2FsZS9lbl9VUyc7IC8vIE1lcmdlIGludG8gYSBsb2NhbGUgb2JqZWN0XG5cbnZhciBsb2NhbGUgPSB7XG4gIGxhbmc6IF9leHRlbmRzKHtcbiAgICBwbGFjZWhvbGRlcjogJ1NlbGVjdCBkYXRlJyxcbiAgICB5ZWFyUGxhY2Vob2xkZXI6ICdTZWxlY3QgeWVhcicsXG4gICAgcXVhcnRlclBsYWNlaG9sZGVyOiAnU2VsZWN0IHF1YXJ0ZXInLFxuICAgIG1vbnRoUGxhY2Vob2xkZXI6ICdTZWxlY3QgbW9udGgnLFxuICAgIHdlZWtQbGFjZWhvbGRlcjogJ1NlbGVjdCB3ZWVrJyxcbiAgICByYW5nZVBsYWNlaG9sZGVyOiBbJ1N0YXJ0IGRhdGUnLCAnRW5kIGRhdGUnXSxcbiAgICByYW5nZVllYXJQbGFjZWhvbGRlcjogWydTdGFydCB5ZWFyJywgJ0VuZCB5ZWFyJ10sXG4gICAgcmFuZ2VNb250aFBsYWNlaG9sZGVyOiBbJ1N0YXJ0IG1vbnRoJywgJ0VuZCBtb250aCddLFxuICAgIHJhbmdlV2Vla1BsYWNlaG9sZGVyOiBbJ1N0YXJ0IHdlZWsnLCAnRW5kIHdlZWsnXVxuICB9LCBDYWxlbmRhckxvY2FsZSksXG4gIHRpbWVQaWNrZXJMb2NhbGU6IF9leHRlbmRzKHt9LCBUaW1lUGlja2VyTG9jYWxlKVxufTsgLy8gQWxsIHNldHRpbmdzIGF0OlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9ibG9iL21hc3Rlci9jb21wb25lbnRzL2RhdGUtcGlja2VyL2xvY2FsZS9leGFtcGxlLmpzb25cblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXRlbXBsYXRlLWN1cmx5LWluLXN0cmluZyAqL1xuaW1wb3J0IFBhZ2luYXRpb24gZnJvbSBcInJjLXBhZ2luYXRpb24vZXMvbG9jYWxlL2VuX1VTXCI7XG5pbXBvcnQgRGF0ZVBpY2tlciBmcm9tICcuLi9kYXRlLXBpY2tlci9sb2NhbGUvZW5fVVMnO1xuaW1wb3J0IFRpbWVQaWNrZXIgZnJvbSAnLi4vdGltZS1waWNrZXIvbG9jYWxlL2VuX1VTJztcbmltcG9ydCBDYWxlbmRhciBmcm9tICcuLi9jYWxlbmRhci9sb2NhbGUvZW5fVVMnO1xudmFyIHR5cGVUZW1wbGF0ZSA9ICcke2xhYmVsfSBpcyBub3QgYSB2YWxpZCAke3R5cGV9JztcbnZhciBsb2NhbGVWYWx1ZXMgPSB7XG4gIGxvY2FsZTogJ2VuJyxcbiAgUGFnaW5hdGlvbjogUGFnaW5hdGlvbixcbiAgRGF0ZVBpY2tlcjogRGF0ZVBpY2tlcixcbiAgVGltZVBpY2tlcjogVGltZVBpY2tlcixcbiAgQ2FsZW5kYXI6IENhbGVuZGFyLFxuICBnbG9iYWw6IHtcbiAgICBwbGFjZWhvbGRlcjogJ1BsZWFzZSBzZWxlY3QnXG4gIH0sXG4gIFRhYmxlOiB7XG4gICAgZmlsdGVyVGl0bGU6ICdGaWx0ZXIgbWVudScsXG4gICAgZmlsdGVyQ29uZmlybTogJ09LJyxcbiAgICBmaWx0ZXJSZXNldDogJ1Jlc2V0JyxcbiAgICBmaWx0ZXJFbXB0eVRleHQ6ICdObyBmaWx0ZXJzJyxcbiAgICBlbXB0eVRleHQ6ICdObyBkYXRhJyxcbiAgICBzZWxlY3RBbGw6ICdTZWxlY3QgY3VycmVudCBwYWdlJyxcbiAgICBzZWxlY3RJbnZlcnQ6ICdJbnZlcnQgY3VycmVudCBwYWdlJyxcbiAgICBzZWxlY3ROb25lOiAnQ2xlYXIgYWxsIGRhdGEnLFxuICAgIHNlbGVjdGlvbkFsbDogJ1NlbGVjdCBhbGwgZGF0YScsXG4gICAgc29ydFRpdGxlOiAnU29ydCcsXG4gICAgZXhwYW5kOiAnRXhwYW5kIHJvdycsXG4gICAgY29sbGFwc2U6ICdDb2xsYXBzZSByb3cnLFxuICAgIHRyaWdnZXJEZXNjOiAnQ2xpY2sgdG8gc29ydCBkZXNjZW5kaW5nJyxcbiAgICB0cmlnZ2VyQXNjOiAnQ2xpY2sgdG8gc29ydCBhc2NlbmRpbmcnLFxuICAgIGNhbmNlbFNvcnQ6ICdDbGljayB0byBjYW5jZWwgc29ydGluZydcbiAgfSxcbiAgTW9kYWw6IHtcbiAgICBva1RleHQ6ICdPSycsXG4gICAgY2FuY2VsVGV4dDogJ0NhbmNlbCcsXG4gICAganVzdE9rVGV4dDogJ09LJ1xuICB9LFxuICBQb3Bjb25maXJtOiB7XG4gICAgb2tUZXh0OiAnT0snLFxuICAgIGNhbmNlbFRleHQ6ICdDYW5jZWwnXG4gIH0sXG4gIFRyYW5zZmVyOiB7XG4gICAgdGl0bGVzOiBbJycsICcnXSxcbiAgICBzZWFyY2hQbGFjZWhvbGRlcjogJ1NlYXJjaCBoZXJlJyxcbiAgICBpdGVtVW5pdDogJ2l0ZW0nLFxuICAgIGl0ZW1zVW5pdDogJ2l0ZW1zJyxcbiAgICByZW1vdmU6ICdSZW1vdmUnLFxuICAgIHNlbGVjdEN1cnJlbnQ6ICdTZWxlY3QgY3VycmVudCBwYWdlJyxcbiAgICByZW1vdmVDdXJyZW50OiAnUmVtb3ZlIGN1cnJlbnQgcGFnZScsXG4gICAgc2VsZWN0QWxsOiAnU2VsZWN0IGFsbCBkYXRhJyxcbiAgICByZW1vdmVBbGw6ICdSZW1vdmUgYWxsIGRhdGEnLFxuICAgIHNlbGVjdEludmVydDogJ0ludmVydCBjdXJyZW50IHBhZ2UnXG4gIH0sXG4gIFVwbG9hZDoge1xuICAgIHVwbG9hZGluZzogJ1VwbG9hZGluZy4uLicsXG4gICAgcmVtb3ZlRmlsZTogJ1JlbW92ZSBmaWxlJyxcbiAgICB1cGxvYWRFcnJvcjogJ1VwbG9hZCBlcnJvcicsXG4gICAgcHJldmlld0ZpbGU6ICdQcmV2aWV3IGZpbGUnLFxuICAgIGRvd25sb2FkRmlsZTogJ0Rvd25sb2FkIGZpbGUnXG4gIH0sXG4gIEVtcHR5OiB7XG4gICAgZGVzY3JpcHRpb246ICdObyBEYXRhJ1xuICB9LFxuICBJY29uOiB7XG4gICAgaWNvbjogJ2ljb24nXG4gIH0sXG4gIFRleHQ6IHtcbiAgICBlZGl0OiAnRWRpdCcsXG4gICAgY29weTogJ0NvcHknLFxuICAgIGNvcGllZDogJ0NvcGllZCcsXG4gICAgZXhwYW5kOiAnRXhwYW5kJ1xuICB9LFxuICBQYWdlSGVhZGVyOiB7XG4gICAgYmFjazogJ0JhY2snXG4gIH0sXG4gIEZvcm06IHtcbiAgICBvcHRpb25hbDogJyhvcHRpb25hbCknLFxuICAgIGRlZmF1bHRWYWxpZGF0ZU1lc3NhZ2VzOiB7XG4gICAgICBcImRlZmF1bHRcIjogJ0ZpZWxkIHZhbGlkYXRpb24gZXJyb3IgZm9yICR7bGFiZWx9JyxcbiAgICAgIHJlcXVpcmVkOiAnUGxlYXNlIGVudGVyICR7bGFiZWx9JyxcbiAgICAgIFwiZW51bVwiOiAnJHtsYWJlbH0gbXVzdCBiZSBvbmUgb2YgWyR7ZW51bX1dJyxcbiAgICAgIHdoaXRlc3BhY2U6ICcke2xhYmVsfSBjYW5ub3QgYmUgYSBibGFuayBjaGFyYWN0ZXInLFxuICAgICAgZGF0ZToge1xuICAgICAgICBmb3JtYXQ6ICcke2xhYmVsfSBkYXRlIGZvcm1hdCBpcyBpbnZhbGlkJyxcbiAgICAgICAgcGFyc2U6ICcke2xhYmVsfSBjYW5ub3QgYmUgY29udmVydGVkIHRvIGEgZGF0ZScsXG4gICAgICAgIGludmFsaWQ6ICcke2xhYmVsfSBpcyBhbiBpbnZhbGlkIGRhdGUnXG4gICAgICB9LFxuICAgICAgdHlwZXM6IHtcbiAgICAgICAgc3RyaW5nOiB0eXBlVGVtcGxhdGUsXG4gICAgICAgIG1ldGhvZDogdHlwZVRlbXBsYXRlLFxuICAgICAgICBhcnJheTogdHlwZVRlbXBsYXRlLFxuICAgICAgICBvYmplY3Q6IHR5cGVUZW1wbGF0ZSxcbiAgICAgICAgbnVtYmVyOiB0eXBlVGVtcGxhdGUsXG4gICAgICAgIGRhdGU6IHR5cGVUZW1wbGF0ZSxcbiAgICAgICAgXCJib29sZWFuXCI6IHR5cGVUZW1wbGF0ZSxcbiAgICAgICAgaW50ZWdlcjogdHlwZVRlbXBsYXRlLFxuICAgICAgICBcImZsb2F0XCI6IHR5cGVUZW1wbGF0ZSxcbiAgICAgICAgcmVnZXhwOiB0eXBlVGVtcGxhdGUsXG4gICAgICAgIGVtYWlsOiB0eXBlVGVtcGxhdGUsXG4gICAgICAgIHVybDogdHlwZVRlbXBsYXRlLFxuICAgICAgICBoZXg6IHR5cGVUZW1wbGF0ZVxuICAgICAgfSxcbiAgICAgIHN0cmluZzoge1xuICAgICAgICBsZW46ICcke2xhYmVsfSBtdXN0IGJlICR7bGVufSBjaGFyYWN0ZXJzJyxcbiAgICAgICAgbWluOiAnJHtsYWJlbH0gbXVzdCBiZSBhdCBsZWFzdCAke21pbn0gY2hhcmFjdGVycycsXG4gICAgICAgIG1heDogJyR7bGFiZWx9IG11c3QgYmUgdXAgdG8gJHttYXh9IGNoYXJhY3RlcnMnLFxuICAgICAgICByYW5nZTogJyR7bGFiZWx9IG11c3QgYmUgYmV0d2VlbiAke21pbn0tJHttYXh9IGNoYXJhY3RlcnMnXG4gICAgICB9LFxuICAgICAgbnVtYmVyOiB7XG4gICAgICAgIGxlbjogJyR7bGFiZWx9IG11c3QgYmUgZXF1YWwgdG8gJHtsZW59JyxcbiAgICAgICAgbWluOiAnJHtsYWJlbH0gbXVzdCBiZSBtaW5pbXVtICR7bWlufScsXG4gICAgICAgIG1heDogJyR7bGFiZWx9IG11c3QgYmUgbWF4aW11bSAke21heH0nLFxuICAgICAgICByYW5nZTogJyR7bGFiZWx9IG11c3QgYmUgYmV0d2VlbiAke21pbn0tJHttYXh9J1xuICAgICAgfSxcbiAgICAgIGFycmF5OiB7XG4gICAgICAgIGxlbjogJ011c3QgYmUgJHtsZW59ICR7bGFiZWx9JyxcbiAgICAgICAgbWluOiAnQXQgbGVhc3QgJHttaW59ICR7bGFiZWx9JyxcbiAgICAgICAgbWF4OiAnQXQgbW9zdCAke21heH0gJHtsYWJlbH0nLFxuICAgICAgICByYW5nZTogJ1RoZSBhbW91bnQgb2YgJHtsYWJlbH0gbXVzdCBiZSBiZXR3ZWVuICR7bWlufS0ke21heH0nXG4gICAgICB9LFxuICAgICAgcGF0dGVybjoge1xuICAgICAgICBtaXNtYXRjaDogJyR7bGFiZWx9IGRvZXMgbm90IG1hdGNoIHRoZSBwYXR0ZXJuICR7cGF0dGVybn0nXG4gICAgICB9XG4gICAgfVxuICB9LFxuICBJbWFnZToge1xuICAgIHByZXZpZXc6ICdQcmV2aWV3J1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlVmFsdWVzOyIsImV4cG9ydCBkZWZhdWx0IHtcbiAgLy8gT3B0aW9ucy5qc3hcbiAgaXRlbXNfcGVyX3BhZ2U6ICcvIHBhZ2UnLFxuICBqdW1wX3RvOiAnR28gdG8nLFxuICBqdW1wX3RvX2NvbmZpcm06ICdjb25maXJtJyxcbiAgcGFnZTogJycsXG4gIC8vIFBhZ2luYXRpb24uanN4XG4gIHByZXZfcGFnZTogJ1ByZXZpb3VzIFBhZ2UnLFxuICBuZXh0X3BhZ2U6ICdOZXh0IFBhZ2UnLFxuICBwcmV2XzU6ICdQcmV2aW91cyA1IFBhZ2VzJyxcbiAgbmV4dF81OiAnTmV4dCA1IFBhZ2VzJyxcbiAgcHJldl8zOiAnUHJldmlvdXMgMyBQYWdlcycsXG4gIG5leHRfMzogJ05leHQgMyBQYWdlcydcbn07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tICcuLi9sb2NhbGUvZGVmYXVsdCc7XG5cbnZhciBydW50aW1lTG9jYWxlID0gX2V4dGVuZHMoe30sIGRlZmF1bHRMb2NhbGUuTW9kYWwpO1xuXG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlQ29uZmlybUxvY2FsZShuZXdMb2NhbGUpIHtcbiAgaWYgKG5ld0xvY2FsZSkge1xuICAgIHJ1bnRpbWVMb2NhbGUgPSBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgcnVudGltZUxvY2FsZSksIG5ld0xvY2FsZSk7XG4gIH0gZWxzZSB7XG4gICAgcnVudGltZUxvY2FsZSA9IF9leHRlbmRzKHt9LCBkZWZhdWx0TG9jYWxlLk1vZGFsKTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbmZpcm1Mb2NhbGUoKSB7XG4gIHJldHVybiBydW50aW1lTG9jYWxlO1xufSIsImltcG9ydCB7IGNyZWF0ZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG52YXIgTG9jYWxlQ29udGV4dCA9IC8qI19fUFVSRV9fKi9jcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7XG5leHBvcnQgZGVmYXVsdCBMb2NhbGVDb250ZXh0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c1wiO1xuaW1wb3J0IF9jcmVhdGVTdXBlciBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBkZXZXYXJuaW5nIGZyb20gJy4uL191dGlsL2Rldldhcm5pbmcnO1xuaW1wb3J0IHsgY2hhbmdlQ29uZmlybUxvY2FsZSB9IGZyb20gJy4uL21vZGFsL2xvY2FsZSc7XG5pbXBvcnQgTG9jYWxlQ29udGV4dCBmcm9tICcuL2NvbnRleHQnO1xuZXhwb3J0IHZhciBBTlRfTUFSSyA9ICdpbnRlcm5hbE1hcmsnO1xuXG52YXIgTG9jYWxlUHJvdmlkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKExvY2FsZVByb3ZpZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKExvY2FsZVByb3ZpZGVyKTtcblxuICBmdW5jdGlvbiBMb2NhbGVQcm92aWRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2NhbGVQcm92aWRlcik7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKTtcbiAgICBjaGFuZ2VDb25maXJtTG9jYWxlKHByb3BzLmxvY2FsZSAmJiBwcm9wcy5sb2NhbGUuTW9kYWwpO1xuICAgIGRldldhcm5pbmcocHJvcHMuX0FOVF9NQVJLX18gPT09IEFOVF9NQVJLLCAnTG9jYWxlUHJvdmlkZXInLCAnYExvY2FsZVByb3ZpZGVyYCBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGBsb2NhbGVgIHdpdGggYENvbmZpZ1Byb3ZpZGVyYCBpbnN0ZWFkOiBodHRwOi8vdS5hbnQuZGVzaWduL2xvY2FsZScpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhMb2NhbGVQcm92aWRlciwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIHZhciBsb2NhbGUgPSB0aGlzLnByb3BzLmxvY2FsZTtcblxuICAgICAgaWYgKHByZXZQcm9wcy5sb2NhbGUgIT09IGxvY2FsZSkge1xuICAgICAgICBjaGFuZ2VDb25maXJtTG9jYWxlKGxvY2FsZSAmJiBsb2NhbGUuTW9kYWwpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGNoYW5nZUNvbmZpcm1Mb2NhbGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgbG9jYWxlID0gX3RoaXMkcHJvcHMubG9jYWxlLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW47XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTG9jYWxlQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogX2V4dGVuZHMoX2V4dGVuZHMoe30sIGxvY2FsZSksIHtcbiAgICAgICAgICBleGlzdDogdHJ1ZVxuICAgICAgICB9KVxuICAgICAgfSwgY2hpbGRyZW4pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMb2NhbGVQcm92aWRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0IHsgTG9jYWxlUHJvdmlkZXIgYXMgZGVmYXVsdCB9O1xuTG9jYWxlUHJvdmlkZXIuZGVmYXVsdFByb3BzID0ge1xuICBsb2NhbGU6IHt9XG59OyIsImltcG9ydCBkZXZXYXJuaW5nLCB7IHJlc2V0V2FybmVkIH0gZnJvbSBcInJjLXV0aWwvZXMvd2FybmluZ1wiO1xuZXhwb3J0IHsgcmVzZXRXYXJuZWQgfTtcbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAodmFsaWQsIGNvbXBvbmVudCwgbWVzc2FnZSkge1xuICBkZXZXYXJuaW5nKHZhbGlkLCBcIlthbnRkOiBcIi5jb25jYXQoY29tcG9uZW50LCBcIl0gXCIpLmNvbmNhdChtZXNzYWdlKSk7XG59KTsiLCJpbXBvcnQgbG9jYWxlIGZyb20gJy4uL2xvY2FsZS9kZWZhdWx0JztcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNcIjtcbmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZVN1cGVyXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZGVmYXVsdExvY2FsZURhdGEgZnJvbSAnLi9kZWZhdWx0JztcbmltcG9ydCBMb2NhbGVDb250ZXh0IGZyb20gJy4vY29udGV4dCc7XG5cbnZhciBMb2NhbGVSZWNlaXZlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTG9jYWxlUmVjZWl2ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTG9jYWxlUmVjZWl2ZXIpO1xuXG4gIGZ1bmN0aW9uIExvY2FsZVJlY2VpdmVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2NhbGVSZWNlaXZlcik7XG5cbiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTG9jYWxlUmVjZWl2ZXIsIFt7XG4gICAga2V5OiBcImdldExvY2FsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMb2NhbGUoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNvbXBvbmVudE5hbWUgPSBfdGhpcyRwcm9wcy5jb21wb25lbnROYW1lLFxuICAgICAgICAgIGRlZmF1bHRMb2NhbGUgPSBfdGhpcyRwcm9wcy5kZWZhdWx0TG9jYWxlO1xuICAgICAgdmFyIGxvY2FsZSA9IGRlZmF1bHRMb2NhbGUgfHwgZGVmYXVsdExvY2FsZURhdGFbY29tcG9uZW50TmFtZSB8fCAnZ2xvYmFsJ107XG4gICAgICB2YXIgYW50TG9jYWxlID0gdGhpcy5jb250ZXh0O1xuICAgICAgdmFyIGxvY2FsZUZyb21Db250ZXh0ID0gY29tcG9uZW50TmFtZSAmJiBhbnRMb2NhbGUgPyBhbnRMb2NhbGVbY29tcG9uZW50TmFtZV0gOiB7fTtcbiAgICAgIHJldHVybiBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgdHlwZW9mIGxvY2FsZSA9PT0gJ2Z1bmN0aW9uJyA/IGxvY2FsZSgpIDogbG9jYWxlKSwgbG9jYWxlRnJvbUNvbnRleHQgfHwge30pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRMb2NhbGVDb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldExvY2FsZUNvZGUoKSB7XG4gICAgICB2YXIgYW50TG9jYWxlID0gdGhpcy5jb250ZXh0O1xuICAgICAgdmFyIGxvY2FsZUNvZGUgPSBhbnRMb2NhbGUgJiYgYW50TG9jYWxlLmxvY2FsZTsgLy8gSGFkIHVzZSBMb2NhbGVQcm92aWRlIGJ1dCBkaWRuJ3Qgc2V0IGxvY2FsZVxuXG4gICAgICBpZiAoYW50TG9jYWxlICYmIGFudExvY2FsZS5leGlzdCAmJiAhbG9jYWxlQ29kZSkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdExvY2FsZURhdGEubG9jYWxlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbG9jYWxlQ29kZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuKHRoaXMuZ2V0TG9jYWxlKCksIHRoaXMuZ2V0TG9jYWxlQ29kZSgpLCB0aGlzLmNvbnRleHQpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMb2NhbGVSZWNlaXZlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0IHsgTG9jYWxlUmVjZWl2ZXIgYXMgZGVmYXVsdCB9O1xuTG9jYWxlUmVjZWl2ZXIuZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnROYW1lOiAnZ2xvYmFsJ1xufTtcbkxvY2FsZVJlY2VpdmVyLmNvbnRleHRUeXBlID0gTG9jYWxlQ29udGV4dDtcbmV4cG9ydCBmdW5jdGlvbiB1c2VMb2NhbGVSZWNlaXZlcihjb21wb25lbnROYW1lLCBkZWZhdWx0TG9jYWxlKSB7XG4gIHZhciBhbnRMb2NhbGUgPSBSZWFjdC51c2VDb250ZXh0KExvY2FsZUNvbnRleHQpO1xuICB2YXIgY29tcG9uZW50TG9jYWxlID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxvY2FsZSA9IGRlZmF1bHRMb2NhbGUgfHwgZGVmYXVsdExvY2FsZURhdGFbY29tcG9uZW50TmFtZSB8fCAnZ2xvYmFsJ107XG4gICAgdmFyIGxvY2FsZUZyb21Db250ZXh0ID0gY29tcG9uZW50TmFtZSAmJiBhbnRMb2NhbGUgPyBhbnRMb2NhbGVbY29tcG9uZW50TmFtZV0gOiB7fTtcbiAgICByZXR1cm4gX2V4dGVuZHMoX2V4dGVuZHMoe30sIHR5cGVvZiBsb2NhbGUgPT09ICdmdW5jdGlvbicgPyBsb2NhbGUoKSA6IGxvY2FsZSksIGxvY2FsZUZyb21Db250ZXh0IHx8IHt9KTtcbiAgfSwgW2NvbXBvbmVudE5hbWUsIGRlZmF1bHRMb2NhbGUsIGFudExvY2FsZV0pO1xuICByZXR1cm4gW2NvbXBvbmVudExvY2FsZV07XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ29uZmlnQ29udGV4dCB9IGZyb20gJy4uL2NvbmZpZy1wcm92aWRlcic7XG5cbnZhciBFbXB0eSA9IGZ1bmN0aW9uIEVtcHR5KCkge1xuICB2YXIgX1JlYWN0JHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KENvbmZpZ0NvbnRleHQpLFxuICAgICAgZ2V0UHJlZml4Q2xzID0gX1JlYWN0JHVzZUNvbnRleHQuZ2V0UHJlZml4Q2xzO1xuXG4gIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2VtcHR5LWltZy1kZWZhdWx0Jyk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInN2Z1wiLCB7XG4gICAgY2xhc3NOYW1lOiBwcmVmaXhDbHMsXG4gICAgd2lkdGg6IFwiMTg0XCIsXG4gICAgaGVpZ2h0OiBcIjE1MlwiLFxuICAgIHZpZXdCb3g6IFwiMCAwIDE4NCAxNTJcIixcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCB7XG4gICAgZmlsbDogXCJub25lXCIsXG4gICAgZmlsbFJ1bGU6IFwiZXZlbm9kZFwiXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCB7XG4gICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZSgyNCAzMS42NylcIlxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImVsbGlwc2VcIiwge1xuICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1lbGxpcHNlXCIpLFxuICAgIGN4OiBcIjY3Ljc5N1wiLFxuICAgIGN5OiBcIjEwNi44OVwiLFxuICAgIHJ4OiBcIjY3Ljc5N1wiLFxuICAgIHJ5OiBcIjEyLjY2OFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1wYXRoLTFcIiksXG4gICAgZDogXCJNMTIyLjAzNCA2OS42NzRMOTguMTA5IDQwLjIyOWMtMS4xNDgtMS4zODYtMi44MjYtMi4yMjUtNC41OTMtMi4yMjVoLTUxLjQ0Yy0xLjc2NiAwLTMuNDQ0LjgzOS00LjU5MiAyLjIyNUwxMy41NiA2OS42NzR2MTUuMzgzaDEwOC40NzVWNjkuNjc0elwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1wYXRoLTJcIiksXG4gICAgZDogXCJNMTAxLjUzNyA4Ni4yMTRMODAuNjMgNjEuMTAyYy0xLjAwMS0xLjIwNy0yLjUwNy0xLjg2Ny00LjA0OC0xLjg2N0gzMS43MjRjLTEuNTQgMC0zLjA0Ny42Ni00LjA0OCAxLjg2N0w2Ljc2OSA4Ni4yMTR2MTMuNzkyaDk0Ljc2OFY4Ni4yMTR6XCIsXG4gICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZSgxMy41NilcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItcGF0aC0zXCIpLFxuICAgIGQ6IFwiTTMzLjgzIDBoNjcuOTMzYTQgNCAwIDAgMSA0IDR2OTMuMzQ0YTQgNCAwIDAgMS00IDRIMzMuODNhNCA0IDAgMCAxLTQtNFY0YTQgNCAwIDAgMSA0LTR6XCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXBhdGgtNFwiKSxcbiAgICBkOiBcIk00Mi42NzggOS45NTNoNTAuMjM3YTIgMiAwIDAgMSAyIDJWMzYuOTFhMiAyIDAgMCAxLTIgMkg0Mi42NzhhMiAyIDAgMCAxLTItMlYxMS45NTNhMiAyIDAgMCAxIDItMnpNNDIuOTQgNDkuNzY3aDQ5LjcxM2EyLjI2MiAyLjI2MiAwIDEgMSAwIDQuNTI0SDQyLjk0YTIuMjYyIDIuMjYyIDAgMCAxIDAtNC41MjR6TTQyLjk0IDYxLjUzaDQ5LjcxM2EyLjI2MiAyLjI2MiAwIDEgMSAwIDQuNTI1SDQyLjk0YTIuMjYyIDIuMjYyIDAgMCAxIDAtNC41MjV6TTEyMS44MTMgMTA1LjAzMmMtLjc3NSAzLjA3MS0zLjQ5NyA1LjM2LTYuNzM1IDUuMzZIMjAuNTE1Yy0zLjIzOCAwLTUuOTYtMi4yOS02LjczNC01LjM2YTcuMzA5IDcuMzA5IDAgMCAxLS4yMjItMS43OVY2OS42NzVoMjYuMzE4YzIuOTA3IDAgNS4yNSAyLjQ0OCA1LjI1IDUuNDJ2LjA0YzAgMi45NzEgMi4zNyA1LjM3IDUuMjc3IDUuMzdoMzQuNzg1YzIuOTA3IDAgNS4yNzctMi40MjEgNS4yNzctNS4zOTNWNzUuMWMwLTIuOTcyIDIuMzQzLTUuNDI2IDUuMjUtNS40MjZoMjYuMzE4djMzLjU2OWMwIC42MTctLjA3NyAxLjIxNi0uMjIxIDEuNzg5elwiXG4gIH0pKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItcGF0aC01XCIpLFxuICAgIGQ6IFwiTTE0OS4xMjEgMzMuMjkybC02LjgzIDIuNjVhMSAxIDAgMCAxLTEuMzE3LTEuMjNsMS45MzctNi4yMDdjLTIuNTg5LTIuOTQ0LTQuMTA5LTYuNTM0LTQuMTA5LTEwLjQwOEMxMzguODAyIDguMTAyIDE0OC45MiAwIDE2MS40MDIgMCAxNzMuODgxIDAgMTg0IDguMTAyIDE4NCAxOC4wOTdjMCA5Ljk5NS0xMC4xMTggMTguMDk3LTIyLjU5OSAxOC4wOTctNC41MjggMC04Ljc0NC0xLjA2Ni0xMi4yOC0yLjkwMnpcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIHtcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItZ1wiKSxcbiAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlKDE0OS42NSAxNS4zODMpXCJcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJlbGxpcHNlXCIsIHtcbiAgICBjeDogXCIyMC42NTRcIixcbiAgICBjeTogXCIzLjE2N1wiLFxuICAgIHJ4OiBcIjIuODQ5XCIsXG4gICAgcnk6IFwiMi44MTVcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk01LjY5OCA1LjYzSDBMMi44OTguNzA0ek05LjI1OS43MDRoNC45ODVWNS42M0g5LjI1OXpcIlxuICB9KSkpKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEVtcHR5OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvbmZpZ0NvbnRleHQgfSBmcm9tICcuLi9jb25maWctcHJvdmlkZXInO1xuXG52YXIgU2ltcGxlID0gZnVuY3Rpb24gU2ltcGxlKCkge1xuICB2YXIgX1JlYWN0JHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KENvbmZpZ0NvbnRleHQpLFxuICAgICAgZ2V0UHJlZml4Q2xzID0gX1JlYWN0JHVzZUNvbnRleHQuZ2V0UHJlZml4Q2xzO1xuXG4gIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2VtcHR5LWltZy1zaW1wbGUnKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHtcbiAgICBjbGFzc05hbWU6IHByZWZpeENscyxcbiAgICB3aWR0aDogXCI2NFwiLFxuICAgIGhlaWdodDogXCI0MVwiLFxuICAgIHZpZXdCb3g6IFwiMCAwIDY0IDQxXCIsXG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImdcIiwge1xuICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUoMCAxKVwiLFxuICAgIGZpbGw6IFwibm9uZVwiLFxuICAgIGZpbGxSdWxlOiBcImV2ZW5vZGRcIlxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImVsbGlwc2VcIiwge1xuICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1lbGxpcHNlXCIpLFxuICAgIGN4OiBcIjMyXCIsXG4gICAgY3k6IFwiMzNcIixcbiAgICByeDogXCIzMlwiLFxuICAgIHJ5OiBcIjdcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIHtcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItZ1wiKSxcbiAgICBmaWxsUnVsZTogXCJub256ZXJvXCJcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk01NSAxMi43Nkw0NC44NTQgMS4yNThDNDQuMzY3LjQ3NCA0My42NTYgMCA0Mi45MDcgMEgyMS4wOTNjLS43NDkgMC0xLjQ2LjQ3NC0xLjk0NyAxLjI1N0w5IDEyLjc2MVYyMmg0NnYtOS4yNHpcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk00MS42MTMgMTUuOTMxYzAtMS42MDUuOTk0LTIuOTMgMi4yMjctMi45MzFINTV2MTguMTM3QzU1IDMzLjI2IDUzLjY4IDM1IDUyLjA1IDM1aC00MC4xQzEwLjMyIDM1IDkgMzMuMjU5IDkgMzEuMTM3VjEzaDExLjE2YzEuMjMzIDAgMi4yMjcgMS4zMjMgMi4yMjcgMi45Mjh2LjAyMmMwIDEuNjA1IDEuMDA1IDIuOTAxIDIuMjM3IDIuOTAxaDE0Ljc1MmMxLjIzMiAwIDIuMjM3LTEuMzA4IDIuMjM3LTIuOTEzdi0uMDA3elwiLFxuICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1wYXRoXCIpXG4gIH0pKSkpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2ltcGxlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcblxudmFyIF9fcmVzdCA9IHRoaXMgJiYgdGhpcy5fX3Jlc3QgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcblxuICBmb3IgKHZhciBwIGluIHMpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApIHRbcF0gPSBzW3BdO1xuICB9XG5cbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgQ29uZmlnQ29udGV4dCB9IGZyb20gJy4uL2NvbmZpZy1wcm92aWRlcic7XG5pbXBvcnQgTG9jYWxlUmVjZWl2ZXIgZnJvbSAnLi4vbG9jYWxlLXByb3ZpZGVyL0xvY2FsZVJlY2VpdmVyJztcbmltcG9ydCBEZWZhdWx0RW1wdHlJbWcgZnJvbSAnLi9lbXB0eSc7XG5pbXBvcnQgU2ltcGxlRW1wdHlJbWcgZnJvbSAnLi9zaW1wbGUnO1xudmFyIGRlZmF1bHRFbXB0eUltZyA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRFbXB0eUltZywgbnVsbCk7XG52YXIgc2ltcGxlRW1wdHlJbWcgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTaW1wbGVFbXB0eUltZywgbnVsbCk7XG5cbnZhciBFbXB0eSA9IGZ1bmN0aW9uIEVtcHR5KF9hKSB7XG4gIHZhciBjbGFzc05hbWUgPSBfYS5jbGFzc05hbWUsXG4gICAgICBjdXN0b21pemVQcmVmaXhDbHMgPSBfYS5wcmVmaXhDbHMsXG4gICAgICBfYSRpbWFnZSA9IF9hLmltYWdlLFxuICAgICAgaW1hZ2UgPSBfYSRpbWFnZSA9PT0gdm9pZCAwID8gZGVmYXVsdEVtcHR5SW1nIDogX2EkaW1hZ2UsXG4gICAgICBkZXNjcmlwdGlvbiA9IF9hLmRlc2NyaXB0aW9uLFxuICAgICAgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbixcbiAgICAgIGltYWdlU3R5bGUgPSBfYS5pbWFnZVN0eWxlLFxuICAgICAgcmVzdFByb3BzID0gX19yZXN0KF9hLCBbXCJjbGFzc05hbWVcIiwgXCJwcmVmaXhDbHNcIiwgXCJpbWFnZVwiLCBcImRlc2NyaXB0aW9uXCIsIFwiY2hpbGRyZW5cIiwgXCJpbWFnZVN0eWxlXCJdKTtcblxuICB2YXIgX1JlYWN0JHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KENvbmZpZ0NvbnRleHQpLFxuICAgICAgZ2V0UHJlZml4Q2xzID0gX1JlYWN0JHVzZUNvbnRleHQuZ2V0UHJlZml4Q2xzLFxuICAgICAgZGlyZWN0aW9uID0gX1JlYWN0JHVzZUNvbnRleHQuZGlyZWN0aW9uO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMb2NhbGVSZWNlaXZlciwge1xuICAgIGNvbXBvbmVudE5hbWU6IFwiRW1wdHlcIlxuICB9LCBmdW5jdGlvbiAobG9jYWxlKSB7XG4gICAgdmFyIF9jbGFzc05hbWVzO1xuXG4gICAgdmFyIHByZWZpeENscyA9IGdldFByZWZpeENscygnZW1wdHknLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICAgIHZhciBkZXMgPSB0eXBlb2YgZGVzY3JpcHRpb24gIT09ICd1bmRlZmluZWQnID8gZGVzY3JpcHRpb24gOiBsb2NhbGUuZGVzY3JpcHRpb247XG4gICAgdmFyIGFsdCA9IHR5cGVvZiBkZXMgPT09ICdzdHJpbmcnID8gZGVzIDogJ2VtcHR5JztcbiAgICB2YXIgaW1hZ2VOb2RlID0gbnVsbDtcblxuICAgIGlmICh0eXBlb2YgaW1hZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpbWFnZU5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImltZ1wiLCB7XG4gICAgICAgIGFsdDogYWx0LFxuICAgICAgICBzcmM6IGltYWdlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW1hZ2VOb2RlID0gaW1hZ2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhwcmVmaXhDbHMsIChfY2xhc3NOYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItbm9ybWFsXCIpLCBpbWFnZSA9PT0gc2ltcGxlRW1wdHlJbWcpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItcnRsXCIpLCBkaXJlY3Rpb24gPT09ICdydGwnKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWUpXG4gICAgfSwgcmVzdFByb3BzKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWltYWdlXCIpLFxuICAgICAgc3R5bGU6IGltYWdlU3R5bGVcbiAgICB9LCBpbWFnZU5vZGUpLCBkZXMgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1kZXNjcmlwdGlvblwiKVxuICAgIH0sIGRlcyksIGNoaWxkcmVuICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1mb290ZXJcIilcbiAgICB9LCBjaGlsZHJlbikpO1xuICB9KTtcbn07XG5cbkVtcHR5LlBSRVNFTlRFRF9JTUFHRV9ERUZBVUxUID0gZGVmYXVsdEVtcHR5SW1nO1xuRW1wdHkuUFJFU0VOVEVEX0lNQUdFX1NJTVBMRSA9IHNpbXBsZUVtcHR5SW1nO1xuZXhwb3J0IGRlZmF1bHQgRW1wdHk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZGVmYXVsdFJlbmRlckVtcHR5IGZyb20gJy4vcmVuZGVyRW1wdHknO1xuZXhwb3J0IHZhciBDb25maWdDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICAvLyBXZSBwcm92aWRlIGEgZGVmYXVsdCBmdW5jdGlvbiBmb3IgQ29udGV4dCB3aXRob3V0IHByb3ZpZGVyXG4gIGdldFByZWZpeENsczogZnVuY3Rpb24gZ2V0UHJlZml4Q2xzKHN1ZmZpeENscywgY3VzdG9taXplUHJlZml4Q2xzKSB7XG4gICAgaWYgKGN1c3RvbWl6ZVByZWZpeENscykgcmV0dXJuIGN1c3RvbWl6ZVByZWZpeENscztcbiAgICByZXR1cm4gc3VmZml4Q2xzID8gXCJhbnQtXCIuY29uY2F0KHN1ZmZpeENscykgOiAnYW50JztcbiAgfSxcbiAgcmVuZGVyRW1wdHk6IGRlZmF1bHRSZW5kZXJFbXB0eVxufSk7XG5leHBvcnQgdmFyIENvbmZpZ0NvbnN1bWVyID0gQ29uZmlnQ29udGV4dC5Db25zdW1lcjtcbi8qKiBAZGVwcmVjYXRlZCBVc2UgaG9va3MgaW5zdGVhZC4gVGhpcyBpcyBhIGxlZ2FjeSBmdW5jdGlvbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gd2l0aENvbmZpZ0NvbnN1bWVyKGNvbmZpZykge1xuICByZXR1cm4gZnVuY3Rpb24gd2l0aENvbmZpZ0NvbnN1bWVyRnVuYyhDb21wb25lbnQpIHtcbiAgICAvLyBXcmFwIHdpdGggQ29uZmlnQ29uc3VtZXIuIFNpbmNlIHdlIG5lZWQgY29tcGF0aWJsZSB3aXRoIHJlYWN0IDE1LCBiZSBjYXJlIHdoZW4gdXNpbmcgcmVmIG1ldGhvZHNcbiAgICB2YXIgU0ZDID0gZnVuY3Rpb24gU0ZDKHByb3BzKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29uZmlnQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb25maWdQcm9wcykge1xuICAgICAgICB2YXIgYmFzaWNQcmVmaXhDbHMgPSBjb25maWcucHJlZml4Q2xzO1xuICAgICAgICB2YXIgZ2V0UHJlZml4Q2xzID0gY29uZmlnUHJvcHMuZ2V0UHJlZml4Q2xzO1xuICAgICAgICB2YXIgY3VzdG9taXplUHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzO1xuICAgICAgICB2YXIgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKGJhc2ljUHJlZml4Q2xzLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgY29uZmlnUHJvcHMsIHByb3BzLCB7XG4gICAgICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHNcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciBjb25zID0gQ29tcG9uZW50LmNvbnN0cnVjdG9yO1xuICAgIHZhciBuYW1lID0gY29ucyAmJiBjb25zLmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuICAgIFNGQy5kaXNwbGF5TmFtZSA9IFwid2l0aENvbmZpZ0NvbnN1bWVyKFwiLmNvbmNhdChuYW1lLCBcIilcIik7XG4gICAgcmV0dXJuIFNGQztcbiAgfTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRW1wdHkgZnJvbSAnLi4vZW1wdHknO1xuaW1wb3J0IHsgQ29uZmlnQ29uc3VtZXIgfSBmcm9tICcuJztcblxudmFyIHJlbmRlckVtcHR5ID0gZnVuY3Rpb24gcmVuZGVyRW1wdHkoY29tcG9uZW50TmFtZSkge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29uZmlnQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGdldFByZWZpeENscyA9IF9yZWYuZ2V0UHJlZml4Q2xzO1xuICAgIHZhciBwcmVmaXggPSBnZXRQcmVmaXhDbHMoJ2VtcHR5Jyk7XG5cbiAgICBzd2l0Y2ggKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgIGNhc2UgJ1RhYmxlJzpcbiAgICAgIGNhc2UgJ0xpc3QnOlxuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRW1wdHksIHtcbiAgICAgICAgICBpbWFnZTogRW1wdHkuUFJFU0VOVEVEX0lNQUdFX1NJTVBMRVxuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnU2VsZWN0JzpcbiAgICAgIGNhc2UgJ1RyZWVTZWxlY3QnOlxuICAgICAgY2FzZSAnQ2FzY2FkZXInOlxuICAgICAgY2FzZSAnVHJhbnNmZXInOlxuICAgICAgY2FzZSAnTWVudGlvbnMnOlxuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRW1wdHksIHtcbiAgICAgICAgICBpbWFnZTogRW1wdHkuUFJFU0VOVEVEX0lNQUdFX1NJTVBMRSxcbiAgICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeCwgXCItc21hbGxcIilcbiAgICAgICAgfSk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChFbXB0eSwgbnVsbCk7XG4gICAgfVxuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHJlbmRlckVtcHR5OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbnZhciBTaXplQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7XG5leHBvcnQgdmFyIFNpemVDb250ZXh0UHJvdmlkZXIgPSBmdW5jdGlvbiBTaXplQ29udGV4dFByb3ZpZGVyKF9yZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIHNpemUgPSBfcmVmLnNpemU7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTaXplQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKG9yaWdpblNpemUpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU2l6ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBzaXplIHx8IG9yaWdpblNpemVcbiAgICB9LCBjaGlsZHJlbik7XG4gIH0pO1xufTtcbmV4cG9ydCBkZWZhdWx0IFNpemVDb250ZXh0OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhblVzZURvbSgpIHtcbiAgcmV0dXJuICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG59IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IGNhblVzZURPTSBmcm9tIFwicmMtdXRpbC9lcy9Eb20vY2FuVXNlRG9tXCI7IC8vID09PT09PT09PT09PT09PT09IFRyYW5zaXRpb24gPT09PT09PT09PT09PT09PT1cbi8vIEV2ZW50IHdyYXBwZXIuIENvcHkgZnJvbSByZWFjdCBzb3VyY2UgY29kZVxuXG5mdW5jdGlvbiBtYWtlUHJlZml4TWFwKHN0eWxlUHJvcCwgZXZlbnROYW1lKSB7XG4gIHZhciBwcmVmaXhlcyA9IHt9O1xuICBwcmVmaXhlc1tzdHlsZVByb3AudG9Mb3dlckNhc2UoKV0gPSBldmVudE5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcHJlZml4ZXNbXCJXZWJraXRcIi5jb25jYXQoc3R5bGVQcm9wKV0gPSBcIndlYmtpdFwiLmNvbmNhdChldmVudE5hbWUpO1xuICBwcmVmaXhlc1tcIk1velwiLmNvbmNhdChzdHlsZVByb3ApXSA9IFwibW96XCIuY29uY2F0KGV2ZW50TmFtZSk7XG4gIHByZWZpeGVzW1wibXNcIi5jb25jYXQoc3R5bGVQcm9wKV0gPSBcIk1TXCIuY29uY2F0KGV2ZW50TmFtZSk7XG4gIHByZWZpeGVzW1wiT1wiLmNvbmNhdChzdHlsZVByb3ApXSA9IFwib1wiLmNvbmNhdChldmVudE5hbWUudG9Mb3dlckNhc2UoKSk7XG4gIHJldHVybiBwcmVmaXhlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZlbmRvclByZWZpeGVzKGRvbVN1cHBvcnQsIHdpbikge1xuICB2YXIgcHJlZml4ZXMgPSB7XG4gICAgYW5pbWF0aW9uZW5kOiBtYWtlUHJlZml4TWFwKCdBbmltYXRpb24nLCAnQW5pbWF0aW9uRW5kJyksXG4gICAgdHJhbnNpdGlvbmVuZDogbWFrZVByZWZpeE1hcCgnVHJhbnNpdGlvbicsICdUcmFuc2l0aW9uRW5kJylcbiAgfTtcblxuICBpZiAoZG9tU3VwcG9ydCkge1xuICAgIGlmICghKCdBbmltYXRpb25FdmVudCcgaW4gd2luKSkge1xuICAgICAgZGVsZXRlIHByZWZpeGVzLmFuaW1hdGlvbmVuZC5hbmltYXRpb247XG4gICAgfVxuXG4gICAgaWYgKCEoJ1RyYW5zaXRpb25FdmVudCcgaW4gd2luKSkge1xuICAgICAgZGVsZXRlIHByZWZpeGVzLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcHJlZml4ZXM7XG59XG52YXIgdmVuZG9yUHJlZml4ZXMgPSBnZXRWZW5kb3JQcmVmaXhlcyhjYW5Vc2VET00oKSwgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fSk7XG52YXIgc3R5bGUgPSB7fTtcblxuaWYgKGNhblVzZURPTSgpKSB7XG4gIHZhciBfZG9jdW1lbnQkY3JlYXRlRWxlbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICBzdHlsZSA9IF9kb2N1bWVudCRjcmVhdGVFbGVtZS5zdHlsZTtcbn1cblxudmFyIHByZWZpeGVkRXZlbnROYW1lcyA9IHt9O1xuZXhwb3J0IGZ1bmN0aW9uIGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKGV2ZW50TmFtZSkge1xuICBpZiAocHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV0pIHtcbiAgICByZXR1cm4gcHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV07XG4gIH1cblxuICB2YXIgcHJlZml4TWFwID0gdmVuZG9yUHJlZml4ZXNbZXZlbnROYW1lXTtcblxuICBpZiAocHJlZml4TWFwKSB7XG4gICAgdmFyIHN0eWxlUHJvcExpc3QgPSBPYmplY3Qua2V5cyhwcmVmaXhNYXApO1xuICAgIHZhciBsZW4gPSBzdHlsZVByb3BMaXN0Lmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHZhciBzdHlsZVByb3AgPSBzdHlsZVByb3BMaXN0W2ldO1xuXG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByZWZpeE1hcCwgc3R5bGVQcm9wKSAmJiBzdHlsZVByb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgcHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV0gPSBwcmVmaXhNYXBbc3R5bGVQcm9wXTtcbiAgICAgICAgcmV0dXJuIHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAnJztcbn1cbnZhciBpbnRlcm5hbEFuaW1hdGlvbkVuZE5hbWUgPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSgnYW5pbWF0aW9uZW5kJyk7XG52YXIgaW50ZXJuYWxUcmFuc2l0aW9uRW5kTmFtZSA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKCd0cmFuc2l0aW9uZW5kJyk7XG5leHBvcnQgdmFyIHN1cHBvcnRUcmFuc2l0aW9uID0gISEoaW50ZXJuYWxBbmltYXRpb25FbmROYW1lICYmIGludGVybmFsVHJhbnNpdGlvbkVuZE5hbWUpO1xuZXhwb3J0IHZhciBhbmltYXRpb25FbmROYW1lID0gaW50ZXJuYWxBbmltYXRpb25FbmROYW1lIHx8ICdhbmltYXRpb25lbmQnO1xuZXhwb3J0IHZhciB0cmFuc2l0aW9uRW5kTmFtZSA9IGludGVybmFsVHJhbnNpdGlvbkVuZE5hbWUgfHwgJ3RyYW5zaXRpb25lbmQnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zaXRpb25OYW1lKHRyYW5zaXRpb25OYW1lLCB0cmFuc2l0aW9uVHlwZSkge1xuICBpZiAoIXRyYW5zaXRpb25OYW1lKSByZXR1cm4gbnVsbDtcblxuICBpZiAoX3R5cGVvZih0cmFuc2l0aW9uTmFtZSkgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHR5cGUgPSB0cmFuc2l0aW9uVHlwZS5yZXBsYWNlKC8tXFx3L2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgcmV0dXJuIG1hdGNoWzFdLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25OYW1lW3R5cGVdO1xuICB9XG5cbiAgcmV0dXJuIFwiXCIuY29uY2F0KHRyYW5zaXRpb25OYW1lLCBcIi1cIikuY29uY2F0KHRyYW5zaXRpb25UeXBlKTtcbn0iLCJleHBvcnQgdmFyIFNUQVRVU19OT05FID0gJ25vbmUnO1xuZXhwb3J0IHZhciBTVEFUVVNfQVBQRUFSID0gJ2FwcGVhcic7XG5leHBvcnQgdmFyIFNUQVRVU19FTlRFUiA9ICdlbnRlcic7XG5leHBvcnQgdmFyIFNUQVRVU19MRUFWRSA9ICdsZWF2ZSc7XG5leHBvcnQgdmFyIFNURVBfTk9ORSA9ICdub25lJztcbmV4cG9ydCB2YXIgU1RFUF9QUkVQQVJFID0gJ3ByZXBhcmUnO1xuZXhwb3J0IHZhciBTVEVQX1NUQVJUID0gJ3N0YXJ0JztcbmV4cG9ydCB2YXIgU1RFUF9BQ1RJVkUgPSAnYWN0aXZlJztcbmV4cG9ydCB2YXIgU1RFUF9BQ1RJVkFURUQgPSAnZW5kJzsiLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZU1vdW50U3RhdHVzKGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgZGVzdHJveVJlZiA9IHVzZVJlZihmYWxzZSk7XG5cbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKGRlZmF1bHRWYWx1ZSksXG4gICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSxcbiAgICAgIHZhbCA9IF91c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRWYWwgPSBfdXNlU3RhdGUyWzFdO1xuXG4gIGZ1bmN0aW9uIHNldFZhbHVlKG5leHQpIHtcbiAgICBpZiAoIWRlc3Ryb3lSZWYuY3VycmVudCkge1xuICAgICAgc2V0VmFsKG5leHQpO1xuICAgIH1cbiAgfVxuXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlc3Ryb3lSZWYuY3VycmVudCA9IHRydWU7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gW3ZhbCwgc2V0VmFsdWVdO1xufSIsImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNhblVzZURvbSBmcm9tIFwicmMtdXRpbC9lcy9Eb20vY2FuVXNlRG9tXCI7IC8vIEl0J3Mgc2FmZSB0byB1c2UgYHVzZUxheW91dEVmZmVjdGAgYnV0IHRoZSB3YXJuaW5nIGlzIGFubm95aW5nXG5cbnZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gY2FuVXNlRG9tKCkgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7XG5leHBvcnQgZGVmYXVsdCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0OyIsInZhciByYWYgPSBmdW5jdGlvbiByYWYoY2FsbGJhY2spIHtcbiAgcmV0dXJuICtzZXRUaW1lb3V0KGNhbGxiYWNrLCAxNik7XG59O1xuXG52YXIgY2FmID0gZnVuY3Rpb24gY2FmKG51bSkge1xuICByZXR1cm4gY2xlYXJUaW1lb3V0KG51bSk7XG59O1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ3JlcXVlc3RBbmltYXRpb25GcmFtZScgaW4gd2luZG93KSB7XG4gIHJhZiA9IGZ1bmN0aW9uIHJhZihjYWxsYmFjaykge1xuICAgIHJldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKTtcbiAgfTtcblxuICBjYWYgPSBmdW5jdGlvbiBjYWYoaGFuZGxlKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShoYW5kbGUpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB3cmFwcGVyUmFmKGNhbGxiYWNrKSB7XG4gIHJldHVybiByYWYoY2FsbGJhY2spO1xufVxud3JhcHBlclJhZi5jYW5jZWwgPSBjYWY7IiwiaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTVEVQX1BSRVBBUkUsIFNURVBfQUNUSVZFLCBTVEVQX1NUQVJULCBTVEVQX0FDVElWQVRFRCwgU1RFUF9OT05FIH0gZnJvbSAnLi4vaW50ZXJmYWNlJztcbmltcG9ydCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IGZyb20gJy4vdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG5pbXBvcnQgdXNlTmV4dEZyYW1lIGZyb20gJy4vdXNlTmV4dEZyYW1lJztcbnZhciBTVEVQX1FVRVVFID0gW1NURVBfUFJFUEFSRSwgU1RFUF9TVEFSVCwgU1RFUF9BQ1RJVkUsIFNURVBfQUNUSVZBVEVEXTtcbi8qKiBTa2lwIGN1cnJlbnQgc3RlcCAqL1xuXG5leHBvcnQgdmFyIFNraXBTdGVwID0gZmFsc2U7XG4vKiogQ3VycmVudCBzdGVwIHNob3VsZCBiZSB1cGRhdGUgaW4gKi9cblxuZXhwb3J0IHZhciBEb1N0ZXAgPSB0cnVlO1xuZXhwb3J0IGZ1bmN0aW9uIGlzQWN0aXZlKHN0ZXApIHtcbiAgcmV0dXJuIHN0ZXAgPT09IFNURVBfQUNUSVZFIHx8IHN0ZXAgPT09IFNURVBfQUNUSVZBVEVEO1xufVxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIChzdGF0dXMsIGNhbGxiYWNrKSB7XG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShTVEVQX05PTkUpLFxuICAgICAgX1JlYWN0JHVzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZSwgMiksXG4gICAgICBzdGVwID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICAgIHNldFN0ZXAgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIHZhciBfdXNlTmV4dEZyYW1lID0gdXNlTmV4dEZyYW1lKCksXG4gICAgICBfdXNlTmV4dEZyYW1lMiA9IF9zbGljZWRUb0FycmF5KF91c2VOZXh0RnJhbWUsIDIpLFxuICAgICAgbmV4dEZyYW1lID0gX3VzZU5leHRGcmFtZTJbMF0sXG4gICAgICBjYW5jZWxOZXh0RnJhbWUgPSBfdXNlTmV4dEZyYW1lMlsxXTtcblxuICBmdW5jdGlvbiBzdGFydFF1ZXVlKCkge1xuICAgIHNldFN0ZXAoU1RFUF9QUkVQQVJFKTtcbiAgfVxuXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChzdGVwICE9PSBTVEVQX05PTkUgJiYgc3RlcCAhPT0gU1RFUF9BQ1RJVkFURUQpIHtcbiAgICAgIHZhciBpbmRleCA9IFNURVBfUVVFVUUuaW5kZXhPZihzdGVwKTtcbiAgICAgIHZhciBuZXh0U3RlcCA9IFNURVBfUVVFVUVbaW5kZXggKyAxXTtcbiAgICAgIHZhciByZXN1bHQgPSBjYWxsYmFjayhzdGVwKTtcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gU2tpcFN0ZXApIHtcbiAgICAgICAgLy8gU2tpcCB3aGVuIG5vIG5lZWRlZFxuICAgICAgICBzZXRTdGVwKG5leHRTdGVwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIERvIGFzIGZyYW1lIGZvciBzdGVwIHVwZGF0ZVxuICAgICAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKGluZm8pIHtcbiAgICAgICAgICBmdW5jdGlvbiBkb05leHQoKSB7XG4gICAgICAgICAgICAvLyBTa2lwIHNpbmNlIGN1cnJlbnQgcXVldWUgaXMgb29kXG4gICAgICAgICAgICBpZiAoaW5mby5pc0NhbmNlbGVkKCkpIHJldHVybjtcbiAgICAgICAgICAgIHNldFN0ZXAobmV4dFN0ZXApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGRvTmV4dCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBPbmx5IHByb21pc2Ugc2hvdWxkIGJlIGFzeW5jXG4gICAgICAgICAgICBQcm9taXNlLnJlc29sdmUocmVzdWx0KS50aGVuKGRvTmV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtzdGF0dXMsIHN0ZXBdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2FuY2VsTmV4dEZyYW1lKCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gW3N0YXJ0UXVldWUsIHN0ZXBdO1xufSk7IiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVJlZiwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU1RBVFVTX0FQUEVBUiwgU1RBVFVTX05PTkUsIFNUQVRVU19MRUFWRSwgU1RBVFVTX0VOVEVSLCBTVEVQX1BSRVBBUkUsIFNURVBfU1RBUlQsIFNURVBfQUNUSVZFIH0gZnJvbSAnLi4vaW50ZXJmYWNlJztcbmltcG9ydCB1c2VTdGF0ZSBmcm9tICcuL3VzZVN0YXRlJztcbmltcG9ydCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IGZyb20gJy4vdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG5pbXBvcnQgdXNlU3RlcFF1ZXVlLCB7IERvU3RlcCwgU2tpcFN0ZXAsIGlzQWN0aXZlIH0gZnJvbSAnLi91c2VTdGVwUXVldWUnO1xuaW1wb3J0IHVzZURvbU1vdGlvbkV2ZW50cyBmcm9tICcuL3VzZURvbU1vdGlvbkV2ZW50cyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VTdGF0dXMoc3VwcG9ydE1vdGlvbiwgdmlzaWJsZSwgZ2V0RWxlbWVudCwgX3JlZikge1xuICB2YXIgX3JlZiRtb3Rpb25FbnRlciA9IF9yZWYubW90aW9uRW50ZXIsXG4gICAgICBtb3Rpb25FbnRlciA9IF9yZWYkbW90aW9uRW50ZXIgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJG1vdGlvbkVudGVyLFxuICAgICAgX3JlZiRtb3Rpb25BcHBlYXIgPSBfcmVmLm1vdGlvbkFwcGVhcixcbiAgICAgIG1vdGlvbkFwcGVhciA9IF9yZWYkbW90aW9uQXBwZWFyID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiRtb3Rpb25BcHBlYXIsXG4gICAgICBfcmVmJG1vdGlvbkxlYXZlID0gX3JlZi5tb3Rpb25MZWF2ZSxcbiAgICAgIG1vdGlvbkxlYXZlID0gX3JlZiRtb3Rpb25MZWF2ZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkbW90aW9uTGVhdmUsXG4gICAgICBtb3Rpb25EZWFkbGluZSA9IF9yZWYubW90aW9uRGVhZGxpbmUsXG4gICAgICBtb3Rpb25MZWF2ZUltbWVkaWF0ZWx5ID0gX3JlZi5tb3Rpb25MZWF2ZUltbWVkaWF0ZWx5LFxuICAgICAgb25BcHBlYXJQcmVwYXJlID0gX3JlZi5vbkFwcGVhclByZXBhcmUsXG4gICAgICBvbkVudGVyUHJlcGFyZSA9IF9yZWYub25FbnRlclByZXBhcmUsXG4gICAgICBvbkxlYXZlUHJlcGFyZSA9IF9yZWYub25MZWF2ZVByZXBhcmUsXG4gICAgICBvbkFwcGVhclN0YXJ0ID0gX3JlZi5vbkFwcGVhclN0YXJ0LFxuICAgICAgb25FbnRlclN0YXJ0ID0gX3JlZi5vbkVudGVyU3RhcnQsXG4gICAgICBvbkxlYXZlU3RhcnQgPSBfcmVmLm9uTGVhdmVTdGFydCxcbiAgICAgIG9uQXBwZWFyQWN0aXZlID0gX3JlZi5vbkFwcGVhckFjdGl2ZSxcbiAgICAgIG9uRW50ZXJBY3RpdmUgPSBfcmVmLm9uRW50ZXJBY3RpdmUsXG4gICAgICBvbkxlYXZlQWN0aXZlID0gX3JlZi5vbkxlYXZlQWN0aXZlLFxuICAgICAgb25BcHBlYXJFbmQgPSBfcmVmLm9uQXBwZWFyRW5kLFxuICAgICAgb25FbnRlckVuZCA9IF9yZWYub25FbnRlckVuZCxcbiAgICAgIG9uTGVhdmVFbmQgPSBfcmVmLm9uTGVhdmVFbmQsXG4gICAgICBvblZpc2libGVDaGFuZ2VkID0gX3JlZi5vblZpc2libGVDaGFuZ2VkO1xuXG4gIC8vIFVzZWQgZm9yIG91dGVyIHJlbmRlciB1c2FnZSB0byBhdm9pZCBgdmlzaWJsZTogZmFsc2UgJiBzdGF0dXM6IG5vbmVgIHRvIHJlbmRlciBub3RoaW5nXG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZSgpLFxuICAgICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksXG4gICAgICBhc3luY1Zpc2libGUgPSBfdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0QXN5bmNWaXNpYmxlID0gX3VzZVN0YXRlMlsxXTtcblxuICB2YXIgX3VzZVN0YXRlMyA9IHVzZVN0YXRlKFNUQVRVU19OT05FKSxcbiAgICAgIF91c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUzLCAyKSxcbiAgICAgIHN0YXR1cyA9IF91c2VTdGF0ZTRbMF0sXG4gICAgICBzZXRTdGF0dXMgPSBfdXNlU3RhdGU0WzFdO1xuXG4gIHZhciBfdXNlU3RhdGU1ID0gdXNlU3RhdGUobnVsbCksXG4gICAgICBfdXNlU3RhdGU2ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlNSwgMiksXG4gICAgICBzdHlsZSA9IF91c2VTdGF0ZTZbMF0sXG4gICAgICBzZXRTdHlsZSA9IF91c2VTdGF0ZTZbMV07XG5cbiAgdmFyIG1vdW50ZWRSZWYgPSB1c2VSZWYoZmFsc2UpO1xuICB2YXIgZGVhZGxpbmVSZWYgPSB1c2VSZWYobnVsbCk7XG4gIHZhciBkZXN0cm95ZWRSZWYgPSB1c2VSZWYoZmFsc2UpOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT0gRG9tIE5vZGUgPT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIGNhY2hlRWxlbWVudFJlZiA9IHVzZVJlZihudWxsKTtcblxuICBmdW5jdGlvbiBnZXREb21FbGVtZW50KCkge1xuICAgIHZhciBlbGVtZW50ID0gZ2V0RWxlbWVudCgpO1xuICAgIHJldHVybiBlbGVtZW50IHx8IGNhY2hlRWxlbWVudFJlZi5jdXJyZW50O1xuICB9IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09IE1vdGlvbiBFbmQgPT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG4gIHZhciBhY3RpdmVSZWYgPSB1c2VSZWYoZmFsc2UpO1xuXG4gIGZ1bmN0aW9uIG9uSW50ZXJuYWxNb3Rpb25FbmQoZXZlbnQpIHtcbiAgICB2YXIgZWxlbWVudCA9IGdldERvbUVsZW1lbnQoKTtcblxuICAgIGlmIChldmVudCAmJiAhZXZlbnQuZGVhZGxpbmUgJiYgZXZlbnQudGFyZ2V0ICE9PSBlbGVtZW50KSB7XG4gICAgICAvLyBldmVudCBleGlzdHNcbiAgICAgIC8vIG5vdCBpbml0aWF0ZWQgYnkgZGVhZGxpbmVcbiAgICAgIC8vIHRyYW5zaXRpb25FbmQgbm90IGZpcmVkIGJ5IGlubmVyIGVsZW1lbnRzXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNhbkVuZDtcblxuICAgIGlmIChzdGF0dXMgPT09IFNUQVRVU19BUFBFQVIgJiYgYWN0aXZlUmVmLmN1cnJlbnQpIHtcbiAgICAgIGNhbkVuZCA9IG9uQXBwZWFyRW5kID09PSBudWxsIHx8IG9uQXBwZWFyRW5kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkFwcGVhckVuZChlbGVtZW50LCBldmVudCk7XG4gICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IFNUQVRVU19FTlRFUiAmJiBhY3RpdmVSZWYuY3VycmVudCkge1xuICAgICAgY2FuRW5kID0gb25FbnRlckVuZCA9PT0gbnVsbCB8fCBvbkVudGVyRW5kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkVudGVyRW5kKGVsZW1lbnQsIGV2ZW50KTtcbiAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gU1RBVFVTX0xFQVZFICYmIGFjdGl2ZVJlZi5jdXJyZW50KSB7XG4gICAgICBjYW5FbmQgPSBvbkxlYXZlRW5kID09PSBudWxsIHx8IG9uTGVhdmVFbmQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uTGVhdmVFbmQoZWxlbWVudCwgZXZlbnQpO1xuICAgIH0gLy8gT25seSB1cGRhdGUgc3RhdHVzIHdoZW4gYGNhbkVuZGAgYW5kIG5vdCBkZXN0cm95ZWRcblxuXG4gICAgaWYgKGNhbkVuZCAhPT0gZmFsc2UgJiYgIWRlc3Ryb3llZFJlZi5jdXJyZW50KSB7XG4gICAgICBzZXRTdGF0dXMoU1RBVFVTX05PTkUpO1xuICAgICAgc2V0U3R5bGUobnVsbCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIF91c2VEb21Nb3Rpb25FdmVudHMgPSB1c2VEb21Nb3Rpb25FdmVudHMob25JbnRlcm5hbE1vdGlvbkVuZCksXG4gICAgICBfdXNlRG9tTW90aW9uRXZlbnRzMiA9IF9zbGljZWRUb0FycmF5KF91c2VEb21Nb3Rpb25FdmVudHMsIDEpLFxuICAgICAgcGF0Y2hNb3Rpb25FdmVudHMgPSBfdXNlRG9tTW90aW9uRXZlbnRzMlswXTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gU3RlcCA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cbiAgdmFyIGV2ZW50SGFuZGxlcnMgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3JlZjIsIF9yZWYzLCBfcmVmNDtcblxuICAgIHN3aXRjaCAoc3RhdHVzKSB7XG4gICAgICBjYXNlICdhcHBlYXInOlxuICAgICAgICByZXR1cm4gX3JlZjIgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9yZWYyLCBTVEVQX1BSRVBBUkUsIG9uQXBwZWFyUHJlcGFyZSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMiwgU1RFUF9TVEFSVCwgb25BcHBlYXJTdGFydCksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMiwgU1RFUF9BQ1RJVkUsIG9uQXBwZWFyQWN0aXZlKSwgX3JlZjI7XG5cbiAgICAgIGNhc2UgJ2VudGVyJzpcbiAgICAgICAgcmV0dXJuIF9yZWYzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcmVmMywgU1RFUF9QUkVQQVJFLCBvbkVudGVyUHJlcGFyZSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMywgU1RFUF9TVEFSVCwgb25FbnRlclN0YXJ0KSwgX2RlZmluZVByb3BlcnR5KF9yZWYzLCBTVEVQX0FDVElWRSwgb25FbnRlckFjdGl2ZSksIF9yZWYzO1xuXG4gICAgICBjYXNlICdsZWF2ZSc6XG4gICAgICAgIHJldHVybiBfcmVmNCA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3JlZjQsIFNURVBfUFJFUEFSRSwgb25MZWF2ZVByZXBhcmUpLCBfZGVmaW5lUHJvcGVydHkoX3JlZjQsIFNURVBfU1RBUlQsIG9uTGVhdmVTdGFydCksIF9kZWZpbmVQcm9wZXJ0eShfcmVmNCwgU1RFUF9BQ1RJVkUsIG9uTGVhdmVBY3RpdmUpLCBfcmVmNDtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgfSwgW3N0YXR1c10pO1xuXG4gIHZhciBfdXNlU3RlcFF1ZXVlID0gdXNlU3RlcFF1ZXVlKHN0YXR1cywgZnVuY3Rpb24gKG5ld1N0ZXApIHtcbiAgICAvLyBPbmx5IHByZXBhcmUgc3RlcCBjYW4gYmUgc2tpcFxuICAgIGlmIChuZXdTdGVwID09PSBTVEVQX1BSRVBBUkUpIHtcbiAgICAgIHZhciBvblByZXBhcmUgPSBldmVudEhhbmRsZXJzW1NURVBfUFJFUEFSRV07XG5cbiAgICAgIGlmICghb25QcmVwYXJlKSB7XG4gICAgICAgIHJldHVybiBTa2lwU3RlcDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9uUHJlcGFyZShnZXREb21FbGVtZW50KCkpO1xuICAgIH0gLy8gUmVzdCBzdGVwIGlzIHN5bmMgdXBkYXRlXG5cblxuICAgIGlmIChzdGVwIGluIGV2ZW50SGFuZGxlcnMpIHtcbiAgICAgIHZhciBfZXZlbnRIYW5kbGVycyRzdGVwO1xuXG4gICAgICBzZXRTdHlsZSgoKF9ldmVudEhhbmRsZXJzJHN0ZXAgPSBldmVudEhhbmRsZXJzW3N0ZXBdKSA9PT0gbnVsbCB8fCBfZXZlbnRIYW5kbGVycyRzdGVwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZXZlbnRIYW5kbGVycyRzdGVwLmNhbGwoZXZlbnRIYW5kbGVycywgZ2V0RG9tRWxlbWVudCgpLCBudWxsKSkgfHwgbnVsbCk7XG4gICAgfVxuXG4gICAgaWYgKHN0ZXAgPT09IFNURVBfQUNUSVZFKSB7XG4gICAgICAvLyBQYXRjaCBldmVudHMgd2hlbiBtb3Rpb24gbmVlZGVkXG4gICAgICBwYXRjaE1vdGlvbkV2ZW50cyhnZXREb21FbGVtZW50KCkpO1xuXG4gICAgICBpZiAobW90aW9uRGVhZGxpbmUgPiAwKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChkZWFkbGluZVJlZi5jdXJyZW50KTtcbiAgICAgICAgZGVhZGxpbmVSZWYuY3VycmVudCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIG9uSW50ZXJuYWxNb3Rpb25FbmQoe1xuICAgICAgICAgICAgZGVhZGxpbmU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgbW90aW9uRGVhZGxpbmUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBEb1N0ZXA7XG4gIH0pLFxuICAgICAgX3VzZVN0ZXBRdWV1ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RlcFF1ZXVlLCAyKSxcbiAgICAgIHN0YXJ0U3RlcCA9IF91c2VTdGVwUXVldWUyWzBdLFxuICAgICAgc3RlcCA9IF91c2VTdGVwUXVldWUyWzFdO1xuXG4gIHZhciBhY3RpdmUgPSBpc0FjdGl2ZShzdGVwKTtcbiAgYWN0aXZlUmVmLmN1cnJlbnQgPSBhY3RpdmU7IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT0gU3RhdHVzID09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gVXBkYXRlIHdpdGggbmV3IHN0YXR1c1xuXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHNldEFzeW5jVmlzaWJsZSh2aXNpYmxlKTtcblxuICAgIGlmICghc3VwcG9ydE1vdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBpc01vdW50ZWQgPSBtb3VudGVkUmVmLmN1cnJlbnQ7XG4gICAgbW91bnRlZFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICB2YXIgbmV4dFN0YXR1czsgLy8gQXBwZWFyXG5cbiAgICBpZiAoIWlzTW91bnRlZCAmJiB2aXNpYmxlICYmIG1vdGlvbkFwcGVhcikge1xuICAgICAgbmV4dFN0YXR1cyA9IFNUQVRVU19BUFBFQVI7XG4gICAgfSAvLyBFbnRlclxuXG5cbiAgICBpZiAoaXNNb3VudGVkICYmIHZpc2libGUgJiYgbW90aW9uRW50ZXIpIHtcbiAgICAgIG5leHRTdGF0dXMgPSBTVEFUVVNfRU5URVI7XG4gICAgfSAvLyBMZWF2ZVxuXG5cbiAgICBpZiAoaXNNb3VudGVkICYmICF2aXNpYmxlICYmIG1vdGlvbkxlYXZlIHx8ICFpc01vdW50ZWQgJiYgbW90aW9uTGVhdmVJbW1lZGlhdGVseSAmJiAhdmlzaWJsZSAmJiBtb3Rpb25MZWF2ZSkge1xuICAgICAgbmV4dFN0YXR1cyA9IFNUQVRVU19MRUFWRTtcbiAgICB9IC8vIFVwZGF0ZSB0byBuZXh0IHN0YXR1c1xuXG5cbiAgICBpZiAobmV4dFN0YXR1cykge1xuICAgICAgc2V0U3RhdHVzKG5leHRTdGF0dXMpO1xuICAgICAgc3RhcnRTdGVwKCk7XG4gICAgfVxuICB9LCBbdmlzaWJsZV0pOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09IEVmZmVjdCA9PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIFJlc2V0IHdoZW4gbW90aW9uIGNoYW5nZWRcblxuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICggLy8gQ2FuY2VsIGFwcGVhclxuICAgIHN0YXR1cyA9PT0gU1RBVFVTX0FQUEVBUiAmJiAhbW90aW9uQXBwZWFyIHx8IC8vIENhbmNlbCBlbnRlclxuICAgIHN0YXR1cyA9PT0gU1RBVFVTX0VOVEVSICYmICFtb3Rpb25FbnRlciB8fCAvLyBDYW5jZWwgbGVhdmVcbiAgICBzdGF0dXMgPT09IFNUQVRVU19MRUFWRSAmJiAhbW90aW9uTGVhdmUpIHtcbiAgICAgIHNldFN0YXR1cyhTVEFUVVNfTk9ORSk7XG4gICAgfVxuICB9LCBbbW90aW9uQXBwZWFyLCBtb3Rpb25FbnRlciwgbW90aW9uTGVhdmVdKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KGRlYWRsaW5lUmVmLmN1cnJlbnQpO1xuICAgICAgZGVzdHJveWVkUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIH07XG4gIH0sIFtdKTsgLy8gVHJpZ2dlciBgb25WaXNpYmxlQ2hhbmdlZGBcblxuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChhc3luY1Zpc2libGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0dXMgPT09IFNUQVRVU19OT05FKSB7XG4gICAgICBvblZpc2libGVDaGFuZ2VkID09PSBudWxsIHx8IG9uVmlzaWJsZUNoYW5nZWQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uVmlzaWJsZUNoYW5nZWQoYXN5bmNWaXNpYmxlKTtcbiAgICB9XG4gIH0sIFthc3luY1Zpc2libGUsIHN0YXR1c10pOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09IFN0eWxlcyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIG1lcmdlZFN0eWxlID0gc3R5bGU7XG5cbiAgaWYgKGV2ZW50SGFuZGxlcnNbU1RFUF9QUkVQQVJFXSAmJiBzdGVwID09PSBTVEVQX1NUQVJUKSB7XG4gICAgbWVyZ2VkU3R5bGUgPSBfb2JqZWN0U3ByZWFkKHtcbiAgICAgIHRyYW5zaXRpb246ICdub25lJ1xuICAgIH0sIG1lcmdlZFN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBbc3RhdHVzLCBzdGVwLCBtZXJnZWRTdHlsZSwgYXN5bmNWaXNpYmxlICE9PSBudWxsICYmIGFzeW5jVmlzaWJsZSAhPT0gdm9pZCAwID8gYXN5bmNWaXNpYmxlIDogdmlzaWJsZV07XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgYW5pbWF0aW9uRW5kTmFtZSwgdHJhbnNpdGlvbkVuZE5hbWUgfSBmcm9tICcuLi91dGlsL21vdGlvbic7XG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHZhciBjYWNoZUVsZW1lbnRSZWYgPSB1c2VSZWYoKTsgLy8gQ2FjaGUgY2FsbGJhY2tcblxuICB2YXIgY2FsbGJhY2tSZWYgPSB1c2VSZWYoY2FsbGJhY2spO1xuICBjYWxsYmFja1JlZi5jdXJyZW50ID0gY2FsbGJhY2s7IC8vIEludGVybmFsIG1vdGlvbiBldmVudCBoYW5kbGVyXG5cbiAgdmFyIG9uSW50ZXJuYWxNb3Rpb25FbmQgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBjYWxsYmFja1JlZi5jdXJyZW50KGV2ZW50KTtcbiAgfSwgW10pOyAvLyBSZW1vdmUgZXZlbnRzXG5cbiAgZnVuY3Rpb24gcmVtb3ZlTW90aW9uRXZlbnRzKGVsZW1lbnQpIHtcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmROYW1lLCBvbkludGVybmFsTW90aW9uRW5kKTtcbiAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihhbmltYXRpb25FbmROYW1lLCBvbkludGVybmFsTW90aW9uRW5kKTtcbiAgICB9XG4gIH0gLy8gUGF0Y2ggZXZlbnRzXG5cblxuICBmdW5jdGlvbiBwYXRjaE1vdGlvbkV2ZW50cyhlbGVtZW50KSB7XG4gICAgaWYgKGNhY2hlRWxlbWVudFJlZi5jdXJyZW50ICYmIGNhY2hlRWxlbWVudFJlZi5jdXJyZW50ICE9PSBlbGVtZW50KSB7XG4gICAgICByZW1vdmVNb3Rpb25FdmVudHMoY2FjaGVFbGVtZW50UmVmLmN1cnJlbnQpO1xuICAgIH1cblxuICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQgIT09IGNhY2hlRWxlbWVudFJlZi5jdXJyZW50KSB7XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZE5hbWUsIG9uSW50ZXJuYWxNb3Rpb25FbmQpO1xuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGFuaW1hdGlvbkVuZE5hbWUsIG9uSW50ZXJuYWxNb3Rpb25FbmQpOyAvLyBTYXZlIGFzIGNhY2hlIGluIGNhc2UgZG9tIHJlbW92ZWQgdHJpZ2dlciBieSBgbW90aW9uRGVhZGxpbmVgXG5cbiAgICAgIGNhY2hlRWxlbWVudFJlZi5jdXJyZW50ID0gZWxlbWVudDtcbiAgICB9XG4gIH0gLy8gQ2xlYW4gdXAgd2hlbiByZW1vdmVkXG5cblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZW1vdmVNb3Rpb25FdmVudHMoY2FjaGVFbGVtZW50UmVmLmN1cnJlbnQpO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgcmV0dXJuIFtwYXRjaE1vdGlvbkV2ZW50cywgcmVtb3ZlTW90aW9uRXZlbnRzXTtcbn0pOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCByYWYgZnJvbSBcInJjLXV0aWwvZXMvcmFmXCI7XG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKCkge1xuICB2YXIgbmV4dEZyYW1lUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuXG4gIGZ1bmN0aW9uIGNhbmNlbE5leHRGcmFtZSgpIHtcbiAgICByYWYuY2FuY2VsKG5leHRGcmFtZVJlZi5jdXJyZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5leHRGcmFtZShjYWxsYmFjaykge1xuICAgIHZhciBkZWxheSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMjtcbiAgICBjYW5jZWxOZXh0RnJhbWUoKTtcbiAgICB2YXIgbmV4dEZyYW1lSWQgPSByYWYoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGRlbGF5IDw9IDEpIHtcbiAgICAgICAgY2FsbGJhY2soe1xuICAgICAgICAgIGlzQ2FuY2VsZWQ6IGZ1bmN0aW9uIGlzQ2FuY2VsZWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dEZyYW1lSWQgIT09IG5leHRGcmFtZVJlZi5jdXJyZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RnJhbWUoY2FsbGJhY2ssIGRlbGF5IC0gMSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbmV4dEZyYW1lUmVmLmN1cnJlbnQgPSBuZXh0RnJhbWVJZDtcbiAgfVxuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbmNlbE5leHRGcmFtZSgpO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgcmV0dXJuIFtuZXh0RnJhbWUsIGNhbmNlbE5leHRGcmFtZV07XG59KTsiLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzXCI7XG5pbXBvcnQgX2NyZWF0ZVN1cGVyIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVTdXBlclwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG52YXIgRG9tV3JhcHBlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRG9tV3JhcHBlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihEb21XcmFwcGVyKTtcblxuICBmdW5jdGlvbiBEb21XcmFwcGVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEb21XcmFwcGVyKTtcblxuICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEb21XcmFwcGVyLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERvbVdyYXBwZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IERvbVdyYXBwZXI7IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcblxuLyogZXNsaW50LWRpc2FibGUgcmVhY3QvZGVmYXVsdC1wcm9wcy1tYXRjaC1wcm9wLXR5cGVzLCByZWFjdC9uby1tdWx0aS1jb21wLCByZWFjdC9wcm9wLXR5cGVzICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZmluZERPTU5vZGUgZnJvbSBcInJjLXV0aWwvZXMvRG9tL2ZpbmRET01Ob2RlXCI7XG5pbXBvcnQgeyBmaWxsUmVmIH0gZnJvbSBcInJjLXV0aWwvZXMvcmVmXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IGdldFRyYW5zaXRpb25OYW1lLCBzdXBwb3J0VHJhbnNpdGlvbiB9IGZyb20gJy4vdXRpbC9tb3Rpb24nO1xuaW1wb3J0IHsgU1RBVFVTX05PTkUsIFNURVBfUFJFUEFSRSwgU1RFUF9TVEFSVCB9IGZyb20gJy4vaW50ZXJmYWNlJztcbmltcG9ydCB1c2VTdGF0dXMgZnJvbSAnLi9ob29rcy91c2VTdGF0dXMnO1xuaW1wb3J0IERvbVdyYXBwZXIgZnJvbSAnLi9Eb21XcmFwcGVyJztcbmltcG9ydCB7IGlzQWN0aXZlIH0gZnJvbSAnLi9ob29rcy91c2VTdGVwUXVldWUnO1xuLyoqXG4gKiBgdHJhbnNpdGlvblN1cHBvcnRgIGlzIHVzZWQgZm9yIG5vbmUgdHJhbnNpdGlvbiB0ZXN0IGNhc2UuXG4gKiBEZWZhdWx0IHdlIHVzZSBicm93c2VyIHRyYW5zaXRpb24gZXZlbnQgc3VwcG9ydCBjaGVjay5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2VuQ1NTTW90aW9uKGNvbmZpZykge1xuICB2YXIgdHJhbnNpdGlvblN1cHBvcnQgPSBjb25maWc7XG5cbiAgaWYgKF90eXBlb2YoY29uZmlnKSA9PT0gJ29iamVjdCcpIHtcbiAgICB0cmFuc2l0aW9uU3VwcG9ydCA9IGNvbmZpZy50cmFuc2l0aW9uU3VwcG9ydDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3VwcG9ydFRyYW5zaXRpb24ocHJvcHMpIHtcbiAgICByZXR1cm4gISEocHJvcHMubW90aW9uTmFtZSAmJiB0cmFuc2l0aW9uU3VwcG9ydCk7XG4gIH1cblxuICB2YXIgQ1NTTW90aW9uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgICB2YXIgX3Byb3BzJHZpc2libGUgPSBwcm9wcy52aXNpYmxlLFxuICAgICAgICB2aXNpYmxlID0gX3Byb3BzJHZpc2libGUgPT09IHZvaWQgMCA/IHRydWUgOiBfcHJvcHMkdmlzaWJsZSxcbiAgICAgICAgX3Byb3BzJHJlbW92ZU9uTGVhdmUgPSBwcm9wcy5yZW1vdmVPbkxlYXZlLFxuICAgICAgICByZW1vdmVPbkxlYXZlID0gX3Byb3BzJHJlbW92ZU9uTGVhdmUgPT09IHZvaWQgMCA/IHRydWUgOiBfcHJvcHMkcmVtb3ZlT25MZWF2ZSxcbiAgICAgICAgZm9yY2VSZW5kZXIgPSBwcm9wcy5mb3JjZVJlbmRlcixcbiAgICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgbW90aW9uTmFtZSA9IHByb3BzLm1vdGlvbk5hbWUsXG4gICAgICAgIGxlYXZlZENsYXNzTmFtZSA9IHByb3BzLmxlYXZlZENsYXNzTmFtZSxcbiAgICAgICAgZXZlbnRQcm9wcyA9IHByb3BzLmV2ZW50UHJvcHM7XG4gICAgdmFyIHN1cHBvcnRNb3Rpb24gPSBpc1N1cHBvcnRUcmFuc2l0aW9uKHByb3BzKTsgLy8gUmVmIHRvIHRoZSByZWFjdCBub2RlLCBpdCBtYXkgYmUgYSBIVE1MRWxlbWVudFxuXG4gICAgdmFyIG5vZGVSZWYgPSB1c2VSZWYoKTsgLy8gUmVmIHRvIHRoZSBkb20gd3JhcHBlciBpbiBjYXNlIHJlZiBjYW4gbm90IHBhc3MgdG8gSFRNTEVsZW1lbnRcblxuICAgIHZhciB3cmFwcGVyTm9kZVJlZiA9IHVzZVJlZigpO1xuXG4gICAgZnVuY3Rpb24gZ2V0RG9tRWxlbWVudCgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBmaW5kRE9NTm9kZShub2RlUmVmLmN1cnJlbnQgfHwgd3JhcHBlck5vZGVSZWYuY3VycmVudCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIE9ubHkgaGFwcGVuIHdoZW4gYG1vdGlvbkRlYWRsaW5lYCB0cmlnZ2VyIGJ1dCBlbGVtZW50IHJlbW92ZWQuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBfdXNlU3RhdHVzID0gdXNlU3RhdHVzKHN1cHBvcnRNb3Rpb24sIHZpc2libGUsIGdldERvbUVsZW1lbnQsIHByb3BzKSxcbiAgICAgICAgX3VzZVN0YXR1czIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdHVzLCA0KSxcbiAgICAgICAgc3RhdHVzID0gX3VzZVN0YXR1czJbMF0sXG4gICAgICAgIHN0YXR1c1N0ZXAgPSBfdXNlU3RhdHVzMlsxXSxcbiAgICAgICAgc3RhdHVzU3R5bGUgPSBfdXNlU3RhdHVzMlsyXSxcbiAgICAgICAgbWVyZ2VkVmlzaWJsZSA9IF91c2VTdGF0dXMyWzNdOyAvLyA9PT09PT09PT09PT09PT09PT09PT09IFJlZnMgPT09PT09PT09PT09PT09PT09PT09PVxuXG5cbiAgICB2YXIgb3JpZ2luUmVmID0gdXNlUmVmKHJlZik7XG4gICAgb3JpZ2luUmVmLmN1cnJlbnQgPSByZWY7XG4gICAgdmFyIHNldE5vZGVSZWYgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAobm9kZSkge1xuICAgICAgbm9kZVJlZi5jdXJyZW50ID0gbm9kZTtcbiAgICAgIGZpbGxSZWYob3JpZ2luUmVmLmN1cnJlbnQsIG5vZGUpO1xuICAgIH0sIFtdKTsgLy8gPT09PT09PT09PT09PT09PT09PT09IFJlbmRlciA9PT09PT09PT09PT09PT09PT09PT1cblxuICAgIHZhciBtb3Rpb25DaGlsZHJlbjtcblxuICAgIHZhciBtZXJnZWRQcm9wcyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZXZlbnRQcm9wcyksIHt9LCB7XG4gICAgICB2aXNpYmxlOiB2aXNpYmxlXG4gICAgfSk7XG5cbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICAvLyBObyBjaGlsZHJlblxuICAgICAgbW90aW9uQ2hpbGRyZW4gPSBudWxsO1xuICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSBTVEFUVVNfTk9ORSB8fCAhaXNTdXBwb3J0VHJhbnNpdGlvbihwcm9wcykpIHtcbiAgICAgIC8vIFN0YWJsZSBjaGlsZHJlblxuICAgICAgaWYgKG1lcmdlZFZpc2libGUpIHtcbiAgICAgICAgbW90aW9uQ2hpbGRyZW4gPSBjaGlsZHJlbihfb2JqZWN0U3ByZWFkKHt9LCBtZXJnZWRQcm9wcyksIHNldE5vZGVSZWYpO1xuICAgICAgfSBlbHNlIGlmICghcmVtb3ZlT25MZWF2ZSkge1xuICAgICAgICBtb3Rpb25DaGlsZHJlbiA9IGNoaWxkcmVuKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbWVyZ2VkUHJvcHMpLCB7fSwge1xuICAgICAgICAgIGNsYXNzTmFtZTogbGVhdmVkQ2xhc3NOYW1lXG4gICAgICAgIH0pLCBzZXROb2RlUmVmKTtcbiAgICAgIH0gZWxzZSBpZiAoZm9yY2VSZW5kZXIpIHtcbiAgICAgICAgbW90aW9uQ2hpbGRyZW4gPSBjaGlsZHJlbihfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1lcmdlZFByb3BzKSwge30sIHtcbiAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICAgICAgfVxuICAgICAgICB9KSwgc2V0Tm9kZVJlZik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtb3Rpb25DaGlsZHJlbiA9IG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfY2xhc3NOYW1lcztcblxuICAgICAgLy8gSW4gbW90aW9uXG4gICAgICB2YXIgc3RhdHVzU3VmZml4O1xuXG4gICAgICBpZiAoc3RhdHVzU3RlcCA9PT0gU1RFUF9QUkVQQVJFKSB7XG4gICAgICAgIHN0YXR1c1N1ZmZpeCA9ICdwcmVwYXJlJztcbiAgICAgIH0gZWxzZSBpZiAoaXNBY3RpdmUoc3RhdHVzU3RlcCkpIHtcbiAgICAgICAgc3RhdHVzU3VmZml4ID0gJ2FjdGl2ZSc7XG4gICAgICB9IGVsc2UgaWYgKHN0YXR1c1N0ZXAgPT09IFNURVBfU1RBUlQpIHtcbiAgICAgICAgc3RhdHVzU3VmZml4ID0gJ3N0YXJ0JztcbiAgICAgIH1cblxuICAgICAgbW90aW9uQ2hpbGRyZW4gPSBjaGlsZHJlbihfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1lcmdlZFByb3BzKSwge30sIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGdldFRyYW5zaXRpb25OYW1lKG1vdGlvbk5hbWUsIHN0YXR1cyksIChfY2xhc3NOYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIGdldFRyYW5zaXRpb25OYW1lKG1vdGlvbk5hbWUsIFwiXCIuY29uY2F0KHN0YXR1cywgXCItXCIpLmNvbmNhdChzdGF0dXNTdWZmaXgpKSwgc3RhdHVzU3VmZml4KSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBtb3Rpb25OYW1lLCB0eXBlb2YgbW90aW9uTmFtZSA9PT0gJ3N0cmluZycpLCBfY2xhc3NOYW1lcykpLFxuICAgICAgICBzdHlsZTogc3RhdHVzU3R5bGVcbiAgICAgIH0pLCBzZXROb2RlUmVmKTtcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRG9tV3JhcHBlciwge1xuICAgICAgcmVmOiB3cmFwcGVyTm9kZVJlZlxuICAgIH0sIG1vdGlvbkNoaWxkcmVuKTtcbiAgfSk7XG4gIENTU01vdGlvbi5kaXNwbGF5TmFtZSA9ICdDU1NNb3Rpb24nO1xuICByZXR1cm4gQ1NTTW90aW9uO1xufVxuZXhwb3J0IGRlZmF1bHQgZ2VuQ1NTTW90aW9uKHN1cHBvcnRUcmFuc2l0aW9uKTsiLCJpbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbi8qKlxuICogUmV0dXJuIGlmIGEgbm9kZSBpcyBhIERPTSBub2RlLiBFbHNlIHdpbGwgcmV0dXJuIGJ5IGBmaW5kRE9NTm9kZWBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5kRE9NTm9kZShub2RlKSB7XG4gIGlmIChub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdERPTS5maW5kRE9NTm9kZShub2RlKTtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgeyBpc01lbW8gfSBmcm9tICdyZWFjdC1pcyc7XG5leHBvcnQgZnVuY3Rpb24gZmlsbFJlZihyZWYsIG5vZGUpIHtcbiAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZWYobm9kZSk7XG4gIH0gZWxzZSBpZiAoX3R5cGVvZihyZWYpID09PSAnb2JqZWN0JyAmJiByZWYgJiYgJ2N1cnJlbnQnIGluIHJlZikge1xuICAgIHJlZi5jdXJyZW50ID0gbm9kZTtcbiAgfVxufVxuLyoqXG4gKiBNZXJnZSByZWZzIGludG8gb25lIHJlZiBmdW5jdGlvbiB0byBzdXBwb3J0IHJlZiBwYXNzaW5nLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wb3NlUmVmKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVmcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICByZWZzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmVmcy5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIGZpbGxSZWYocmVmLCBub2RlKTtcbiAgICB9KTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzdXBwb3J0UmVmKG5vZGVPckNvbXBvbmVudCkge1xuICB2YXIgX3R5cGUkcHJvdG90eXBlLCBfbm9kZU9yQ29tcG9uZW50JHByb3Q7XG5cbiAgdmFyIHR5cGUgPSBpc01lbW8obm9kZU9yQ29tcG9uZW50KSA/IG5vZGVPckNvbXBvbmVudC50eXBlLnR5cGUgOiBub2RlT3JDb21wb25lbnQudHlwZTsgLy8gRnVuY3Rpb24gY29tcG9uZW50IG5vZGVcblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgJiYgISgoX3R5cGUkcHJvdG90eXBlID0gdHlwZS5wcm90b3R5cGUpID09PSBudWxsIHx8IF90eXBlJHByb3RvdHlwZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3R5cGUkcHJvdG90eXBlLnJlbmRlcikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gQ2xhc3MgY29tcG9uZW50XG5cblxuICBpZiAodHlwZW9mIG5vZGVPckNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyAmJiAhKChfbm9kZU9yQ29tcG9uZW50JHByb3QgPSBub2RlT3JDb21wb25lbnQucHJvdG90eXBlKSA9PT0gbnVsbCB8fCBfbm9kZU9yQ29tcG9uZW50JHByb3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ub2RlT3JDb21wb25lbnQkcHJvdC5yZW5kZXIpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG4vKiBlc2xpbnQtZW5hYmxlICovIiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmV4cG9ydCB2YXIgU1RBVFVTX0FERCA9ICdhZGQnO1xuZXhwb3J0IHZhciBTVEFUVVNfS0VFUCA9ICdrZWVwJztcbmV4cG9ydCB2YXIgU1RBVFVTX1JFTU9WRSA9ICdyZW1vdmUnO1xuZXhwb3J0IHZhciBTVEFUVVNfUkVNT1ZFRCA9ICdyZW1vdmVkJztcbmV4cG9ydCBmdW5jdGlvbiB3cmFwS2V5VG9PYmplY3Qoa2V5KSB7XG4gIHZhciBrZXlPYmo7XG5cbiAgaWYgKGtleSAmJiBfdHlwZW9mKGtleSkgPT09ICdvYmplY3QnICYmICdrZXknIGluIGtleSkge1xuICAgIGtleU9iaiA9IGtleTtcbiAgfSBlbHNlIHtcbiAgICBrZXlPYmogPSB7XG4gICAgICBrZXk6IGtleVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBrZXlPYmopLCB7fSwge1xuICAgIGtleTogU3RyaW5nKGtleU9iai5rZXkpXG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlS2V5cygpIHtcbiAgdmFyIGtleXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuICByZXR1cm4ga2V5cy5tYXAod3JhcEtleVRvT2JqZWN0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkaWZmS2V5cygpIHtcbiAgdmFyIHByZXZLZXlzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcbiAgdmFyIGN1cnJlbnRLZXlzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTtcbiAgdmFyIGxpc3QgPSBbXTtcbiAgdmFyIGN1cnJlbnRJbmRleCA9IDA7XG4gIHZhciBjdXJyZW50TGVuID0gY3VycmVudEtleXMubGVuZ3RoO1xuICB2YXIgcHJldktleU9iamVjdHMgPSBwYXJzZUtleXMocHJldktleXMpO1xuICB2YXIgY3VycmVudEtleU9iamVjdHMgPSBwYXJzZUtleXMoY3VycmVudEtleXMpOyAvLyBDaGVjayBwcmV2IGtleXMgdG8gaW5zZXJ0IG9yIGtlZXBcblxuICBwcmV2S2V5T2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXlPYmopIHtcbiAgICB2YXIgaGl0ID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gY3VycmVudEluZGV4OyBpIDwgY3VycmVudExlbjsgaSArPSAxKSB7XG4gICAgICB2YXIgY3VycmVudEtleU9iaiA9IGN1cnJlbnRLZXlPYmplY3RzW2ldO1xuXG4gICAgICBpZiAoY3VycmVudEtleU9iai5rZXkgPT09IGtleU9iai5rZXkpIHtcbiAgICAgICAgLy8gTmV3IGFkZGVkIGtleXMgc2hvdWxkIGFkZCBiZWZvcmUgY3VycmVudCBrZXlcbiAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA8IGkpIHtcbiAgICAgICAgICBsaXN0ID0gbGlzdC5jb25jYXQoY3VycmVudEtleU9iamVjdHMuc2xpY2UoY3VycmVudEluZGV4LCBpKS5tYXAoZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgb2JqKSwge30sIHtcbiAgICAgICAgICAgICAgc3RhdHVzOiBTVEFUVVNfQUREXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgY3VycmVudEluZGV4ID0gaTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpc3QucHVzaChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGN1cnJlbnRLZXlPYmopLCB7fSwge1xuICAgICAgICAgIHN0YXR1czogU1RBVFVTX0tFRVBcbiAgICAgICAgfSkpO1xuICAgICAgICBjdXJyZW50SW5kZXggKz0gMTtcbiAgICAgICAgaGl0ID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSAvLyBJZiBub3QgaGl0LCBpdCBtZWFucyBrZXkgaXMgcmVtb3ZlZFxuXG5cbiAgICBpZiAoIWhpdCkge1xuICAgICAgbGlzdC5wdXNoKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwga2V5T2JqKSwge30sIHtcbiAgICAgICAgc3RhdHVzOiBTVEFUVVNfUkVNT1ZFXG4gICAgICB9KSk7XG4gICAgfVxuICB9KTsgLy8gQWRkIHJlc3QgdG8gdGhlIGxpc3RcblxuICBpZiAoY3VycmVudEluZGV4IDwgY3VycmVudExlbikge1xuICAgIGxpc3QgPSBsaXN0LmNvbmNhdChjdXJyZW50S2V5T2JqZWN0cy5zbGljZShjdXJyZW50SW5kZXgpLm1hcChmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBvYmopLCB7fSwge1xuICAgICAgICBzdGF0dXM6IFNUQVRVU19BRERcbiAgICAgIH0pO1xuICAgIH0pKTtcbiAgfVxuICAvKipcbiAgICogTWVyZ2Ugc2FtZSBrZXkgd2hlbiBpdCByZW1vdmUgYW5kIGFkZCBhZ2FpbjpcbiAgICogICAgWzEgLSBhZGQsIDIgLSBrZWVwLCAxIC0gcmVtb3ZlXSAtPiBbMSAtIGtlZXAsIDIgLSBrZWVwXVxuICAgKi9cblxuXG4gIHZhciBrZXlzID0ge307XG4gIGxpc3QuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBrZXkgPSBfcmVmLmtleTtcbiAgICBrZXlzW2tleV0gPSAoa2V5c1trZXldIHx8IDApICsgMTtcbiAgfSk7XG4gIHZhciBkdXBsaWNhdGVkS2V5cyA9IE9iamVjdC5rZXlzKGtleXMpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGtleXNba2V5XSA+IDE7XG4gIH0pO1xuICBkdXBsaWNhdGVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChtYXRjaEtleSkge1xuICAgIC8vIFJlbW92ZSBgU1RBVFVTX1JFTU9WRWAgbm9kZS5cbiAgICBsaXN0ID0gbGlzdC5maWx0ZXIoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICB2YXIga2V5ID0gX3JlZjIua2V5LFxuICAgICAgICAgIHN0YXR1cyA9IF9yZWYyLnN0YXR1cztcbiAgICAgIHJldHVybiBrZXkgIT09IG1hdGNoS2V5IHx8IHN0YXR1cyAhPT0gU1RBVFVTX1JFTU9WRTtcbiAgICB9KTsgLy8gVXBkYXRlIGBTVEFUVVNfQUREYCB0byBgU1RBVFVTX0tFRVBgXG5cbiAgICBsaXN0LmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLmtleSA9PT0gbWF0Y2hLZXkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIG5vZGUuc3RhdHVzID0gU1RBVFVTX0tFRVA7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gbGlzdDtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNcIjtcbmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZVN1cGVyXCI7XG5cbi8qIGVzbGludCByZWFjdC9wcm9wLXR5cGVzOiAwICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgT3JpZ2luQ1NTTW90aW9uIGZyb20gJy4vQ1NTTW90aW9uJztcbmltcG9ydCB7IHN1cHBvcnRUcmFuc2l0aW9uIH0gZnJvbSAnLi91dGlsL21vdGlvbic7XG5pbXBvcnQgeyBTVEFUVVNfQURELCBTVEFUVVNfS0VFUCwgU1RBVFVTX1JFTU9WRSwgU1RBVFVTX1JFTU9WRUQsIGRpZmZLZXlzLCBwYXJzZUtleXMgfSBmcm9tICcuL3V0aWwvZGlmZic7XG52YXIgTU9USU9OX1BST1BfTkFNRVMgPSBbJ2V2ZW50UHJvcHMnLCAndmlzaWJsZScsICdjaGlsZHJlbicsICdtb3Rpb25OYW1lJywgJ21vdGlvbkFwcGVhcicsICdtb3Rpb25FbnRlcicsICdtb3Rpb25MZWF2ZScsICdtb3Rpb25MZWF2ZUltbWVkaWF0ZWx5JywgJ21vdGlvbkRlYWRsaW5lJywgJ3JlbW92ZU9uTGVhdmUnLCAnbGVhdmVkQ2xhc3NOYW1lJywgJ29uQXBwZWFyU3RhcnQnLCAnb25BcHBlYXJBY3RpdmUnLCAnb25BcHBlYXJFbmQnLCAnb25FbnRlclN0YXJ0JywgJ29uRW50ZXJBY3RpdmUnLCAnb25FbnRlckVuZCcsICdvbkxlYXZlU3RhcnQnLCAnb25MZWF2ZUFjdGl2ZScsICdvbkxlYXZlRW5kJ107XG4vKipcbiAqIEdlbmVyYXRlIGEgQ1NTTW90aW9uTGlzdCBjb21wb25lbnQgd2l0aCBjb25maWdcbiAqIEBwYXJhbSB0cmFuc2l0aW9uU3VwcG9ydCBObyBuZWVkIHNpbmNlIENTU01vdGlvbkxpc3Qgbm8gbG9uZ2VyIGRlcGVuZHMgb24gdHJhbnNpdGlvbiBzdXBwb3J0XG4gKiBAcGFyYW0gQ1NTTW90aW9uIENTU01vdGlvbiBjb21wb25lbnRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2VuQ1NTTW90aW9uTGlzdCh0cmFuc2l0aW9uU3VwcG9ydCkge1xuICB2YXIgQ1NTTW90aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBPcmlnaW5DU1NNb3Rpb247XG5cbiAgdmFyIENTU01vdGlvbkxpc3QgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoQ1NTTW90aW9uTGlzdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKENTU01vdGlvbkxpc3QpO1xuXG4gICAgZnVuY3Rpb24gQ1NTTW90aW9uTGlzdCgpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENTU01vdGlvbkxpc3QpO1xuXG4gICAgICBfdGhpcyA9IF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgIGtleUVudGl0aWVzOiBbXVxuICAgICAgfTtcblxuICAgICAgX3RoaXMucmVtb3ZlS2V5ID0gZnVuY3Rpb24gKHJlbW92ZUtleSkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgIHZhciBrZXlFbnRpdGllcyA9IF9yZWYua2V5RW50aXRpZXM7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGtleUVudGl0aWVzOiBrZXlFbnRpdGllcy5tYXAoZnVuY3Rpb24gKGVudGl0eSkge1xuICAgICAgICAgICAgICBpZiAoZW50aXR5LmtleSAhPT0gcmVtb3ZlS2V5KSByZXR1cm4gZW50aXR5O1xuICAgICAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBlbnRpdHkpLCB7fSwge1xuICAgICAgICAgICAgICAgIHN0YXR1czogU1RBVFVTX1JFTU9WRURcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhDU1NNb3Rpb25MaXN0LCBbe1xuICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGtleUVudGl0aWVzID0gdGhpcy5zdGF0ZS5rZXlFbnRpdGllcztcblxuICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICAgIF9vblZpc2libGVDaGFuZ2VkID0gX3RoaXMkcHJvcHMub25WaXNpYmxlQ2hhbmdlZCxcbiAgICAgICAgICAgIHJlc3RQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfdGhpcyRwcm9wcywgW1wiY29tcG9uZW50XCIsIFwiY2hpbGRyZW5cIiwgXCJvblZpc2libGVDaGFuZ2VkXCJdKTtcblxuICAgICAgICB2YXIgQ29tcG9uZW50ID0gY29tcG9uZW50IHx8IFJlYWN0LkZyYWdtZW50O1xuICAgICAgICB2YXIgbW90aW9uUHJvcHMgPSB7fTtcbiAgICAgICAgTU9USU9OX1BST1BfTkFNRVMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgIG1vdGlvblByb3BzW3Byb3BdID0gcmVzdFByb3BzW3Byb3BdO1xuICAgICAgICAgIGRlbGV0ZSByZXN0UHJvcHNbcHJvcF07XG4gICAgICAgIH0pO1xuICAgICAgICBkZWxldGUgcmVzdFByb3BzLmtleXM7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIE9iamVjdC5hc3NpZ24oe30sIHJlc3RQcm9wcyksIGtleUVudGl0aWVzLm1hcChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgICAgICB2YXIgc3RhdHVzID0gX3JlZjIuc3RhdHVzLFxuICAgICAgICAgICAgICBldmVudFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYyLCBbXCJzdGF0dXNcIl0pO1xuXG4gICAgICAgICAgdmFyIHZpc2libGUgPSBzdGF0dXMgPT09IFNUQVRVU19BREQgfHwgc3RhdHVzID09PSBTVEFUVVNfS0VFUDtcbiAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ1NTTW90aW9uLCBPYmplY3QuYXNzaWduKHt9LCBtb3Rpb25Qcm9wcywge1xuICAgICAgICAgICAga2V5OiBldmVudFByb3BzLmtleSxcbiAgICAgICAgICAgIHZpc2libGU6IHZpc2libGUsXG4gICAgICAgICAgICBldmVudFByb3BzOiBldmVudFByb3BzLFxuICAgICAgICAgICAgb25WaXNpYmxlQ2hhbmdlZDogZnVuY3Rpb24gb25WaXNpYmxlQ2hhbmdlZChjaGFuZ2VkVmlzaWJsZSkge1xuICAgICAgICAgICAgICBfb25WaXNpYmxlQ2hhbmdlZCA9PT0gbnVsbCB8fCBfb25WaXNpYmxlQ2hhbmdlZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29uVmlzaWJsZUNoYW5nZWQoY2hhbmdlZFZpc2libGUsIHtcbiAgICAgICAgICAgICAgICBrZXk6IGV2ZW50UHJvcHMua2V5XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGlmICghY2hhbmdlZFZpc2libGUpIHtcbiAgICAgICAgICAgICAgICBfdGhpczIucmVtb3ZlS2V5KGV2ZW50UHJvcHMua2V5KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLCBjaGlsZHJlbik7XG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9XSwgW3tcbiAgICAgIGtleTogXCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZjMsIF9yZWY0KSB7XG4gICAgICAgIHZhciBrZXlzID0gX3JlZjMua2V5cztcbiAgICAgICAgdmFyIGtleUVudGl0aWVzID0gX3JlZjQua2V5RW50aXRpZXM7XG4gICAgICAgIHZhciBwYXJzZWRLZXlPYmplY3RzID0gcGFyc2VLZXlzKGtleXMpO1xuICAgICAgICB2YXIgbWl4ZWRLZXlFbnRpdGllcyA9IGRpZmZLZXlzKGtleUVudGl0aWVzLCBwYXJzZWRLZXlPYmplY3RzKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBrZXlFbnRpdGllczogbWl4ZWRLZXlFbnRpdGllcy5maWx0ZXIoZnVuY3Rpb24gKGVudGl0eSkge1xuICAgICAgICAgICAgdmFyIHByZXZFbnRpdHkgPSBrZXlFbnRpdGllcy5maW5kKGZ1bmN0aW9uIChfcmVmNSkge1xuICAgICAgICAgICAgICB2YXIga2V5ID0gX3JlZjUua2V5O1xuICAgICAgICAgICAgICByZXR1cm4gZW50aXR5LmtleSA9PT0ga2V5O1xuICAgICAgICAgICAgfSk7IC8vIFJlbW92ZSBpZiBhbHJlYWR5IG1hcmsgYXMgcmVtb3ZlZFxuXG4gICAgICAgICAgICBpZiAocHJldkVudGl0eSAmJiBwcmV2RW50aXR5LnN0YXR1cyA9PT0gU1RBVFVTX1JFTU9WRUQgJiYgZW50aXR5LnN0YXR1cyA9PT0gU1RBVFVTX1JFTU9WRSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIENTU01vdGlvbkxpc3Q7XG4gIH0oUmVhY3QuQ29tcG9uZW50KTtcblxuICBDU1NNb3Rpb25MaXN0LmRlZmF1bHRQcm9wcyA9IHtcbiAgICBjb21wb25lbnQ6ICdkaXYnXG4gIH07XG4gIHJldHVybiBDU1NNb3Rpb25MaXN0O1xufVxuZXhwb3J0IGRlZmF1bHQgZ2VuQ1NTTW90aW9uTGlzdChzdXBwb3J0VHJhbnNpdGlvbik7IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNcIjtcbmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZVN1cGVyXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG52YXIgTm90aWNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhOb3RpY2UsIF9Db21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTm90aWNlKTtcblxuICBmdW5jdGlvbiBOb3RpY2UoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5vdGljZSk7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIF90aGlzLmNsb3NlVGltZXIgPSBudWxsO1xuXG4gICAgX3RoaXMuY2xvc2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKGUpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY2xlYXJDbG9zZVRpbWVyKCk7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIG9uQ2xvc2UgPSBfdGhpcyRwcm9wcy5vbkNsb3NlLFxuICAgICAgICAgIG5vdGljZUtleSA9IF90aGlzJHByb3BzLm5vdGljZUtleTtcblxuICAgICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgICAgb25DbG9zZShub3RpY2VLZXkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5zdGFydENsb3NlVGltZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuZHVyYXRpb24pIHtcbiAgICAgICAgX3RoaXMuY2xvc2VUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICB9LCBfdGhpcy5wcm9wcy5kdXJhdGlvbiAqIDEwMDApO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5jbGVhckNsb3NlVGltZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMuY2xvc2VUaW1lcikge1xuICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMuY2xvc2VUaW1lcik7XG4gICAgICAgIF90aGlzLmNsb3NlVGltZXIgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTm90aWNlLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuc3RhcnRDbG9zZVRpbWVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5kdXJhdGlvbiAhPT0gcHJldlByb3BzLmR1cmF0aW9uIHx8IHRoaXMucHJvcHMudXBkYXRlTWFyayAhPT0gcHJldlByb3BzLnVwZGF0ZU1hcmspIHtcbiAgICAgICAgdGhpcy5yZXN0YXJ0Q2xvc2VUaW1lcigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuY2xlYXJDbG9zZVRpbWVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlc3RhcnRDbG9zZVRpbWVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc3RhcnRDbG9zZVRpbWVyKCkge1xuICAgICAgdGhpcy5jbGVhckNsb3NlVGltZXIoKTtcbiAgICAgIHRoaXMuc3RhcnRDbG9zZVRpbWVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgcHJlZml4Q2xzID0gX3RoaXMkcHJvcHMyLnByZWZpeENscyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICAgIGNsb3NhYmxlID0gX3RoaXMkcHJvcHMyLmNsb3NhYmxlLFxuICAgICAgICAgIGNsb3NlSWNvbiA9IF90aGlzJHByb3BzMi5jbG9zZUljb24sXG4gICAgICAgICAgc3R5bGUgPSBfdGhpcyRwcm9wczIuc3R5bGUsXG4gICAgICAgICAgb25DbGljayA9IF90aGlzJHByb3BzMi5vbkNsaWNrLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMyLmNoaWxkcmVuLFxuICAgICAgICAgIGhvbGRlciA9IF90aGlzJHByb3BzMi5ob2xkZXI7XG4gICAgICB2YXIgY29tcG9uZW50Q2xhc3MgPSBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLW5vdGljZVwiKTtcbiAgICAgIHZhciBkYXRhT3JBcmlhQXR0cmlidXRlUHJvcHMgPSBPYmplY3Qua2V5cyh0aGlzLnByb3BzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgICAgIGlmIChrZXkuc3Vic3RyKDAsIDUpID09PSAnZGF0YS0nIHx8IGtleS5zdWJzdHIoMCwgNSkgPT09ICdhcmlhLScgfHwga2V5ID09PSAncm9sZScpIHtcbiAgICAgICAgICBhY2Nba2V5XSA9IF90aGlzMi5wcm9wc1trZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sIHt9KTtcbiAgICAgIHZhciBub2RlID0gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNvbXBvbmVudENsYXNzLCBjbGFzc05hbWUsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCJcIi5jb25jYXQoY29tcG9uZW50Q2xhc3MsIFwiLWNsb3NhYmxlXCIpLCBjbG9zYWJsZSkpLFxuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgIG9uTW91c2VFbnRlcjogdGhpcy5jbGVhckNsb3NlVGltZXIsXG4gICAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy5zdGFydENsb3NlVGltZXIsXG4gICAgICAgIG9uQ2xpY2s6IG9uQ2xpY2tcbiAgICAgIH0sIGRhdGFPckFyaWFBdHRyaWJ1dGVQcm9wcyksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGNvbXBvbmVudENsYXNzLCBcIi1jb250ZW50XCIpXG4gICAgICB9LCBjaGlsZHJlbiksIGNsb3NhYmxlID8gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgICAgICB0YWJJbmRleDogMCxcbiAgICAgICAgb25DbGljazogdGhpcy5jbG9zZSxcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChjb21wb25lbnRDbGFzcywgXCItY2xvc2VcIilcbiAgICAgIH0sIGNsb3NlSWNvbiB8fCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQoY29tcG9uZW50Q2xhc3MsIFwiLWNsb3NlLXhcIilcbiAgICAgIH0pKSA6IG51bGwpO1xuXG4gICAgICBpZiAoaG9sZGVyKSB7XG4gICAgICAgIHJldHVybiBSZWFjdERPTS5jcmVhdGVQb3J0YWwobm9kZSwgaG9sZGVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE5vdGljZTtcbn0oQ29tcG9uZW50KTtcblxuZXhwb3J0IHsgTm90aWNlIGFzIGRlZmF1bHQgfTtcbk5vdGljZS5kZWZhdWx0UHJvcHMgPSB7XG4gIG9uQ2xvc2U6IGZ1bmN0aW9uIG9uQ2xvc2UoKSB7fSxcbiAgZHVyYXRpb246IDEuNVxufTsiLCJpbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgTm90aWNlIGZyb20gJy4vTm90aWNlJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25JbnN0YW5jZSkge1xuICB2YXIgY3JlYXRlZFJlZiA9IFJlYWN0LnVzZVJlZih7fSk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKFtdKSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgICAgZWxlbWVudHMgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0RWxlbWVudHMgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIGZ1bmN0aW9uIG5vdGlmeShub3RpY2VQcm9wcykge1xuICAgIG5vdGlmaWNhdGlvbkluc3RhbmNlLmFkZChub3RpY2VQcm9wcywgZnVuY3Rpb24gKGRpdiwgcHJvcHMpIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wcy5rZXk7XG5cbiAgICAgIGlmIChkaXYgJiYgIWNyZWF0ZWRSZWYuY3VycmVudFtrZXldKSB7XG4gICAgICAgIHZhciBub3RpY2VFbGUgPSBSZWFjdC5jcmVhdGVFbGVtZW50KE5vdGljZSwgT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICBob2xkZXI6IGRpdlxuICAgICAgICB9KSk7XG4gICAgICAgIGNyZWF0ZWRSZWYuY3VycmVudFtrZXldID0gbm90aWNlRWxlO1xuICAgICAgICBzZXRFbGVtZW50cyhmdW5jdGlvbiAob3JpZ2luRWxlbWVudHMpIHtcbiAgICAgICAgICByZXR1cm4gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShvcmlnaW5FbGVtZW50cyksIFtub3RpY2VFbGVdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gW25vdGlmeSwgUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgZWxlbWVudHMpXTtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNcIjtcbmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZVN1cGVyXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgQ1NTTW90aW9uTGlzdCB9IGZyb20gJ3JjLW1vdGlvbic7XG5pbXBvcnQgTm90aWNlIGZyb20gJy4vTm90aWNlJztcbmltcG9ydCBfdXNlTm90aWZpY2F0aW9uIGZyb20gJy4vdXNlTm90aWZpY2F0aW9uJztcbnZhciBzZWVkID0gMDtcbnZhciBub3cgPSBEYXRlLm5vdygpO1xuXG5mdW5jdGlvbiBnZXRVdWlkKCkge1xuICB2YXIgaWQgPSBzZWVkO1xuICBzZWVkICs9IDE7XG4gIHJldHVybiBcInJjTm90aWZpY2F0aW9uX1wiLmNvbmNhdChub3csIFwiX1wiKS5jb25jYXQoaWQpO1xufVxuXG52YXIgTm90aWZpY2F0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhOb3RpZmljYXRpb24sIF9Db21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTm90aWZpY2F0aW9uKTtcblxuICBmdW5jdGlvbiBOb3RpZmljYXRpb24oKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5vdGlmaWNhdGlvbik7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbm90aWNlczogW11cbiAgICB9O1xuICAgIF90aGlzLmhvb2tSZWZzID0gbmV3IE1hcCgpO1xuXG4gICAgX3RoaXMuYWRkID0gZnVuY3Rpb24gKG9yaWdpbk5vdGljZSwgaG9sZGVyQ2FsbGJhY2spIHtcbiAgICAgIHZhciBrZXkgPSBvcmlnaW5Ob3RpY2Uua2V5IHx8IGdldFV1aWQoKTtcblxuICAgICAgdmFyIG5vdGljZSA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgb3JpZ2luTm90aWNlKSwge30sIHtcbiAgICAgICAga2V5OiBrZXlcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgbWF4Q291bnQgPSBfdGhpcy5wcm9wcy5tYXhDb3VudDtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZpb3VzU3RhdGUpIHtcbiAgICAgICAgdmFyIG5vdGljZXMgPSBwcmV2aW91c1N0YXRlLm5vdGljZXM7XG4gICAgICAgIHZhciBub3RpY2VJbmRleCA9IG5vdGljZXMubWFwKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgcmV0dXJuIHYubm90aWNlLmtleTtcbiAgICAgICAgfSkuaW5kZXhPZihrZXkpO1xuICAgICAgICB2YXIgdXBkYXRlZE5vdGljZXMgPSBub3RpY2VzLmNvbmNhdCgpO1xuXG4gICAgICAgIGlmIChub3RpY2VJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICB1cGRhdGVkTm90aWNlcy5zcGxpY2Uobm90aWNlSW5kZXgsIDEsIHtcbiAgICAgICAgICAgIG5vdGljZTogbm90aWNlLFxuICAgICAgICAgICAgaG9sZGVyQ2FsbGJhY2s6IGhvbGRlckNhbGxiYWNrXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG1heENvdW50ICYmIG5vdGljZXMubGVuZ3RoID49IG1heENvdW50KSB7XG4gICAgICAgICAgICAvLyBYWFgsIHVzZSBrZXkgb2YgZmlyc3QgaXRlbSB0byB1cGRhdGUgbmV3IGFkZGVkIChsZXQgUmVhY3QgdG8gbW92ZSBleHNpdGluZ1xuICAgICAgICAgICAgLy8gaW5zdGVhZCBvZiByZW1vdmUgYW5kIG1vdW50KS4gU2FtZSBrZXkgd2FzIHVzZWQgYmVmb3JlIGZvciBib3RoIGEpIGV4dGVybmFsXG4gICAgICAgICAgICAvLyBtYW51YWwgY29udHJvbCBhbmQgYikgaW50ZXJuYWwgcmVhY3QgJ2tleScgcHJvcCAsIHdoaWNoIGlzIG5vdCB0aGF0IGdvb2QuXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICAgIC8vIHpvbWJpZUo6IE5vdCBrbm93IHdoeSB1c2UgYHVwZGF0ZUtleWAuIFRoaXMgbWFrZXMgTm90aWNlIGluZmluaXRlIGxvb3AgaW4gamVzdC5cbiAgICAgICAgICAgIC8vIENoYW5nZSB0byBgdXBkYXRlTWFya2AgZm9yIGNvbXBhcmUgaW5zdGVhZC5cbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1jb21wb25lbnQvbm90aWZpY2F0aW9uL2NvbW1pdC8zMjI5OWU2YmUzOTZmOTQwNDBiZmE4MjUxN2VlYTk0MGRiOTQ3ZWNlXG4gICAgICAgICAgICBub3RpY2Uua2V5ID0gdXBkYXRlZE5vdGljZXNbMF0ubm90aWNlLmtleTtcbiAgICAgICAgICAgIG5vdGljZS51cGRhdGVNYXJrID0gZ2V0VXVpZCgpOyAvLyB6b21iaWVKOiBUaGF0J3Mgd2h5LiBVc2VyIG1heSBjbG9zZSBieSBrZXkgZGlyZWN0bHkuXG4gICAgICAgICAgICAvLyBXZSBuZWVkIHJlY29yZCB0aGlzIGJ1dCBub3QgcmUtcmVuZGVyIHRvIGF2b2lkIHVwcGVyIGlzc3VlXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtY29tcG9uZW50L25vdGlmaWNhdGlvbi9pc3N1ZXMvMTI5XG5cbiAgICAgICAgICAgIG5vdGljZS51c2VyUGFzc0tleSA9IGtleTtcbiAgICAgICAgICAgIHVwZGF0ZWROb3RpY2VzLnNoaWZ0KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdXBkYXRlZE5vdGljZXMucHVzaCh7XG4gICAgICAgICAgICBub3RpY2U6IG5vdGljZSxcbiAgICAgICAgICAgIGhvbGRlckNhbGxiYWNrOiBob2xkZXJDYWxsYmFja1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBub3RpY2VzOiB1cGRhdGVkTm90aWNlc1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLnJlbW92ZSA9IGZ1bmN0aW9uIChyZW1vdmVLZXkpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciBub3RpY2VzID0gX3JlZi5ub3RpY2VzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5vdGljZXM6IG5vdGljZXMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgICAgdmFyIF9yZWYyJG5vdGljZSA9IF9yZWYyLm5vdGljZSxcbiAgICAgICAgICAgICAgICBrZXkgPSBfcmVmMiRub3RpY2Uua2V5LFxuICAgICAgICAgICAgICAgIHVzZXJQYXNzS2V5ID0gX3JlZjIkbm90aWNlLnVzZXJQYXNzS2V5O1xuICAgICAgICAgICAgdmFyIG1lcmdlZEtleSA9IHVzZXJQYXNzS2V5IHx8IGtleTtcbiAgICAgICAgICAgIHJldHVybiBtZXJnZWRLZXkgIT09IHJlbW92ZUtleTtcbiAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLm5vdGljZVByb3BzTWFwID0ge307XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE5vdGlmaWNhdGlvbiwgW3tcbiAgICBrZXk6IFwiZ2V0VHJhbnNpdGlvbk5hbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbk5hbWUoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHByZWZpeENscyA9IF90aGlzJHByb3BzLnByZWZpeENscyxcbiAgICAgICAgICBhbmltYXRpb24gPSBfdGhpcyRwcm9wcy5hbmltYXRpb247XG4gICAgICB2YXIgdHJhbnNpdGlvbk5hbWUgPSB0aGlzLnByb3BzLnRyYW5zaXRpb25OYW1lO1xuXG4gICAgICBpZiAoIXRyYW5zaXRpb25OYW1lICYmIGFuaW1hdGlvbikge1xuICAgICAgICB0cmFuc2l0aW9uTmFtZSA9IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChhbmltYXRpb24pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJhbnNpdGlvbk5hbWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIG5vdGljZXMgPSB0aGlzLnN0YXRlLm5vdGljZXM7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBwcmVmaXhDbHMgPSBfdGhpcyRwcm9wczIucHJlZml4Q2xzLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzMi5jbGFzc05hbWUsXG4gICAgICAgICAgY2xvc2VJY29uID0gX3RoaXMkcHJvcHMyLmNsb3NlSWNvbixcbiAgICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzMi5zdHlsZTtcbiAgICAgIHZhciBub3RpY2VLZXlzID0gW107XG4gICAgICBub3RpY2VzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYzLCBpbmRleCkge1xuICAgICAgICB2YXIgbm90aWNlID0gX3JlZjMubm90aWNlLFxuICAgICAgICAgICAgaG9sZGVyQ2FsbGJhY2sgPSBfcmVmMy5ob2xkZXJDYWxsYmFjaztcbiAgICAgICAgdmFyIHVwZGF0ZU1hcmsgPSBpbmRleCA9PT0gbm90aWNlcy5sZW5ndGggLSAxID8gbm90aWNlLnVwZGF0ZU1hcmsgOiB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBrZXkgPSBub3RpY2Uua2V5LFxuICAgICAgICAgICAgdXNlclBhc3NLZXkgPSBub3RpY2UudXNlclBhc3NLZXk7XG5cbiAgICAgICAgdmFyIG5vdGljZVByb3BzID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe1xuICAgICAgICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgICAgICAgIGNsb3NlSWNvbjogY2xvc2VJY29uXG4gICAgICAgIH0sIG5vdGljZSksIG5vdGljZS5wcm9wcyksIHt9LCB7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgbm90aWNlS2V5OiB1c2VyUGFzc0tleSB8fCBrZXksXG4gICAgICAgICAgdXBkYXRlTWFyazogdXBkYXRlTWFyayxcbiAgICAgICAgICBvbkNsb3NlOiBmdW5jdGlvbiBvbkNsb3NlKG5vdGljZUtleSkge1xuICAgICAgICAgICAgdmFyIF9ub3RpY2Ukb25DbG9zZTtcblxuICAgICAgICAgICAgX3RoaXMyLnJlbW92ZShub3RpY2VLZXkpO1xuXG4gICAgICAgICAgICAoX25vdGljZSRvbkNsb3NlID0gbm90aWNlLm9uQ2xvc2UpID09PSBudWxsIHx8IF9ub3RpY2Ukb25DbG9zZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25vdGljZSRvbkNsb3NlLmNhbGwobm90aWNlKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uQ2xpY2s6IG5vdGljZS5vbkNsaWNrLFxuICAgICAgICAgIGNoaWxkcmVuOiBub3RpY2UuY29udGVudFxuICAgICAgICB9KTsgLy8gR2l2ZSB0byBtb3Rpb25cblxuXG4gICAgICAgIG5vdGljZUtleXMucHVzaChrZXkpO1xuICAgICAgICBfdGhpczIubm90aWNlUHJvcHNNYXBba2V5XSA9IHtcbiAgICAgICAgICBwcm9wczogbm90aWNlUHJvcHMsXG4gICAgICAgICAgaG9sZGVyQ2FsbGJhY2s6IGhvbGRlckNhbGxiYWNrXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKHByZWZpeENscywgY2xhc3NOYW1lKSxcbiAgICAgICAgc3R5bGU6IHN0eWxlXG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KENTU01vdGlvbkxpc3QsIHtcbiAgICAgICAga2V5czogbm90aWNlS2V5cyxcbiAgICAgICAgbW90aW9uTmFtZTogdGhpcy5nZXRUcmFuc2l0aW9uTmFtZSgpLFxuICAgICAgICBvblZpc2libGVDaGFuZ2VkOiBmdW5jdGlvbiBvblZpc2libGVDaGFuZ2VkKGNoYW5nZWRWaXNpYmxlLCBfcmVmNCkge1xuICAgICAgICAgIHZhciBrZXkgPSBfcmVmNC5rZXk7XG5cbiAgICAgICAgICBpZiAoIWNoYW5nZWRWaXNpYmxlKSB7XG4gICAgICAgICAgICBkZWxldGUgX3RoaXMyLm5vdGljZVByb3BzTWFwW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCBmdW5jdGlvbiAoX3JlZjUpIHtcbiAgICAgICAgdmFyIGtleSA9IF9yZWY1LmtleSxcbiAgICAgICAgICAgIG1vdGlvbkNsYXNzTmFtZSA9IF9yZWY1LmNsYXNzTmFtZSxcbiAgICAgICAgICAgIG1vdGlvblN0eWxlID0gX3JlZjUuc3R5bGU7XG4gICAgICAgIHZhciBfdGhpczIkbm90aWNlUHJvcHNNYXAgPSBfdGhpczIubm90aWNlUHJvcHNNYXBba2V5XSxcbiAgICAgICAgICAgIG5vdGljZVByb3BzID0gX3RoaXMyJG5vdGljZVByb3BzTWFwLnByb3BzLFxuICAgICAgICAgICAgaG9sZGVyQ2FsbGJhY2sgPSBfdGhpczIkbm90aWNlUHJvcHNNYXAuaG9sZGVyQ2FsbGJhY2s7XG5cbiAgICAgICAgaWYgKGhvbGRlckNhbGxiYWNrKSB7XG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMobW90aW9uQ2xhc3NOYW1lLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWhvb2staG9sZGVyXCIpKSxcbiAgICAgICAgICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKHt9LCBtb3Rpb25TdHlsZSksXG4gICAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihkaXYpIHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGRpdikge1xuICAgICAgICAgICAgICAgIF90aGlzMi5ob29rUmVmcy5zZXQoa2V5LCBkaXYpO1xuXG4gICAgICAgICAgICAgICAgaG9sZGVyQ2FsbGJhY2soZGl2LCBub3RpY2VQcm9wcyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3RoaXMyLmhvb2tSZWZzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChOb3RpY2UsIE9iamVjdC5hc3NpZ24oe30sIG5vdGljZVByb3BzLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKG1vdGlvbkNsYXNzTmFtZSwgbm90aWNlUHJvcHMgPT09IG51bGwgfHwgbm90aWNlUHJvcHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5vdGljZVByb3BzLmNsYXNzTmFtZSksXG4gICAgICAgICAgc3R5bGU6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbW90aW9uU3R5bGUpLCBub3RpY2VQcm9wcyA9PT0gbnVsbCB8fCBub3RpY2VQcm9wcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbm90aWNlUHJvcHMuc3R5bGUpXG4gICAgICAgIH0pKTtcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTm90aWZpY2F0aW9uO1xufShDb21wb25lbnQpO1xuXG5Ob3RpZmljYXRpb24uZGVmYXVsdFByb3BzID0ge1xuICBwcmVmaXhDbHM6ICdyYy1ub3RpZmljYXRpb24nLFxuICBhbmltYXRpb246ICdmYWRlJyxcbiAgc3R5bGU6IHtcbiAgICB0b3A6IDY1LFxuICAgIGxlZnQ6ICc1MCUnXG4gIH1cbn07XG5cbk5vdGlmaWNhdGlvbi5uZXdJbnN0YW5jZSA9IGZ1bmN0aW9uIG5ld05vdGlmaWNhdGlvbkluc3RhbmNlKHByb3BlcnRpZXMsIGNhbGxiYWNrKSB7XG4gIHZhciBfcmVmNiA9IHByb3BlcnRpZXMgfHwge30sXG4gICAgICBnZXRDb250YWluZXIgPSBfcmVmNi5nZXRDb250YWluZXIsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmNiwgW1wiZ2V0Q29udGFpbmVyXCJdKTtcblxuICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgaWYgKGdldENvbnRhaW5lcikge1xuICAgIHZhciByb290ID0gZ2V0Q29udGFpbmVyKCk7XG4gICAgcm9vdC5hcHBlbmRDaGlsZChkaXYpO1xuICB9IGVsc2Uge1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgfVxuXG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiByZWYobm90aWZpY2F0aW9uKSB7XG4gICAgaWYgKGNhbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgY2FsbGJhY2soe1xuICAgICAgbm90aWNlOiBmdW5jdGlvbiBub3RpY2Uobm90aWNlUHJvcHMpIHtcbiAgICAgICAgbm90aWZpY2F0aW9uLmFkZChub3RpY2VQcm9wcyk7XG4gICAgICB9LFxuICAgICAgcmVtb3ZlTm90aWNlOiBmdW5jdGlvbiByZW1vdmVOb3RpY2Uoa2V5KSB7XG4gICAgICAgIG5vdGlmaWNhdGlvbi5yZW1vdmUoa2V5KTtcbiAgICAgIH0sXG4gICAgICBjb21wb25lbnQ6IG5vdGlmaWNhdGlvbixcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIFJlYWN0RE9NLnVubW91bnRDb21wb25lbnRBdE5vZGUoZGl2KTtcblxuICAgICAgICBpZiAoZGl2LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBkaXYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkaXYpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gSG9va3NcbiAgICAgIHVzZU5vdGlmaWNhdGlvbjogZnVuY3Rpb24gdXNlTm90aWZpY2F0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3VzZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb24pO1xuICAgICAgfVxuICAgIH0pO1xuICB9IC8vIE9ubHkgdXNlZCBmb3IgdGVzdCBjYXNlIHVzYWdlXG5cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JyAmJiBwcm9wZXJ0aWVzLlRFU1RfUkVOREVSKSB7XG4gICAgcHJvcGVydGllcy5URVNUX1JFTkRFUihSZWFjdC5jcmVhdGVFbGVtZW50KE5vdGlmaWNhdGlvbiwgT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgIHJlZjogcmVmXG4gICAgfSkpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBSZWFjdERPTS5yZW5kZXIoUmVhY3QuY3JlYXRlRWxlbWVudChOb3RpZmljYXRpb24sIE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7XG4gICAgcmVmOiByZWZcbiAgfSkpLCBkaXYpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTm90aWZpY2F0aW9uOyIsImltcG9ydCBOb3RpZmljYXRpb24gZnJvbSAnLi9Ob3RpZmljYXRpb24nO1xuZXhwb3J0IGRlZmF1bHQgTm90aWZpY2F0aW9uOyIsIi8vIFRoaXMgaWNvbiBmaWxlIGlzIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LlxudmFyIExvYWRpbmdPdXRsaW5lZCA9IHsgXCJpY29uXCI6IHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwidmlld0JveFwiOiBcIjAgMCAxMDI0IDEwMjRcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNOTg4IDU0OGMtMTkuOSAwLTM2LTE2LjEtMzYtMzYgMC01OS40LTExLjYtMTE3LTM0LjYtMTcxLjNhNDQwLjQ1IDQ0MC40NSAwIDAwLTk0LjMtMTM5LjkgNDM3LjcxIDQzNy43MSAwIDAwLTEzOS45LTk0LjNDNjI5IDgzLjYgNTcxLjQgNzIgNTEyIDcyYy0xOS45IDAtMzYtMTYuMS0zNi0zNnMxNi4xLTM2IDM2LTM2YzY5LjEgMCAxMzYuMiAxMy41IDE5OS4zIDQwLjNDNzcyLjMgNjYgODI3IDEwMyA4NzQgMTUwYzQ3IDQ3IDgzLjkgMTAxLjggMTA5LjcgMTYyLjcgMjYuNyA2My4xIDQwLjIgMTMwLjIgNDAuMiAxOTkuMy4xIDE5LjktMTYgMzYtMzUuOSAzNnpcIiB9IH1dIH0sIFwibmFtZVwiOiBcImxvYWRpbmdcIiwgXCJ0aGVtZVwiOiBcIm91dGxpbmVkXCIgfTtcbmV4cG9ydCBkZWZhdWx0IExvYWRpbmdPdXRsaW5lZDtcbiIsIi8qKlxuICogVGFrZSBpbnB1dCBmcm9tIFswLCBuXSBhbmQgcmV0dXJuIGl0IGFzIFswLCAxXVxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gYm91bmQwMShuLCBtYXgpIHtcbiAgICBpZiAoaXNPbmVQb2ludFplcm8obikpIHtcbiAgICAgICAgbiA9ICcxMDAlJztcbiAgICB9XG4gICAgdmFyIGlzUGVyY2VudCA9IGlzUGVyY2VudGFnZShuKTtcbiAgICBuID0gbWF4ID09PSAzNjAgPyBuIDogTWF0aC5taW4obWF4LCBNYXRoLm1heCgwLCBwYXJzZUZsb2F0KG4pKSk7XG4gICAgLy8gQXV0b21hdGljYWxseSBjb252ZXJ0IHBlcmNlbnRhZ2UgaW50byBudW1iZXJcbiAgICBpZiAoaXNQZXJjZW50KSB7XG4gICAgICAgIG4gPSBwYXJzZUludChTdHJpbmcobiAqIG1heCksIDEwKSAvIDEwMDtcbiAgICB9XG4gICAgLy8gSGFuZGxlIGZsb2F0aW5nIHBvaW50IHJvdW5kaW5nIGVycm9yc1xuICAgIGlmIChNYXRoLmFicyhuIC0gbWF4KSA8IDAuMDAwMDAxKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICAvLyBDb252ZXJ0IGludG8gWzAsIDFdIHJhbmdlIGlmIGl0IGlzbid0IGFscmVhZHlcbiAgICBpZiAobWF4ID09PSAzNjApIHtcbiAgICAgICAgLy8gSWYgbiBpcyBhIGh1ZSBnaXZlbiBpbiBkZWdyZWVzLFxuICAgICAgICAvLyB3cmFwIGFyb3VuZCBvdXQtb2YtcmFuZ2UgdmFsdWVzIGludG8gWzAsIDM2MF0gcmFuZ2VcbiAgICAgICAgLy8gdGhlbiBjb252ZXJ0IGludG8gWzAsIDFdLlxuICAgICAgICBuID0gKG4gPCAwID8gKG4gJSBtYXgpICsgbWF4IDogbiAlIG1heCkgLyBwYXJzZUZsb2F0KFN0cmluZyhtYXgpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIElmIG4gbm90IGEgaHVlIGdpdmVuIGluIGRlZ3JlZXNcbiAgICAgICAgLy8gQ29udmVydCBpbnRvIFswLCAxXSByYW5nZSBpZiBpdCBpc24ndCBhbHJlYWR5LlxuICAgICAgICBuID0gKG4gJSBtYXgpIC8gcGFyc2VGbG9hdChTdHJpbmcobWF4KSk7XG4gICAgfVxuICAgIHJldHVybiBuO1xufVxuLyoqXG4gKiBGb3JjZSBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wMDEodmFsKSB7XG4gICAgcmV0dXJuIE1hdGgubWluKDEsIE1hdGgubWF4KDAsIHZhbCkpO1xufVxuLyoqXG4gKiBOZWVkIHRvIGhhbmRsZSAxLjAgYXMgMTAwJSwgc2luY2Ugb25jZSBpdCBpcyBhIG51bWJlciwgdGhlcmUgaXMgbm8gZGlmZmVyZW5jZSBiZXR3ZWVuIGl0IGFuZCAxXG4gKiA8aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83NDIyMDcyL2phdmFzY3JpcHQtaG93LXRvLWRldGVjdC1udW1iZXItYXMtYS1kZWNpbWFsLWluY2x1ZGluZy0xLTA+XG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc09uZVBvaW50WmVybyhuKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBuID09PSAnc3RyaW5nJyAmJiBuLmluY2x1ZGVzKCcuJykgJiYgcGFyc2VGbG9hdChuKSA9PT0gMTtcbn1cbi8qKlxuICogQ2hlY2sgdG8gc2VlIGlmIHN0cmluZyBwYXNzZWQgaW4gaXMgYSBwZXJjZW50YWdlXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1BlcmNlbnRhZ2Uobikge1xuICAgIHJldHVybiB0eXBlb2YgbiA9PT0gJ3N0cmluZycgJiYgbi5pbmNsdWRlcygnJScpO1xufVxuLyoqXG4gKiBSZXR1cm4gYSB2YWxpZCBhbHBoYSB2YWx1ZSBbMCwxXSB3aXRoIGFsbCBpbnZhbGlkIHZhbHVlcyBiZWluZyBzZXQgdG8gMVxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gYm91bmRBbHBoYShhKSB7XG4gICAgYSA9IHBhcnNlRmxvYXQoYSk7XG4gICAgaWYgKGlzTmFOKGEpIHx8IGEgPCAwIHx8IGEgPiAxKSB7XG4gICAgICAgIGEgPSAxO1xuICAgIH1cbiAgICByZXR1cm4gYTtcbn1cbi8qKlxuICogUmVwbGFjZSBhIGRlY2ltYWwgd2l0aCBpdCdzIHBlcmNlbnRhZ2UgdmFsdWVcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRUb1BlcmNlbnRhZ2Uobikge1xuICAgIGlmIChuIDw9IDEpIHtcbiAgICAgICAgcmV0dXJuIE51bWJlcihuKSAqIDEwMCArIFwiJVwiO1xuICAgIH1cbiAgICByZXR1cm4gbjtcbn1cbi8qKlxuICogRm9yY2UgYSBoZXggdmFsdWUgdG8gaGF2ZSAyIGNoYXJhY3RlcnNcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhZDIoYykge1xuICAgIHJldHVybiBjLmxlbmd0aCA9PT0gMSA/ICcwJyArIGMgOiBTdHJpbmcoYyk7XG59XG4iLCJpbXBvcnQgeyBib3VuZDAxLCBwYWQyIH0gZnJvbSAnLi91dGlsJztcbi8vIGByZ2JUb0hzbGAsIGByZ2JUb0hzdmAsIGBoc2xUb1JnYmAsIGBoc3ZUb1JnYmAgbW9kaWZpZWQgZnJvbTpcbi8vIDxodHRwOi8vbWppamFja3Nvbi5jb20vMjAwOC8wMi9yZ2ItdG8taHNsLWFuZC1yZ2ItdG8taHN2LWNvbG9yLW1vZGVsLWNvbnZlcnNpb24tYWxnb3JpdGhtcy1pbi1qYXZhc2NyaXB0PlxuLyoqXG4gKiBIYW5kbGUgYm91bmRzIC8gcGVyY2VudGFnZSBjaGVja2luZyB0byBjb25mb3JtIHRvIENTUyBjb2xvciBzcGVjXG4gKiA8aHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1jb2xvci8+XG4gKiAqQXNzdW1lczoqIHIsIGcsIGIgaW4gWzAsIDI1NV0gb3IgWzAsIDFdXG4gKiAqUmV0dXJuczoqIHsgciwgZywgYiB9IGluIFswLCAyNTVdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZ2JUb1JnYihyLCBnLCBiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcjogYm91bmQwMShyLCAyNTUpICogMjU1LFxuICAgICAgICBnOiBib3VuZDAxKGcsIDI1NSkgKiAyNTUsXG4gICAgICAgIGI6IGJvdW5kMDEoYiwgMjU1KSAqIDI1NSxcbiAgICB9O1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhbiBSR0IgY29sb3IgdmFsdWUgdG8gSFNMLlxuICogKkFzc3VtZXM6KiByLCBnLCBhbmQgYiBhcmUgY29udGFpbmVkIGluIFswLCAyNTVdIG9yIFswLCAxXVxuICogKlJldHVybnM6KiB7IGgsIHMsIGwgfSBpbiBbMCwxXVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmdiVG9Ic2wociwgZywgYikge1xuICAgIHIgPSBib3VuZDAxKHIsIDI1NSk7XG4gICAgZyA9IGJvdW5kMDEoZywgMjU1KTtcbiAgICBiID0gYm91bmQwMShiLCAyNTUpO1xuICAgIHZhciBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgICB2YXIgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gICAgdmFyIGggPSAwO1xuICAgIHZhciBzID0gMDtcbiAgICB2YXIgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgICBpZiAobWF4ID09PSBtaW4pIHtcbiAgICAgICAgcyA9IDA7XG4gICAgICAgIGggPSAwOyAvLyBhY2hyb21hdGljXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgZCA9IG1heCAtIG1pbjtcbiAgICAgICAgcyA9IGwgPiAwLjUgPyBkIC8gKDIgLSBtYXggLSBtaW4pIDogZCAvIChtYXggKyBtaW4pO1xuICAgICAgICBzd2l0Y2ggKG1heCkge1xuICAgICAgICAgICAgY2FzZSByOlxuICAgICAgICAgICAgICAgIGggPSAoZyAtIGIpIC8gZCArIChnIDwgYiA/IDYgOiAwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZzpcbiAgICAgICAgICAgICAgICBoID0gKGIgLSByKSAvIGQgKyAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBiOlxuICAgICAgICAgICAgICAgIGggPSAociAtIGcpIC8gZCArIDQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGggLz0gNjtcbiAgICB9XG4gICAgcmV0dXJuIHsgaDogaCwgczogcywgbDogbCB9O1xufVxuZnVuY3Rpb24gaHVlMnJnYihwLCBxLCB0KSB7XG4gICAgaWYgKHQgPCAwKSB7XG4gICAgICAgIHQgKz0gMTtcbiAgICB9XG4gICAgaWYgKHQgPiAxKSB7XG4gICAgICAgIHQgLT0gMTtcbiAgICB9XG4gICAgaWYgKHQgPCAxIC8gNikge1xuICAgICAgICByZXR1cm4gcCArIChxIC0gcCkgKiAoNiAqIHQpO1xuICAgIH1cbiAgICBpZiAodCA8IDEgLyAyKSB7XG4gICAgICAgIHJldHVybiBxO1xuICAgIH1cbiAgICBpZiAodCA8IDIgLyAzKSB7XG4gICAgICAgIHJldHVybiBwICsgKHEgLSBwKSAqICgyIC8gMyAtIHQpICogNjtcbiAgICB9XG4gICAgcmV0dXJuIHA7XG59XG4vKipcbiAqIENvbnZlcnRzIGFuIEhTTCBjb2xvciB2YWx1ZSB0byBSR0IuXG4gKlxuICogKkFzc3VtZXM6KiBoIGlzIGNvbnRhaW5lZCBpbiBbMCwgMV0gb3IgWzAsIDM2MF0gYW5kIHMgYW5kIGwgYXJlIGNvbnRhaW5lZCBbMCwgMV0gb3IgWzAsIDEwMF1cbiAqICpSZXR1cm5zOiogeyByLCBnLCBiIH0gaW4gdGhlIHNldCBbMCwgMjU1XVxuICovXG5leHBvcnQgZnVuY3Rpb24gaHNsVG9SZ2IoaCwgcywgbCkge1xuICAgIHZhciByO1xuICAgIHZhciBnO1xuICAgIHZhciBiO1xuICAgIGggPSBib3VuZDAxKGgsIDM2MCk7XG4gICAgcyA9IGJvdW5kMDEocywgMTAwKTtcbiAgICBsID0gYm91bmQwMShsLCAxMDApO1xuICAgIGlmIChzID09PSAwKSB7XG4gICAgICAgIC8vIGFjaHJvbWF0aWNcbiAgICAgICAgZyA9IGw7XG4gICAgICAgIGIgPSBsO1xuICAgICAgICByID0gbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBxID0gbCA8IDAuNSA/IGwgKiAoMSArIHMpIDogbCArIHMgLSBsICogcztcbiAgICAgICAgdmFyIHAgPSAyICogbCAtIHE7XG4gICAgICAgIHIgPSBodWUycmdiKHAsIHEsIGggKyAxIC8gMyk7XG4gICAgICAgIGcgPSBodWUycmdiKHAsIHEsIGgpO1xuICAgICAgICBiID0gaHVlMnJnYihwLCBxLCBoIC0gMSAvIDMpO1xuICAgIH1cbiAgICByZXR1cm4geyByOiByICogMjU1LCBnOiBnICogMjU1LCBiOiBiICogMjU1IH07XG59XG4vKipcbiAqIENvbnZlcnRzIGFuIFJHQiBjb2xvciB2YWx1ZSB0byBIU1ZcbiAqXG4gKiAqQXNzdW1lczoqIHIsIGcsIGFuZCBiIGFyZSBjb250YWluZWQgaW4gdGhlIHNldCBbMCwgMjU1XSBvciBbMCwgMV1cbiAqICpSZXR1cm5zOiogeyBoLCBzLCB2IH0gaW4gWzAsMV1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJnYlRvSHN2KHIsIGcsIGIpIHtcbiAgICByID0gYm91bmQwMShyLCAyNTUpO1xuICAgIGcgPSBib3VuZDAxKGcsIDI1NSk7XG4gICAgYiA9IGJvdW5kMDEoYiwgMjU1KTtcbiAgICB2YXIgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgdmFyIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgIHZhciBoID0gMDtcbiAgICB2YXIgdiA9IG1heDtcbiAgICB2YXIgZCA9IG1heCAtIG1pbjtcbiAgICB2YXIgcyA9IG1heCA9PT0gMCA/IDAgOiBkIC8gbWF4O1xuICAgIGlmIChtYXggPT09IG1pbikge1xuICAgICAgICBoID0gMDsgLy8gYWNocm9tYXRpY1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3dpdGNoIChtYXgpIHtcbiAgICAgICAgICAgIGNhc2UgcjpcbiAgICAgICAgICAgICAgICBoID0gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGc6XG4gICAgICAgICAgICAgICAgaCA9IChiIC0gcikgLyBkICsgMjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYjpcbiAgICAgICAgICAgICAgICBoID0gKHIgLSBnKSAvIGQgKyA0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBoIC89IDY7XG4gICAgfVxuICAgIHJldHVybiB7IGg6IGgsIHM6IHMsIHY6IHYgfTtcbn1cbi8qKlxuICogQ29udmVydHMgYW4gSFNWIGNvbG9yIHZhbHVlIHRvIFJHQi5cbiAqXG4gKiAqQXNzdW1lczoqIGggaXMgY29udGFpbmVkIGluIFswLCAxXSBvciBbMCwgMzYwXSBhbmQgcyBhbmQgdiBhcmUgY29udGFpbmVkIGluIFswLCAxXSBvciBbMCwgMTAwXVxuICogKlJldHVybnM6KiB7IHIsIGcsIGIgfSBpbiB0aGUgc2V0IFswLCAyNTVdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoc3ZUb1JnYihoLCBzLCB2KSB7XG4gICAgaCA9IGJvdW5kMDEoaCwgMzYwKSAqIDY7XG4gICAgcyA9IGJvdW5kMDEocywgMTAwKTtcbiAgICB2ID0gYm91bmQwMSh2LCAxMDApO1xuICAgIHZhciBpID0gTWF0aC5mbG9vcihoKTtcbiAgICB2YXIgZiA9IGggLSBpO1xuICAgIHZhciBwID0gdiAqICgxIC0gcyk7XG4gICAgdmFyIHEgPSB2ICogKDEgLSBmICogcyk7XG4gICAgdmFyIHQgPSB2ICogKDEgLSAoMSAtIGYpICogcyk7XG4gICAgdmFyIG1vZCA9IGkgJSA2O1xuICAgIHZhciByID0gW3YsIHEsIHAsIHAsIHQsIHZdW21vZF07XG4gICAgdmFyIGcgPSBbdCwgdiwgdiwgcSwgcCwgcF1bbW9kXTtcbiAgICB2YXIgYiA9IFtwLCBwLCB0LCB2LCB2LCBxXVttb2RdO1xuICAgIHJldHVybiB7IHI6IHIgKiAyNTUsIGc6IGcgKiAyNTUsIGI6IGIgKiAyNTUgfTtcbn1cbi8qKlxuICogQ29udmVydHMgYW4gUkdCIGNvbG9yIHRvIGhleFxuICpcbiAqIEFzc3VtZXMgciwgZywgYW5kIGIgYXJlIGNvbnRhaW5lZCBpbiB0aGUgc2V0IFswLCAyNTVdXG4gKiBSZXR1cm5zIGEgMyBvciA2IGNoYXJhY3RlciBoZXhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJnYlRvSGV4KHIsIGcsIGIsIGFsbG93M0NoYXIpIHtcbiAgICB2YXIgaGV4ID0gW1xuICAgICAgICBwYWQyKE1hdGgucm91bmQocikudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihNYXRoLnJvdW5kKGcpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIoTWF0aC5yb3VuZChiKS50b1N0cmluZygxNikpLFxuICAgIF07XG4gICAgLy8gUmV0dXJuIGEgMyBjaGFyYWN0ZXIgaGV4IGlmIHBvc3NpYmxlXG4gICAgaWYgKGFsbG93M0NoYXIgJiZcbiAgICAgICAgaGV4WzBdLnN0YXJ0c1dpdGgoaGV4WzBdLmNoYXJBdCgxKSkgJiZcbiAgICAgICAgaGV4WzFdLnN0YXJ0c1dpdGgoaGV4WzFdLmNoYXJBdCgxKSkgJiZcbiAgICAgICAgaGV4WzJdLnN0YXJ0c1dpdGgoaGV4WzJdLmNoYXJBdCgxKSkpIHtcbiAgICAgICAgcmV0dXJuIGhleFswXS5jaGFyQXQoMCkgKyBoZXhbMV0uY2hhckF0KDApICsgaGV4WzJdLmNoYXJBdCgwKTtcbiAgICB9XG4gICAgcmV0dXJuIGhleC5qb2luKCcnKTtcbn1cbi8qKlxuICogQ29udmVydHMgYW4gUkdCQSBjb2xvciBwbHVzIGFscGhhIHRyYW5zcGFyZW5jeSB0byBoZXhcbiAqXG4gKiBBc3N1bWVzIHIsIGcsIGIgYXJlIGNvbnRhaW5lZCBpbiB0aGUgc2V0IFswLCAyNTVdIGFuZFxuICogYSBpbiBbMCwgMV0uIFJldHVybnMgYSA0IG9yIDggY2hhcmFjdGVyIHJnYmEgaGV4XG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtcGFyYW1zXG5leHBvcnQgZnVuY3Rpb24gcmdiYVRvSGV4KHIsIGcsIGIsIGEsIGFsbG93NENoYXIpIHtcbiAgICB2YXIgaGV4ID0gW1xuICAgICAgICBwYWQyKE1hdGgucm91bmQocikudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihNYXRoLnJvdW5kKGcpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIoTWF0aC5yb3VuZChiKS50b1N0cmluZygxNikpLFxuICAgICAgICBwYWQyKGNvbnZlcnREZWNpbWFsVG9IZXgoYSkpLFxuICAgIF07XG4gICAgLy8gUmV0dXJuIGEgNCBjaGFyYWN0ZXIgaGV4IGlmIHBvc3NpYmxlXG4gICAgaWYgKGFsbG93NENoYXIgJiZcbiAgICAgICAgaGV4WzBdLnN0YXJ0c1dpdGgoaGV4WzBdLmNoYXJBdCgxKSkgJiZcbiAgICAgICAgaGV4WzFdLnN0YXJ0c1dpdGgoaGV4WzFdLmNoYXJBdCgxKSkgJiZcbiAgICAgICAgaGV4WzJdLnN0YXJ0c1dpdGgoaGV4WzJdLmNoYXJBdCgxKSkgJiZcbiAgICAgICAgaGV4WzNdLnN0YXJ0c1dpdGgoaGV4WzNdLmNoYXJBdCgxKSkpIHtcbiAgICAgICAgcmV0dXJuIGhleFswXS5jaGFyQXQoMCkgKyBoZXhbMV0uY2hhckF0KDApICsgaGV4WzJdLmNoYXJBdCgwKSArIGhleFszXS5jaGFyQXQoMCk7XG4gICAgfVxuICAgIHJldHVybiBoZXguam9pbignJyk7XG59XG4vKipcbiAqIENvbnZlcnRzIGFuIFJHQkEgY29sb3IgdG8gYW4gQVJHQiBIZXg4IHN0cmluZ1xuICogUmFyZWx5IHVzZWQsIGJ1dCByZXF1aXJlZCBmb3IgXCJ0b0ZpbHRlcigpXCJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJnYmFUb0FyZ2JIZXgociwgZywgYiwgYSkge1xuICAgIHZhciBoZXggPSBbXG4gICAgICAgIHBhZDIoY29udmVydERlY2ltYWxUb0hleChhKSksXG4gICAgICAgIHBhZDIoTWF0aC5yb3VuZChyKS50b1N0cmluZygxNikpLFxuICAgICAgICBwYWQyKE1hdGgucm91bmQoZykudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihNYXRoLnJvdW5kKGIpLnRvU3RyaW5nKDE2KSksXG4gICAgXTtcbiAgICByZXR1cm4gaGV4LmpvaW4oJycpO1xufVxuLyoqIENvbnZlcnRzIGEgZGVjaW1hbCB0byBhIGhleCB2YWx1ZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnREZWNpbWFsVG9IZXgoZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoZCkgKiAyNTUpLnRvU3RyaW5nKDE2KTtcbn1cbi8qKiBDb252ZXJ0cyBhIGhleCB2YWx1ZSB0byBhIGRlY2ltYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0SGV4VG9EZWNpbWFsKGgpIHtcbiAgICByZXR1cm4gcGFyc2VJbnRGcm9tSGV4KGgpIC8gMjU1O1xufVxuLyoqIFBhcnNlIGEgYmFzZS0xNiBoZXggdmFsdWUgaW50byBhIGJhc2UtMTAgaW50ZWdlciAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSW50RnJvbUhleCh2YWwpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodmFsLCAxNik7XG59XG5leHBvcnQgZnVuY3Rpb24gbnVtYmVySW5wdXRUb09iamVjdChjb2xvcikge1xuICAgIHJldHVybiB7XG4gICAgICAgIHI6IGNvbG9yID4+IDE2LFxuICAgICAgICBnOiAoY29sb3IgJiAweGZmMDApID4+IDgsXG4gICAgICAgIGI6IGNvbG9yICYgMHhmZixcbiAgICB9O1xufVxuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2JhaGFtYXMxMC9jc3MtY29sb3ItbmFtZXMvYmxvYi9tYXN0ZXIvY3NzLWNvbG9yLW5hbWVzLmpzb25cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgdmFyIG5hbWVzID0ge1xuICAgIGFsaWNlYmx1ZTogJyNmMGY4ZmYnLFxuICAgIGFudGlxdWV3aGl0ZTogJyNmYWViZDcnLFxuICAgIGFxdWE6ICcjMDBmZmZmJyxcbiAgICBhcXVhbWFyaW5lOiAnIzdmZmZkNCcsXG4gICAgYXp1cmU6ICcjZjBmZmZmJyxcbiAgICBiZWlnZTogJyNmNWY1ZGMnLFxuICAgIGJpc3F1ZTogJyNmZmU0YzQnLFxuICAgIGJsYWNrOiAnIzAwMDAwMCcsXG4gICAgYmxhbmNoZWRhbG1vbmQ6ICcjZmZlYmNkJyxcbiAgICBibHVlOiAnIzAwMDBmZicsXG4gICAgYmx1ZXZpb2xldDogJyM4YTJiZTInLFxuICAgIGJyb3duOiAnI2E1MmEyYScsXG4gICAgYnVybHl3b29kOiAnI2RlYjg4NycsXG4gICAgY2FkZXRibHVlOiAnIzVmOWVhMCcsXG4gICAgY2hhcnRyZXVzZTogJyM3ZmZmMDAnLFxuICAgIGNob2NvbGF0ZTogJyNkMjY5MWUnLFxuICAgIGNvcmFsOiAnI2ZmN2Y1MCcsXG4gICAgY29ybmZsb3dlcmJsdWU6ICcjNjQ5NWVkJyxcbiAgICBjb3Juc2lsazogJyNmZmY4ZGMnLFxuICAgIGNyaW1zb246ICcjZGMxNDNjJyxcbiAgICBjeWFuOiAnIzAwZmZmZicsXG4gICAgZGFya2JsdWU6ICcjMDAwMDhiJyxcbiAgICBkYXJrY3lhbjogJyMwMDhiOGInLFxuICAgIGRhcmtnb2xkZW5yb2Q6ICcjYjg4NjBiJyxcbiAgICBkYXJrZ3JheTogJyNhOWE5YTknLFxuICAgIGRhcmtncmVlbjogJyMwMDY0MDAnLFxuICAgIGRhcmtncmV5OiAnI2E5YTlhOScsXG4gICAgZGFya2toYWtpOiAnI2JkYjc2YicsXG4gICAgZGFya21hZ2VudGE6ICcjOGIwMDhiJyxcbiAgICBkYXJrb2xpdmVncmVlbjogJyM1NTZiMmYnLFxuICAgIGRhcmtvcmFuZ2U6ICcjZmY4YzAwJyxcbiAgICBkYXJrb3JjaGlkOiAnIzk5MzJjYycsXG4gICAgZGFya3JlZDogJyM4YjAwMDAnLFxuICAgIGRhcmtzYWxtb246ICcjZTk5NjdhJyxcbiAgICBkYXJrc2VhZ3JlZW46ICcjOGZiYzhmJyxcbiAgICBkYXJrc2xhdGVibHVlOiAnIzQ4M2Q4YicsXG4gICAgZGFya3NsYXRlZ3JheTogJyMyZjRmNGYnLFxuICAgIGRhcmtzbGF0ZWdyZXk6ICcjMmY0ZjRmJyxcbiAgICBkYXJrdHVycXVvaXNlOiAnIzAwY2VkMScsXG4gICAgZGFya3Zpb2xldDogJyM5NDAwZDMnLFxuICAgIGRlZXBwaW5rOiAnI2ZmMTQ5MycsXG4gICAgZGVlcHNreWJsdWU6ICcjMDBiZmZmJyxcbiAgICBkaW1ncmF5OiAnIzY5Njk2OScsXG4gICAgZGltZ3JleTogJyM2OTY5NjknLFxuICAgIGRvZGdlcmJsdWU6ICcjMWU5MGZmJyxcbiAgICBmaXJlYnJpY2s6ICcjYjIyMjIyJyxcbiAgICBmbG9yYWx3aGl0ZTogJyNmZmZhZjAnLFxuICAgIGZvcmVzdGdyZWVuOiAnIzIyOGIyMicsXG4gICAgZnVjaHNpYTogJyNmZjAwZmYnLFxuICAgIGdhaW5zYm9ybzogJyNkY2RjZGMnLFxuICAgIGdob3N0d2hpdGU6ICcjZjhmOGZmJyxcbiAgICBnb2xkZW5yb2Q6ICcjZGFhNTIwJyxcbiAgICBnb2xkOiAnI2ZmZDcwMCcsXG4gICAgZ3JheTogJyM4MDgwODAnLFxuICAgIGdyZWVuOiAnIzAwODAwMCcsXG4gICAgZ3JlZW55ZWxsb3c6ICcjYWRmZjJmJyxcbiAgICBncmV5OiAnIzgwODA4MCcsXG4gICAgaG9uZXlkZXc6ICcjZjBmZmYwJyxcbiAgICBob3RwaW5rOiAnI2ZmNjliNCcsXG4gICAgaW5kaWFucmVkOiAnI2NkNWM1YycsXG4gICAgaW5kaWdvOiAnIzRiMDA4MicsXG4gICAgaXZvcnk6ICcjZmZmZmYwJyxcbiAgICBraGFraTogJyNmMGU2OGMnLFxuICAgIGxhdmVuZGVyYmx1c2g6ICcjZmZmMGY1JyxcbiAgICBsYXZlbmRlcjogJyNlNmU2ZmEnLFxuICAgIGxhd25ncmVlbjogJyM3Y2ZjMDAnLFxuICAgIGxlbW9uY2hpZmZvbjogJyNmZmZhY2QnLFxuICAgIGxpZ2h0Ymx1ZTogJyNhZGQ4ZTYnLFxuICAgIGxpZ2h0Y29yYWw6ICcjZjA4MDgwJyxcbiAgICBsaWdodGN5YW46ICcjZTBmZmZmJyxcbiAgICBsaWdodGdvbGRlbnJvZHllbGxvdzogJyNmYWZhZDInLFxuICAgIGxpZ2h0Z3JheTogJyNkM2QzZDMnLFxuICAgIGxpZ2h0Z3JlZW46ICcjOTBlZTkwJyxcbiAgICBsaWdodGdyZXk6ICcjZDNkM2QzJyxcbiAgICBsaWdodHBpbms6ICcjZmZiNmMxJyxcbiAgICBsaWdodHNhbG1vbjogJyNmZmEwN2EnLFxuICAgIGxpZ2h0c2VhZ3JlZW46ICcjMjBiMmFhJyxcbiAgICBsaWdodHNreWJsdWU6ICcjODdjZWZhJyxcbiAgICBsaWdodHNsYXRlZ3JheTogJyM3Nzg4OTknLFxuICAgIGxpZ2h0c2xhdGVncmV5OiAnIzc3ODg5OScsXG4gICAgbGlnaHRzdGVlbGJsdWU6ICcjYjBjNGRlJyxcbiAgICBsaWdodHllbGxvdzogJyNmZmZmZTAnLFxuICAgIGxpbWU6ICcjMDBmZjAwJyxcbiAgICBsaW1lZ3JlZW46ICcjMzJjZDMyJyxcbiAgICBsaW5lbjogJyNmYWYwZTYnLFxuICAgIG1hZ2VudGE6ICcjZmYwMGZmJyxcbiAgICBtYXJvb246ICcjODAwMDAwJyxcbiAgICBtZWRpdW1hcXVhbWFyaW5lOiAnIzY2Y2RhYScsXG4gICAgbWVkaXVtYmx1ZTogJyMwMDAwY2QnLFxuICAgIG1lZGl1bW9yY2hpZDogJyNiYTU1ZDMnLFxuICAgIG1lZGl1bXB1cnBsZTogJyM5MzcwZGInLFxuICAgIG1lZGl1bXNlYWdyZWVuOiAnIzNjYjM3MScsXG4gICAgbWVkaXVtc2xhdGVibHVlOiAnIzdiNjhlZScsXG4gICAgbWVkaXVtc3ByaW5nZ3JlZW46ICcjMDBmYTlhJyxcbiAgICBtZWRpdW10dXJxdW9pc2U6ICcjNDhkMWNjJyxcbiAgICBtZWRpdW12aW9sZXRyZWQ6ICcjYzcxNTg1JyxcbiAgICBtaWRuaWdodGJsdWU6ICcjMTkxOTcwJyxcbiAgICBtaW50Y3JlYW06ICcjZjVmZmZhJyxcbiAgICBtaXN0eXJvc2U6ICcjZmZlNGUxJyxcbiAgICBtb2NjYXNpbjogJyNmZmU0YjUnLFxuICAgIG5hdmFqb3doaXRlOiAnI2ZmZGVhZCcsXG4gICAgbmF2eTogJyMwMDAwODAnLFxuICAgIG9sZGxhY2U6ICcjZmRmNWU2JyxcbiAgICBvbGl2ZTogJyM4MDgwMDAnLFxuICAgIG9saXZlZHJhYjogJyM2YjhlMjMnLFxuICAgIG9yYW5nZTogJyNmZmE1MDAnLFxuICAgIG9yYW5nZXJlZDogJyNmZjQ1MDAnLFxuICAgIG9yY2hpZDogJyNkYTcwZDYnLFxuICAgIHBhbGVnb2xkZW5yb2Q6ICcjZWVlOGFhJyxcbiAgICBwYWxlZ3JlZW46ICcjOThmYjk4JyxcbiAgICBwYWxldHVycXVvaXNlOiAnI2FmZWVlZScsXG4gICAgcGFsZXZpb2xldHJlZDogJyNkYjcwOTMnLFxuICAgIHBhcGF5YXdoaXA6ICcjZmZlZmQ1JyxcbiAgICBwZWFjaHB1ZmY6ICcjZmZkYWI5JyxcbiAgICBwZXJ1OiAnI2NkODUzZicsXG4gICAgcGluazogJyNmZmMwY2InLFxuICAgIHBsdW06ICcjZGRhMGRkJyxcbiAgICBwb3dkZXJibHVlOiAnI2IwZTBlNicsXG4gICAgcHVycGxlOiAnIzgwMDA4MCcsXG4gICAgcmViZWNjYXB1cnBsZTogJyM2NjMzOTknLFxuICAgIHJlZDogJyNmZjAwMDAnLFxuICAgIHJvc3licm93bjogJyNiYzhmOGYnLFxuICAgIHJveWFsYmx1ZTogJyM0MTY5ZTEnLFxuICAgIHNhZGRsZWJyb3duOiAnIzhiNDUxMycsXG4gICAgc2FsbW9uOiAnI2ZhODA3MicsXG4gICAgc2FuZHlicm93bjogJyNmNGE0NjAnLFxuICAgIHNlYWdyZWVuOiAnIzJlOGI1NycsXG4gICAgc2Vhc2hlbGw6ICcjZmZmNWVlJyxcbiAgICBzaWVubmE6ICcjYTA1MjJkJyxcbiAgICBzaWx2ZXI6ICcjYzBjMGMwJyxcbiAgICBza3libHVlOiAnIzg3Y2VlYicsXG4gICAgc2xhdGVibHVlOiAnIzZhNWFjZCcsXG4gICAgc2xhdGVncmF5OiAnIzcwODA5MCcsXG4gICAgc2xhdGVncmV5OiAnIzcwODA5MCcsXG4gICAgc25vdzogJyNmZmZhZmEnLFxuICAgIHNwcmluZ2dyZWVuOiAnIzAwZmY3ZicsXG4gICAgc3RlZWxibHVlOiAnIzQ2ODJiNCcsXG4gICAgdGFuOiAnI2QyYjQ4YycsXG4gICAgdGVhbDogJyMwMDgwODAnLFxuICAgIHRoaXN0bGU6ICcjZDhiZmQ4JyxcbiAgICB0b21hdG86ICcjZmY2MzQ3JyxcbiAgICB0dXJxdW9pc2U6ICcjNDBlMGQwJyxcbiAgICB2aW9sZXQ6ICcjZWU4MmVlJyxcbiAgICB3aGVhdDogJyNmNWRlYjMnLFxuICAgIHdoaXRlOiAnI2ZmZmZmZicsXG4gICAgd2hpdGVzbW9rZTogJyNmNWY1ZjUnLFxuICAgIHllbGxvdzogJyNmZmZmMDAnLFxuICAgIHllbGxvd2dyZWVuOiAnIzlhY2QzMicsXG59O1xuIiwiaW1wb3J0IHsgY29udmVydEhleFRvRGVjaW1hbCwgaHNsVG9SZ2IsIGhzdlRvUmdiLCBwYXJzZUludEZyb21IZXgsIHJnYlRvUmdiIH0gZnJvbSAnLi9jb252ZXJzaW9uJztcbmltcG9ydCB7IG5hbWVzIH0gZnJvbSAnLi9jc3MtY29sb3ItbmFtZXMnO1xuaW1wb3J0IHsgYm91bmRBbHBoYSwgY29udmVydFRvUGVyY2VudGFnZSB9IGZyb20gJy4vdXRpbCc7XG4vKipcbiAqIEdpdmVuIGEgc3RyaW5nIG9yIG9iamVjdCwgY29udmVydCB0aGF0IGlucHV0IHRvIFJHQlxuICpcbiAqIFBvc3NpYmxlIHN0cmluZyBpbnB1dHM6XG4gKiBgYGBcbiAqIFwicmVkXCJcbiAqIFwiI2YwMFwiIG9yIFwiZjAwXCJcbiAqIFwiI2ZmMDAwMFwiIG9yIFwiZmYwMDAwXCJcbiAqIFwiI2ZmMDAwMDAwXCIgb3IgXCJmZjAwMDAwMFwiXG4gKiBcInJnYiAyNTUgMCAwXCIgb3IgXCJyZ2IgKDI1NSwgMCwgMClcIlxuICogXCJyZ2IgMS4wIDAgMFwiIG9yIFwicmdiICgxLCAwLCAwKVwiXG4gKiBcInJnYmEgKDI1NSwgMCwgMCwgMSlcIiBvciBcInJnYmEgMjU1LCAwLCAwLCAxXCJcbiAqIFwicmdiYSAoMS4wLCAwLCAwLCAxKVwiIG9yIFwicmdiYSAxLjAsIDAsIDAsIDFcIlxuICogXCJoc2woMCwgMTAwJSwgNTAlKVwiIG9yIFwiaHNsIDAgMTAwJSA1MCVcIlxuICogXCJoc2xhKDAsIDEwMCUsIDUwJSwgMSlcIiBvciBcImhzbGEgMCAxMDAlIDUwJSwgMVwiXG4gKiBcImhzdigwLCAxMDAlLCAxMDAlKVwiIG9yIFwiaHN2IDAgMTAwJSAxMDAlXCJcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5wdXRUb1JHQihjb2xvcikge1xuICAgIHZhciByZ2IgPSB7IHI6IDAsIGc6IDAsIGI6IDAgfTtcbiAgICB2YXIgYSA9IDE7XG4gICAgdmFyIHMgPSBudWxsO1xuICAgIHZhciB2ID0gbnVsbDtcbiAgICB2YXIgbCA9IG51bGw7XG4gICAgdmFyIG9rID0gZmFsc2U7XG4gICAgdmFyIGZvcm1hdCA9IGZhbHNlO1xuICAgIGlmICh0eXBlb2YgY29sb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbG9yID0gc3RyaW5nSW5wdXRUb09iamVjdChjb2xvcik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29sb3IgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChpc1ZhbGlkQ1NTVW5pdChjb2xvci5yKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci5nKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci5iKSkge1xuICAgICAgICAgICAgcmdiID0gcmdiVG9SZ2IoY29sb3IuciwgY29sb3IuZywgY29sb3IuYik7XG4gICAgICAgICAgICBvayA9IHRydWU7XG4gICAgICAgICAgICBmb3JtYXQgPSBTdHJpbmcoY29sb3Iucikuc3Vic3RyKC0xKSA9PT0gJyUnID8gJ3ByZ2InIDogJ3JnYic7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNWYWxpZENTU1VuaXQoY29sb3IuaCkgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IucykgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IudikpIHtcbiAgICAgICAgICAgIHMgPSBjb252ZXJ0VG9QZXJjZW50YWdlKGNvbG9yLnMpO1xuICAgICAgICAgICAgdiA9IGNvbnZlcnRUb1BlcmNlbnRhZ2UoY29sb3Iudik7XG4gICAgICAgICAgICByZ2IgPSBoc3ZUb1JnYihjb2xvci5oLCBzLCB2KTtcbiAgICAgICAgICAgIG9rID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvcm1hdCA9ICdoc3YnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzVmFsaWRDU1NVbml0KGNvbG9yLmgpICYmIGlzVmFsaWRDU1NVbml0KGNvbG9yLnMpICYmIGlzVmFsaWRDU1NVbml0KGNvbG9yLmwpKSB7XG4gICAgICAgICAgICBzID0gY29udmVydFRvUGVyY2VudGFnZShjb2xvci5zKTtcbiAgICAgICAgICAgIGwgPSBjb252ZXJ0VG9QZXJjZW50YWdlKGNvbG9yLmwpO1xuICAgICAgICAgICAgcmdiID0gaHNsVG9SZ2IoY29sb3IuaCwgcywgbCk7XG4gICAgICAgICAgICBvayA9IHRydWU7XG4gICAgICAgICAgICBmb3JtYXQgPSAnaHNsJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbG9yLCAnYScpKSB7XG4gICAgICAgICAgICBhID0gY29sb3IuYTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhID0gYm91bmRBbHBoYShhKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBvazogb2ssXG4gICAgICAgIGZvcm1hdDogY29sb3IuZm9ybWF0IHx8IGZvcm1hdCxcbiAgICAgICAgcjogTWF0aC5taW4oMjU1LCBNYXRoLm1heChyZ2IuciwgMCkpLFxuICAgICAgICBnOiBNYXRoLm1pbigyNTUsIE1hdGgubWF4KHJnYi5nLCAwKSksXG4gICAgICAgIGI6IE1hdGgubWluKDI1NSwgTWF0aC5tYXgocmdiLmIsIDApKSxcbiAgICAgICAgYTogYSxcbiAgICB9O1xufVxuLy8gPGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtdmFsdWVzLyNpbnRlZ2Vycz5cbnZhciBDU1NfSU5URUdFUiA9ICdbLVxcXFwrXT9cXFxcZCslPyc7XG4vLyA8aHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy12YWx1ZXMvI251bWJlci12YWx1ZT5cbnZhciBDU1NfTlVNQkVSID0gJ1stXFxcXCtdP1xcXFxkKlxcXFwuXFxcXGQrJT8nO1xuLy8gQWxsb3cgcG9zaXRpdmUvbmVnYXRpdmUgaW50ZWdlci9udW1iZXIuICBEb24ndCBjYXB0dXJlIHRoZSBlaXRoZXIvb3IsIGp1c3QgdGhlIGVudGlyZSBvdXRjb21lLlxudmFyIENTU19VTklUID0gXCIoPzpcIiArIENTU19OVU1CRVIgKyBcIil8KD86XCIgKyBDU1NfSU5URUdFUiArIFwiKVwiO1xuLy8gQWN0dWFsIG1hdGNoaW5nLlxuLy8gUGFyZW50aGVzZXMgYW5kIGNvbW1hcyBhcmUgb3B0aW9uYWwsIGJ1dCBub3QgcmVxdWlyZWQuXG4vLyBXaGl0ZXNwYWNlIGNhbiB0YWtlIHRoZSBwbGFjZSBvZiBjb21tYXMgb3Igb3BlbmluZyBwYXJlblxudmFyIFBFUk1JU1NJVkVfTUFUQ0gzID0gXCJbXFxcXHN8XFxcXChdKyhcIiArIENTU19VTklUICsgXCIpWyx8XFxcXHNdKyhcIiArIENTU19VTklUICsgXCIpWyx8XFxcXHNdKyhcIiArIENTU19VTklUICsgXCIpXFxcXHMqXFxcXCk/XCI7XG52YXIgUEVSTUlTU0lWRV9NQVRDSDQgPSBcIltcXFxcc3xcXFxcKF0rKFwiICsgQ1NTX1VOSVQgKyBcIilbLHxcXFxcc10rKFwiICsgQ1NTX1VOSVQgKyBcIilbLHxcXFxcc10rKFwiICsgQ1NTX1VOSVQgKyBcIilbLHxcXFxcc10rKFwiICsgQ1NTX1VOSVQgKyBcIilcXFxccypcXFxcKT9cIjtcbnZhciBtYXRjaGVycyA9IHtcbiAgICBDU1NfVU5JVDogbmV3IFJlZ0V4cChDU1NfVU5JVCksXG4gICAgcmdiOiBuZXcgUmVnRXhwKCdyZ2InICsgUEVSTUlTU0lWRV9NQVRDSDMpLFxuICAgIHJnYmE6IG5ldyBSZWdFeHAoJ3JnYmEnICsgUEVSTUlTU0lWRV9NQVRDSDQpLFxuICAgIGhzbDogbmV3IFJlZ0V4cCgnaHNsJyArIFBFUk1JU1NJVkVfTUFUQ0gzKSxcbiAgICBoc2xhOiBuZXcgUmVnRXhwKCdoc2xhJyArIFBFUk1JU1NJVkVfTUFUQ0g0KSxcbiAgICBoc3Y6IG5ldyBSZWdFeHAoJ2hzdicgKyBQRVJNSVNTSVZFX01BVENIMyksXG4gICAgaHN2YTogbmV3IFJlZ0V4cCgnaHN2YScgKyBQRVJNSVNTSVZFX01BVENINCksXG4gICAgaGV4MzogL14jPyhbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KSQvLFxuICAgIGhleDY6IC9eIz8oWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkkLyxcbiAgICBoZXg0OiAvXiM/KFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KSQvLFxuICAgIGhleDg6IC9eIz8oWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pJC8sXG59O1xuLyoqXG4gKiBQZXJtaXNzaXZlIHN0cmluZyBwYXJzaW5nLiAgVGFrZSBpbiBhIG51bWJlciBvZiBmb3JtYXRzLCBhbmQgb3V0cHV0IGFuIG9iamVjdFxuICogYmFzZWQgb24gZGV0ZWN0ZWQgZm9ybWF0LiAgUmV0dXJucyBgeyByLCBnLCBiIH1gIG9yIGB7IGgsIHMsIGwgfWAgb3IgYHsgaCwgcywgdn1gXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdJbnB1dFRvT2JqZWN0KGNvbG9yKSB7XG4gICAgY29sb3IgPSBjb2xvci50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoY29sb3IubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIG5hbWVkID0gZmFsc2U7XG4gICAgaWYgKG5hbWVzW2NvbG9yXSkge1xuICAgICAgICBjb2xvciA9IG5hbWVzW2NvbG9yXTtcbiAgICAgICAgbmFtZWQgPSB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb2xvciA9PT0gJ3RyYW5zcGFyZW50Jykge1xuICAgICAgICByZXR1cm4geyByOiAwLCBnOiAwLCBiOiAwLCBhOiAwLCBmb3JtYXQ6ICduYW1lJyB9O1xuICAgIH1cbiAgICAvLyBUcnkgdG8gbWF0Y2ggc3RyaW5nIGlucHV0IHVzaW5nIHJlZ3VsYXIgZXhwcmVzc2lvbnMuXG4gICAgLy8gS2VlcCBtb3N0IG9mIHRoZSBudW1iZXIgYm91bmRpbmcgb3V0IG9mIHRoaXMgZnVuY3Rpb24gLSBkb24ndCB3b3JyeSBhYm91dCBbMCwxXSBvciBbMCwxMDBdIG9yIFswLDM2MF1cbiAgICAvLyBKdXN0IHJldHVybiBhbiBvYmplY3QgYW5kIGxldCB0aGUgY29udmVyc2lvbiBmdW5jdGlvbnMgaGFuZGxlIHRoYXQuXG4gICAgLy8gVGhpcyB3YXkgdGhlIHJlc3VsdCB3aWxsIGJlIHRoZSBzYW1lIHdoZXRoZXIgdGhlIHRpbnljb2xvciBpcyBpbml0aWFsaXplZCB3aXRoIHN0cmluZyBvciBvYmplY3QuXG4gICAgdmFyIG1hdGNoID0gbWF0Y2hlcnMucmdiLmV4ZWMoY29sb3IpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICByZXR1cm4geyByOiBtYXRjaFsxXSwgZzogbWF0Y2hbMl0sIGI6IG1hdGNoWzNdIH07XG4gICAgfVxuICAgIG1hdGNoID0gbWF0Y2hlcnMucmdiYS5leGVjKGNvbG9yKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHsgcjogbWF0Y2hbMV0sIGc6IG1hdGNoWzJdLCBiOiBtYXRjaFszXSwgYTogbWF0Y2hbNF0gfTtcbiAgICB9XG4gICAgbWF0Y2ggPSBtYXRjaGVycy5oc2wuZXhlYyhjb2xvcik7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgbDogbWF0Y2hbM10gfTtcbiAgICB9XG4gICAgbWF0Y2ggPSBtYXRjaGVycy5oc2xhLmV4ZWMoY29sb3IpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICByZXR1cm4geyBoOiBtYXRjaFsxXSwgczogbWF0Y2hbMl0sIGw6IG1hdGNoWzNdLCBhOiBtYXRjaFs0XSB9O1xuICAgIH1cbiAgICBtYXRjaCA9IG1hdGNoZXJzLmhzdi5leGVjKGNvbG9yKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHsgaDogbWF0Y2hbMV0sIHM6IG1hdGNoWzJdLCB2OiBtYXRjaFszXSB9O1xuICAgIH1cbiAgICBtYXRjaCA9IG1hdGNoZXJzLmhzdmEuZXhlYyhjb2xvcik7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgdjogbWF0Y2hbM10sIGE6IG1hdGNoWzRdIH07XG4gICAgfVxuICAgIG1hdGNoID0gbWF0Y2hlcnMuaGV4OC5leGVjKGNvbG9yKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6IHBhcnNlSW50RnJvbUhleChtYXRjaFsxXSksXG4gICAgICAgICAgICBnOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMl0pLFxuICAgICAgICAgICAgYjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzNdKSxcbiAgICAgICAgICAgIGE6IGNvbnZlcnRIZXhUb0RlY2ltYWwobWF0Y2hbNF0pLFxuICAgICAgICAgICAgZm9ybWF0OiBuYW1lZCA/ICduYW1lJyA6ICdoZXg4JyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgbWF0Y2ggPSBtYXRjaGVycy5oZXg2LmV4ZWMoY29sb3IpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzFdKSxcbiAgICAgICAgICAgIGc6IHBhcnNlSW50RnJvbUhleChtYXRjaFsyXSksXG4gICAgICAgICAgICBiOiBwYXJzZUludEZyb21IZXgobWF0Y2hbM10pLFxuICAgICAgICAgICAgZm9ybWF0OiBuYW1lZCA/ICduYW1lJyA6ICdoZXgnLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBtYXRjaCA9IG1hdGNoZXJzLmhleDQuZXhlYyhjb2xvcik7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMV0gKyBtYXRjaFsxXSksXG4gICAgICAgICAgICBnOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMl0gKyBtYXRjaFsyXSksXG4gICAgICAgICAgICBiOiBwYXJzZUludEZyb21IZXgobWF0Y2hbM10gKyBtYXRjaFszXSksXG4gICAgICAgICAgICBhOiBjb252ZXJ0SGV4VG9EZWNpbWFsKG1hdGNoWzRdICsgbWF0Y2hbNF0pLFxuICAgICAgICAgICAgZm9ybWF0OiBuYW1lZCA/ICduYW1lJyA6ICdoZXg4JyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgbWF0Y2ggPSBtYXRjaGVycy5oZXgzLmV4ZWMoY29sb3IpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzFdICsgbWF0Y2hbMV0pLFxuICAgICAgICAgICAgZzogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzJdICsgbWF0Y2hbMl0pLFxuICAgICAgICAgICAgYjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzNdICsgbWF0Y2hbM10pLFxuICAgICAgICAgICAgZm9ybWF0OiBuYW1lZCA/ICduYW1lJyA6ICdoZXgnLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIENoZWNrIHRvIHNlZSBpZiBpdCBsb29rcyBsaWtlIGEgQ1NTIHVuaXRcbiAqIChzZWUgYG1hdGNoZXJzYCBhYm92ZSBmb3IgZGVmaW5pdGlvbikuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkQ1NTVW5pdChjb2xvcikge1xuICAgIHJldHVybiBCb29sZWFuKG1hdGNoZXJzLkNTU19VTklULmV4ZWMoU3RyaW5nKGNvbG9yKSkpO1xufVxuIiwiaW1wb3J0IHsgcmdiYVRvSGV4LCByZ2JUb0hleCwgcmdiVG9Ic2wsIHJnYlRvSHN2LCBudW1iZXJJbnB1dFRvT2JqZWN0IH0gZnJvbSAnLi9jb252ZXJzaW9uJztcbmltcG9ydCB7IG5hbWVzIH0gZnJvbSAnLi9jc3MtY29sb3ItbmFtZXMnO1xuaW1wb3J0IHsgaW5wdXRUb1JHQiB9IGZyb20gJy4vZm9ybWF0LWlucHV0JztcbmltcG9ydCB7IGJvdW5kMDEsIGJvdW5kQWxwaGEsIGNsYW1wMDEgfSBmcm9tICcuL3V0aWwnO1xudmFyIFRpbnlDb2xvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUaW55Q29sb3IoY29sb3IsIG9wdHMpIHtcbiAgICAgICAgaWYgKGNvbG9yID09PSB2b2lkIDApIHsgY29sb3IgPSAnJzsgfVxuICAgICAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7IG9wdHMgPSB7fTsgfVxuICAgICAgICB2YXIgX2E7XG4gICAgICAgIC8vIElmIGlucHV0IGlzIGFscmVhZHkgYSB0aW55Y29sb3IsIHJldHVybiBpdHNlbGZcbiAgICAgICAgaWYgKGNvbG9yIGluc3RhbmNlb2YgVGlueUNvbG9yKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RydWN0b3ItcmV0dXJuXG4gICAgICAgICAgICByZXR1cm4gY29sb3I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNvbG9yID0gbnVtYmVySW5wdXRUb09iamVjdChjb2xvcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcmlnaW5hbElucHV0ID0gY29sb3I7XG4gICAgICAgIHZhciByZ2IgPSBpbnB1dFRvUkdCKGNvbG9yKTtcbiAgICAgICAgdGhpcy5vcmlnaW5hbElucHV0ID0gY29sb3I7XG4gICAgICAgIHRoaXMuciA9IHJnYi5yO1xuICAgICAgICB0aGlzLmcgPSByZ2IuZztcbiAgICAgICAgdGhpcy5iID0gcmdiLmI7XG4gICAgICAgIHRoaXMuYSA9IHJnYi5hO1xuICAgICAgICB0aGlzLnJvdW5kQSA9IE1hdGgucm91bmQoMTAwICogdGhpcy5hKSAvIDEwMDtcbiAgICAgICAgdGhpcy5mb3JtYXQgPSAoX2EgPSBvcHRzLmZvcm1hdCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogcmdiLmZvcm1hdDtcbiAgICAgICAgdGhpcy5ncmFkaWVudFR5cGUgPSBvcHRzLmdyYWRpZW50VHlwZTtcbiAgICAgICAgLy8gRG9uJ3QgbGV0IHRoZSByYW5nZSBvZiBbMCwyNTVdIGNvbWUgYmFjayBpbiBbMCwxXS5cbiAgICAgICAgLy8gUG90ZW50aWFsbHkgbG9zZSBhIGxpdHRsZSBiaXQgb2YgcHJlY2lzaW9uIGhlcmUsIGJ1dCB3aWxsIGZpeCBpc3N1ZXMgd2hlcmVcbiAgICAgICAgLy8gLjUgZ2V0cyBpbnRlcnByZXRlZCBhcyBoYWxmIG9mIHRoZSB0b3RhbCwgaW5zdGVhZCBvZiBoYWxmIG9mIDFcbiAgICAgICAgLy8gSWYgaXQgd2FzIHN1cHBvc2VkIHRvIGJlIDEyOCwgdGhpcyB3YXMgYWxyZWFkeSB0YWtlbiBjYXJlIG9mIGJ5IGBpbnB1dFRvUmdiYFxuICAgICAgICBpZiAodGhpcy5yIDwgMSkge1xuICAgICAgICAgICAgdGhpcy5yID0gTWF0aC5yb3VuZCh0aGlzLnIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmcgPCAxKSB7XG4gICAgICAgICAgICB0aGlzLmcgPSBNYXRoLnJvdW5kKHRoaXMuZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYiA8IDEpIHtcbiAgICAgICAgICAgIHRoaXMuYiA9IE1hdGgucm91bmQodGhpcy5iKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzVmFsaWQgPSByZ2Iub2s7XG4gICAgfVxuICAgIFRpbnlDb2xvci5wcm90b3R5cGUuaXNEYXJrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRCcmlnaHRuZXNzKCkgPCAxMjg7XG4gICAgfTtcbiAgICBUaW55Q29sb3IucHJvdG90eXBlLmlzTGlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5pc0RhcmsoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHBlcmNlaXZlZCBicmlnaHRuZXNzIG9mIHRoZSBjb2xvciwgZnJvbSAwLTI1NS5cbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLmdldEJyaWdodG5lc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0FFUlQjY29sb3ItY29udHJhc3RcbiAgICAgICAgdmFyIHJnYiA9IHRoaXMudG9SZ2IoKTtcbiAgICAgICAgcmV0dXJuIChyZ2IuciAqIDI5OSArIHJnYi5nICogNTg3ICsgcmdiLmIgKiAxMTQpIC8gMTAwMDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHBlcmNlaXZlZCBsdW1pbmFuY2Ugb2YgYSBjb2xvciwgZnJvbSAwLTEuXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5nZXRMdW1pbmFuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDgvUkVDLVdDQUcyMC0yMDA4MTIxMS8jcmVsYXRpdmVsdW1pbmFuY2VkZWZcbiAgICAgICAgdmFyIHJnYiA9IHRoaXMudG9SZ2IoKTtcbiAgICAgICAgdmFyIFI7XG4gICAgICAgIHZhciBHO1xuICAgICAgICB2YXIgQjtcbiAgICAgICAgdmFyIFJzUkdCID0gcmdiLnIgLyAyNTU7XG4gICAgICAgIHZhciBHc1JHQiA9IHJnYi5nIC8gMjU1O1xuICAgICAgICB2YXIgQnNSR0IgPSByZ2IuYiAvIDI1NTtcbiAgICAgICAgaWYgKFJzUkdCIDw9IDAuMDM5MjgpIHtcbiAgICAgICAgICAgIFIgPSBSc1JHQiAvIDEyLjkyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1leHBvbmVudGlhdGlvbi1vcGVyYXRvclxuICAgICAgICAgICAgUiA9IE1hdGgucG93KChSc1JHQiArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChHc1JHQiA8PSAwLjAzOTI4KSB7XG4gICAgICAgICAgICBHID0gR3NSR0IgLyAxMi45MjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZXhwb25lbnRpYXRpb24tb3BlcmF0b3JcbiAgICAgICAgICAgIEcgPSBNYXRoLnBvdygoR3NSR0IgKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQnNSR0IgPD0gMC4wMzkyOCkge1xuICAgICAgICAgICAgQiA9IEJzUkdCIC8gMTIuOTI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWV4cG9uZW50aWF0aW9uLW9wZXJhdG9yXG4gICAgICAgICAgICBCID0gTWF0aC5wb3coKEJzUkdCICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDAuMjEyNiAqIFIgKyAwLjcxNTIgKiBHICsgMC4wNzIyICogQjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGFscGhhIHZhbHVlIG9mIGEgY29sb3IsIGZyb20gMC0xLlxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUuZ2V0QWxwaGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmE7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBhbHBoYSB2YWx1ZSBvbiB0aGUgY3VycmVudCBjb2xvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhbHBoYSAtIFRoZSBuZXcgYWxwaGEgdmFsdWUuIFRoZSBhY2NlcHRlZCByYW5nZSBpcyAwLTEuXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5zZXRBbHBoYSA9IGZ1bmN0aW9uIChhbHBoYSkge1xuICAgICAgICB0aGlzLmEgPSBib3VuZEFscGhhKGFscGhhKTtcbiAgICAgICAgdGhpcy5yb3VuZEEgPSBNYXRoLnJvdW5kKDEwMCAqIHRoaXMuYSkgLyAxMDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgb2JqZWN0IGFzIGEgSFNWQSBvYmplY3QuXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS50b0hzdiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGhzdiA9IHJnYlRvSHN2KHRoaXMuciwgdGhpcy5nLCB0aGlzLmIpO1xuICAgICAgICByZXR1cm4geyBoOiBoc3YuaCAqIDM2MCwgczogaHN2LnMsIHY6IGhzdi52LCBhOiB0aGlzLmEgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGhzdmEgdmFsdWVzIGludGVycG9sYXRlZCBpbnRvIGEgc3RyaW5nIHdpdGggdGhlIGZvbGxvd2luZyBmb3JtYXQ6XG4gICAgICogXCJoc3ZhKHh4eCwgeHh4LCB4eHgsIHh4KVwiLlxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9Ic3ZTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoc3YgPSByZ2JUb0hzdih0aGlzLnIsIHRoaXMuZywgdGhpcy5iKTtcbiAgICAgICAgdmFyIGggPSBNYXRoLnJvdW5kKGhzdi5oICogMzYwKTtcbiAgICAgICAgdmFyIHMgPSBNYXRoLnJvdW5kKGhzdi5zICogMTAwKTtcbiAgICAgICAgdmFyIHYgPSBNYXRoLnJvdW5kKGhzdi52ICogMTAwKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYSA9PT0gMSA/IFwiaHN2KFwiICsgaCArIFwiLCBcIiArIHMgKyBcIiUsIFwiICsgdiArIFwiJSlcIiA6IFwiaHN2YShcIiArIGggKyBcIiwgXCIgKyBzICsgXCIlLCBcIiArIHYgKyBcIiUsIFwiICsgdGhpcy5yb3VuZEEgKyBcIilcIjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG9iamVjdCBhcyBhIEhTTEEgb2JqZWN0LlxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9Ic2wgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoc2wgPSByZ2JUb0hzbCh0aGlzLnIsIHRoaXMuZywgdGhpcy5iKTtcbiAgICAgICAgcmV0dXJuIHsgaDogaHNsLmggKiAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubCwgYTogdGhpcy5hIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBoc2xhIHZhbHVlcyBpbnRlcnBvbGF0ZWQgaW50byBhIHN0cmluZyB3aXRoIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxuICAgICAqIFwiaHNsYSh4eHgsIHh4eCwgeHh4LCB4eClcIi5cbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnRvSHNsU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaHNsID0gcmdiVG9Ic2wodGhpcy5yLCB0aGlzLmcsIHRoaXMuYik7XG4gICAgICAgIHZhciBoID0gTWF0aC5yb3VuZChoc2wuaCAqIDM2MCk7XG4gICAgICAgIHZhciBzID0gTWF0aC5yb3VuZChoc2wucyAqIDEwMCk7XG4gICAgICAgIHZhciBsID0gTWF0aC5yb3VuZChoc2wubCAqIDEwMCk7XG4gICAgICAgIHJldHVybiB0aGlzLmEgPT09IDEgPyBcImhzbChcIiArIGggKyBcIiwgXCIgKyBzICsgXCIlLCBcIiArIGwgKyBcIiUpXCIgOiBcImhzbGEoXCIgKyBoICsgXCIsIFwiICsgcyArIFwiJSwgXCIgKyBsICsgXCIlLCBcIiArIHRoaXMucm91bmRBICsgXCIpXCI7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBoZXggdmFsdWUgb2YgdGhlIGNvbG9yLlxuICAgICAqIEBwYXJhbSBhbGxvdzNDaGFyIHdpbGwgc2hvcnRlbiBoZXggdmFsdWUgdG8gMyBjaGFyIGlmIHBvc3NpYmxlXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS50b0hleCA9IGZ1bmN0aW9uIChhbGxvdzNDaGFyKSB7XG4gICAgICAgIGlmIChhbGxvdzNDaGFyID09PSB2b2lkIDApIHsgYWxsb3czQ2hhciA9IGZhbHNlOyB9XG4gICAgICAgIHJldHVybiByZ2JUb0hleCh0aGlzLnIsIHRoaXMuZywgdGhpcy5iLCBhbGxvdzNDaGFyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGhleCB2YWx1ZSBvZiB0aGUgY29sb3IgLXdpdGggYSAjIGFwcGVuZWQuXG4gICAgICogQHBhcmFtIGFsbG93M0NoYXIgd2lsbCBzaG9ydGVuIGhleCB2YWx1ZSB0byAzIGNoYXIgaWYgcG9zc2libGVcbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnRvSGV4U3RyaW5nID0gZnVuY3Rpb24gKGFsbG93M0NoYXIpIHtcbiAgICAgICAgaWYgKGFsbG93M0NoYXIgPT09IHZvaWQgMCkgeyBhbGxvdzNDaGFyID0gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuICcjJyArIHRoaXMudG9IZXgoYWxsb3czQ2hhcik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBoZXggOCB2YWx1ZSBvZiB0aGUgY29sb3IuXG4gICAgICogQHBhcmFtIGFsbG93NENoYXIgd2lsbCBzaG9ydGVuIGhleCB2YWx1ZSB0byA0IGNoYXIgaWYgcG9zc2libGVcbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnRvSGV4OCA9IGZ1bmN0aW9uIChhbGxvdzRDaGFyKSB7XG4gICAgICAgIGlmIChhbGxvdzRDaGFyID09PSB2b2lkIDApIHsgYWxsb3c0Q2hhciA9IGZhbHNlOyB9XG4gICAgICAgIHJldHVybiByZ2JhVG9IZXgodGhpcy5yLCB0aGlzLmcsIHRoaXMuYiwgdGhpcy5hLCBhbGxvdzRDaGFyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGhleCA4IHZhbHVlIG9mIHRoZSBjb2xvciAtd2l0aCBhICMgYXBwZW5lZC5cbiAgICAgKiBAcGFyYW0gYWxsb3c0Q2hhciB3aWxsIHNob3J0ZW4gaGV4IHZhbHVlIHRvIDQgY2hhciBpZiBwb3NzaWJsZVxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9IZXg4U3RyaW5nID0gZnVuY3Rpb24gKGFsbG93NENoYXIpIHtcbiAgICAgICAgaWYgKGFsbG93NENoYXIgPT09IHZvaWQgMCkgeyBhbGxvdzRDaGFyID0gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuICcjJyArIHRoaXMudG9IZXg4KGFsbG93NENoYXIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgb2JqZWN0IGFzIGEgUkdCQSBvYmplY3QuXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS50b1JnYiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6IE1hdGgucm91bmQodGhpcy5yKSxcbiAgICAgICAgICAgIGc6IE1hdGgucm91bmQodGhpcy5nKSxcbiAgICAgICAgICAgIGI6IE1hdGgucm91bmQodGhpcy5iKSxcbiAgICAgICAgICAgIGE6IHRoaXMuYSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIFJHQkEgdmFsdWVzIGludGVycG9sYXRlZCBpbnRvIGEgc3RyaW5nIHdpdGggdGhlIGZvbGxvd2luZyBmb3JtYXQ6XG4gICAgICogXCJSR0JBKHh4eCwgeHh4LCB4eHgsIHh4KVwiLlxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9SZ2JTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByID0gTWF0aC5yb3VuZCh0aGlzLnIpO1xuICAgICAgICB2YXIgZyA9IE1hdGgucm91bmQodGhpcy5nKTtcbiAgICAgICAgdmFyIGIgPSBNYXRoLnJvdW5kKHRoaXMuYik7XG4gICAgICAgIHJldHVybiB0aGlzLmEgPT09IDEgPyBcInJnYihcIiArIHIgKyBcIiwgXCIgKyBnICsgXCIsIFwiICsgYiArIFwiKVwiIDogXCJyZ2JhKFwiICsgciArIFwiLCBcIiArIGcgKyBcIiwgXCIgKyBiICsgXCIsIFwiICsgdGhpcy5yb3VuZEEgKyBcIilcIjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG9iamVjdCBhcyBhIFJHQkEgb2JqZWN0LlxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9QZXJjZW50YWdlUmdiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZm10ID0gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoYm91bmQwMSh4LCAyNTUpICogMTAwKSArIFwiJVwiOyB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogZm10KHRoaXMuciksXG4gICAgICAgICAgICBnOiBmbXQodGhpcy5nKSxcbiAgICAgICAgICAgIGI6IGZtdCh0aGlzLmIpLFxuICAgICAgICAgICAgYTogdGhpcy5hLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgUkdCQSByZWxhdGl2ZSB2YWx1ZXMgaW50ZXJwb2xhdGVkIGludG8gYSBzdHJpbmdcbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnRvUGVyY2VudGFnZVJnYlN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJuZCA9IGZ1bmN0aW9uICh4KSB7IHJldHVybiBNYXRoLnJvdW5kKGJvdW5kMDEoeCwgMjU1KSAqIDEwMCk7IH07XG4gICAgICAgIHJldHVybiB0aGlzLmEgPT09IDFcbiAgICAgICAgICAgID8gXCJyZ2IoXCIgKyBybmQodGhpcy5yKSArIFwiJSwgXCIgKyBybmQodGhpcy5nKSArIFwiJSwgXCIgKyBybmQodGhpcy5iKSArIFwiJSlcIlxuICAgICAgICAgICAgOiBcInJnYmEoXCIgKyBybmQodGhpcy5yKSArIFwiJSwgXCIgKyBybmQodGhpcy5nKSArIFwiJSwgXCIgKyBybmQodGhpcy5iKSArIFwiJSwgXCIgKyB0aGlzLnJvdW5kQSArIFwiKVwiO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhlICdyZWFsJyBuYW1lIG9mIHRoZSBjb2xvciAtaWYgdGhlcmUgaXMgb25lLlxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9OYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5hID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3RyYW5zcGFyZW50JztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5hIDwgMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBoZXggPSAnIycgKyByZ2JUb0hleCh0aGlzLnIsIHRoaXMuZywgdGhpcy5iLCBmYWxzZSk7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3QuZW50cmllcyhuYW1lcyk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgX2IgPSBfYVtfaV0sIGtleSA9IF9iWzBdLCB2YWx1ZSA9IF9iWzFdO1xuICAgICAgICAgICAgaWYgKGhleCA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgY29sb3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZm9ybWF0IC0gVGhlIGZvcm1hdCB0byBiZSB1c2VkIHdoZW4gZGlzcGxheWluZyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uLlxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHZhciBmb3JtYXRTZXQgPSBCb29sZWFuKGZvcm1hdCk7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdCAhPT0gbnVsbCAmJiBmb3JtYXQgIT09IHZvaWQgMCA/IGZvcm1hdCA6IHRoaXMuZm9ybWF0O1xuICAgICAgICB2YXIgZm9ybWF0dGVkU3RyaW5nID0gZmFsc2U7XG4gICAgICAgIHZhciBoYXNBbHBoYSA9IHRoaXMuYSA8IDEgJiYgdGhpcy5hID49IDA7XG4gICAgICAgIHZhciBuZWVkc0FscGhhRm9ybWF0ID0gIWZvcm1hdFNldCAmJiBoYXNBbHBoYSAmJiAoZm9ybWF0LnN0YXJ0c1dpdGgoJ2hleCcpIHx8IGZvcm1hdCA9PT0gJ25hbWUnKTtcbiAgICAgICAgaWYgKG5lZWRzQWxwaGFGb3JtYXQpIHtcbiAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgXCJ0cmFuc3BhcmVudFwiLCBhbGwgb3RoZXIgbm9uLWFscGhhIGZvcm1hdHNcbiAgICAgICAgICAgIC8vIHdpbGwgcmV0dXJuIHJnYmEgd2hlbiB0aGVyZSBpcyB0cmFuc3BhcmVuY3kuXG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnbmFtZScgJiYgdGhpcy5hID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9OYW1lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50b1JnYlN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdyZ2InKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvUmdiU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ3ByZ2InKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvUGVyY2VudGFnZVJnYlN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdoZXgnIHx8IGZvcm1hdCA9PT0gJ2hleDYnKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvSGV4U3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2hleDMnKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvSGV4U3RyaW5nKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdoZXg0Jykge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hleDhTdHJpbmcodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2hleDgnKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvSGV4OFN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICduYW1lJykge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b05hbWUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSAnaHNsJykge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hzbFN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdoc3YnKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSB0aGlzLnRvSHN2U3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlZFN0cmluZyB8fCB0aGlzLnRvSGV4U3RyaW5nKCk7XG4gICAgfTtcbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKE1hdGgucm91bmQodGhpcy5yKSA8PCAxNikgKyAoTWF0aC5yb3VuZCh0aGlzLmcpIDw8IDgpICsgTWF0aC5yb3VuZCh0aGlzLmIpO1xuICAgIH07XG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUaW55Q29sb3IodGhpcy50b1N0cmluZygpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIExpZ2h0ZW4gdGhlIGNvbG9yIGEgZ2l2ZW4gYW1vdW50LiBQcm92aWRpbmcgMTAwIHdpbGwgYWx3YXlzIHJldHVybiB3aGl0ZS5cbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gdmFsaWQgYmV0d2VlbiAxLTEwMFxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUubGlnaHRlbiA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgaWYgKGFtb3VudCA9PT0gdm9pZCAwKSB7IGFtb3VudCA9IDEwOyB9XG4gICAgICAgIHZhciBoc2wgPSB0aGlzLnRvSHNsKCk7XG4gICAgICAgIGhzbC5sICs9IGFtb3VudCAvIDEwMDtcbiAgICAgICAgaHNsLmwgPSBjbGFtcDAxKGhzbC5sKTtcbiAgICAgICAgcmV0dXJuIG5ldyBUaW55Q29sb3IoaHNsKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEJyaWdodGVuIHRoZSBjb2xvciBhIGdpdmVuIGFtb3VudCwgZnJvbSAwIHRvIDEwMC5cbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gdmFsaWQgYmV0d2VlbiAxLTEwMFxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUuYnJpZ2h0ZW4gPSBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgIGlmIChhbW91bnQgPT09IHZvaWQgMCkgeyBhbW91bnQgPSAxMDsgfVxuICAgICAgICB2YXIgcmdiID0gdGhpcy50b1JnYigpO1xuICAgICAgICByZ2IuciA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgcmdiLnIgLSBNYXRoLnJvdW5kKDI1NSAqIC0oYW1vdW50IC8gMTAwKSkpKTtcbiAgICAgICAgcmdiLmcgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIHJnYi5nIC0gTWF0aC5yb3VuZCgyNTUgKiAtKGFtb3VudCAvIDEwMCkpKSk7XG4gICAgICAgIHJnYi5iID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCByZ2IuYiAtIE1hdGgucm91bmQoMjU1ICogLShhbW91bnQgLyAxMDApKSkpO1xuICAgICAgICByZXR1cm4gbmV3IFRpbnlDb2xvcihyZ2IpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGFya2VuIHRoZSBjb2xvciBhIGdpdmVuIGFtb3VudCwgZnJvbSAwIHRvIDEwMC5cbiAgICAgKiBQcm92aWRpbmcgMTAwIHdpbGwgYWx3YXlzIHJldHVybiBibGFjay5cbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gdmFsaWQgYmV0d2VlbiAxLTEwMFxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUuZGFya2VuID0gZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICBpZiAoYW1vdW50ID09PSB2b2lkIDApIHsgYW1vdW50ID0gMTA7IH1cbiAgICAgICAgdmFyIGhzbCA9IHRoaXMudG9Ic2woKTtcbiAgICAgICAgaHNsLmwgLT0gYW1vdW50IC8gMTAwO1xuICAgICAgICBoc2wubCA9IGNsYW1wMDEoaHNsLmwpO1xuICAgICAgICByZXR1cm4gbmV3IFRpbnlDb2xvcihoc2wpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWl4IHRoZSBjb2xvciB3aXRoIHB1cmUgd2hpdGUsIGZyb20gMCB0byAxMDAuXG4gICAgICogUHJvdmlkaW5nIDAgd2lsbCBkbyBub3RoaW5nLCBwcm92aWRpbmcgMTAwIHdpbGwgYWx3YXlzIHJldHVybiB3aGl0ZS5cbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gdmFsaWQgYmV0d2VlbiAxLTEwMFxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudGludCA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgaWYgKGFtb3VudCA9PT0gdm9pZCAwKSB7IGFtb3VudCA9IDEwOyB9XG4gICAgICAgIHJldHVybiB0aGlzLm1peCgnd2hpdGUnLCBhbW91bnQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWl4IHRoZSBjb2xvciB3aXRoIHB1cmUgYmxhY2ssIGZyb20gMCB0byAxMDAuXG4gICAgICogUHJvdmlkaW5nIDAgd2lsbCBkbyBub3RoaW5nLCBwcm92aWRpbmcgMTAwIHdpbGwgYWx3YXlzIHJldHVybiBibGFjay5cbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gdmFsaWQgYmV0d2VlbiAxLTEwMFxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUuc2hhZGUgPSBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgIGlmIChhbW91bnQgPT09IHZvaWQgMCkgeyBhbW91bnQgPSAxMDsgfVxuICAgICAgICByZXR1cm4gdGhpcy5taXgoJ2JsYWNrJywgYW1vdW50KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERlc2F0dXJhdGUgdGhlIGNvbG9yIGEgZ2l2ZW4gYW1vdW50LCBmcm9tIDAgdG8gMTAwLlxuICAgICAqIFByb3ZpZGluZyAxMDAgd2lsbCBpcyB0aGUgc2FtZSBhcyBjYWxsaW5nIGdyZXlzY2FsZVxuICAgICAqIEBwYXJhbSBhbW91bnQgLSB2YWxpZCBiZXR3ZWVuIDEtMTAwXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5kZXNhdHVyYXRlID0gZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICBpZiAoYW1vdW50ID09PSB2b2lkIDApIHsgYW1vdW50ID0gMTA7IH1cbiAgICAgICAgdmFyIGhzbCA9IHRoaXMudG9Ic2woKTtcbiAgICAgICAgaHNsLnMgLT0gYW1vdW50IC8gMTAwO1xuICAgICAgICBoc2wucyA9IGNsYW1wMDEoaHNsLnMpO1xuICAgICAgICByZXR1cm4gbmV3IFRpbnlDb2xvcihoc2wpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2F0dXJhdGUgdGhlIGNvbG9yIGEgZ2l2ZW4gYW1vdW50LCBmcm9tIDAgdG8gMTAwLlxuICAgICAqIEBwYXJhbSBhbW91bnQgLSB2YWxpZCBiZXR3ZWVuIDEtMTAwXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5zYXR1cmF0ZSA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgaWYgKGFtb3VudCA9PT0gdm9pZCAwKSB7IGFtb3VudCA9IDEwOyB9XG4gICAgICAgIHZhciBoc2wgPSB0aGlzLnRvSHNsKCk7XG4gICAgICAgIGhzbC5zICs9IGFtb3VudCAvIDEwMDtcbiAgICAgICAgaHNsLnMgPSBjbGFtcDAxKGhzbC5zKTtcbiAgICAgICAgcmV0dXJuIG5ldyBUaW55Q29sb3IoaHNsKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENvbXBsZXRlbHkgZGVzYXR1cmF0ZXMgYSBjb2xvciBpbnRvIGdyZXlzY2FsZS5cbiAgICAgKiBTYW1lIGFzIGNhbGxpbmcgYGRlc2F0dXJhdGUoMTAwKWBcbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLmdyZXlzY2FsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVzYXR1cmF0ZSgxMDApO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU3BpbiB0YWtlcyBhIHBvc2l0aXZlIG9yIG5lZ2F0aXZlIGFtb3VudCB3aXRoaW4gWy0zNjAsIDM2MF0gaW5kaWNhdGluZyB0aGUgY2hhbmdlIG9mIGh1ZS5cbiAgICAgKiBWYWx1ZXMgb3V0c2lkZSBvZiB0aGlzIHJhbmdlIHdpbGwgYmUgd3JhcHBlZCBpbnRvIHRoaXMgcmFuZ2UuXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5zcGluID0gZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICB2YXIgaHNsID0gdGhpcy50b0hzbCgpO1xuICAgICAgICB2YXIgaHVlID0gKGhzbC5oICsgYW1vdW50KSAlIDM2MDtcbiAgICAgICAgaHNsLmggPSBodWUgPCAwID8gMzYwICsgaHVlIDogaHVlO1xuICAgICAgICByZXR1cm4gbmV3IFRpbnlDb2xvcihoc2wpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTWl4IHRoZSBjdXJyZW50IGNvbG9yIGEgZ2l2ZW4gYW1vdW50IHdpdGggYW5vdGhlciBjb2xvciwgZnJvbSAwIHRvIDEwMC5cbiAgICAgKiAwIG1lYW5zIG5vIG1peGluZyAocmV0dXJuIGN1cnJlbnQgY29sb3IpLlxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUubWl4ID0gZnVuY3Rpb24gKGNvbG9yLCBhbW91bnQpIHtcbiAgICAgICAgaWYgKGFtb3VudCA9PT0gdm9pZCAwKSB7IGFtb3VudCA9IDUwOyB9XG4gICAgICAgIHZhciByZ2IxID0gdGhpcy50b1JnYigpO1xuICAgICAgICB2YXIgcmdiMiA9IG5ldyBUaW55Q29sb3IoY29sb3IpLnRvUmdiKCk7XG4gICAgICAgIHZhciBwID0gYW1vdW50IC8gMTAwO1xuICAgICAgICB2YXIgcmdiYSA9IHtcbiAgICAgICAgICAgIHI6IChyZ2IyLnIgLSByZ2IxLnIpICogcCArIHJnYjEucixcbiAgICAgICAgICAgIGc6IChyZ2IyLmcgLSByZ2IxLmcpICogcCArIHJnYjEuZyxcbiAgICAgICAgICAgIGI6IChyZ2IyLmIgLSByZ2IxLmIpICogcCArIHJnYjEuYixcbiAgICAgICAgICAgIGE6IChyZ2IyLmEgLSByZ2IxLmEpICogcCArIHJnYjEuYSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBUaW55Q29sb3IocmdiYSk7XG4gICAgfTtcbiAgICBUaW55Q29sb3IucHJvdG90eXBlLmFuYWxvZ291cyA9IGZ1bmN0aW9uIChyZXN1bHRzLCBzbGljZXMpIHtcbiAgICAgICAgaWYgKHJlc3VsdHMgPT09IHZvaWQgMCkgeyByZXN1bHRzID0gNjsgfVxuICAgICAgICBpZiAoc2xpY2VzID09PSB2b2lkIDApIHsgc2xpY2VzID0gMzA7IH1cbiAgICAgICAgdmFyIGhzbCA9IHRoaXMudG9Ic2woKTtcbiAgICAgICAgdmFyIHBhcnQgPSAzNjAgLyBzbGljZXM7XG4gICAgICAgIHZhciByZXQgPSBbdGhpc107XG4gICAgICAgIGZvciAoaHNsLmggPSAoaHNsLmggLSAoKHBhcnQgKiByZXN1bHRzKSA+PiAxKSArIDcyMCkgJSAzNjA7IC0tcmVzdWx0czspIHtcbiAgICAgICAgICAgIGhzbC5oID0gKGhzbC5oICsgcGFydCkgJSAzNjA7XG4gICAgICAgICAgICByZXQucHVzaChuZXcgVGlueUNvbG9yKGhzbCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiB0YWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmZ1c2lvbi9qUXVlcnkteGNvbG9yL2Jsb2IvbWFzdGVyL2pxdWVyeS54Y29sb3IuanNcbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLmNvbXBsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoc2wgPSB0aGlzLnRvSHNsKCk7XG4gICAgICAgIGhzbC5oID0gKGhzbC5oICsgMTgwKSAlIDM2MDtcbiAgICAgICAgcmV0dXJuIG5ldyBUaW55Q29sb3IoaHNsKTtcbiAgICB9O1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUubW9ub2Nocm9tYXRpYyA9IGZ1bmN0aW9uIChyZXN1bHRzKSB7XG4gICAgICAgIGlmIChyZXN1bHRzID09PSB2b2lkIDApIHsgcmVzdWx0cyA9IDY7IH1cbiAgICAgICAgdmFyIGhzdiA9IHRoaXMudG9Ic3YoKTtcbiAgICAgICAgdmFyIGggPSBoc3YuaDtcbiAgICAgICAgdmFyIHMgPSBoc3YucztcbiAgICAgICAgdmFyIHYgPSBoc3YudjtcbiAgICAgICAgdmFyIHJlcyA9IFtdO1xuICAgICAgICB2YXIgbW9kaWZpY2F0aW9uID0gMSAvIHJlc3VsdHM7XG4gICAgICAgIHdoaWxlIChyZXN1bHRzLS0pIHtcbiAgICAgICAgICAgIHJlcy5wdXNoKG5ldyBUaW55Q29sb3IoeyBoOiBoLCBzOiBzLCB2OiB2IH0pKTtcbiAgICAgICAgICAgIHYgPSAodiArIG1vZGlmaWNhdGlvbikgJSAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfTtcbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnNwbGl0Y29tcGxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGhzbCA9IHRoaXMudG9Ic2woKTtcbiAgICAgICAgdmFyIGggPSBoc2wuaDtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBuZXcgVGlueUNvbG9yKHsgaDogKGggKyA3MikgJSAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubCB9KSxcbiAgICAgICAgICAgIG5ldyBUaW55Q29sb3IoeyBoOiAoaCArIDIxNikgJSAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubCB9KSxcbiAgICAgICAgXTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENvbXB1dGUgaG93IHRoZSBjb2xvciB3b3VsZCBhcHBlYXIgb24gYSBiYWNrZ3JvdW5kXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5vbkJhY2tncm91bmQgPSBmdW5jdGlvbiAoYmFja2dyb3VuZCkge1xuICAgICAgICB2YXIgZmcgPSB0aGlzLnRvUmdiKCk7XG4gICAgICAgIHZhciBiZyA9IG5ldyBUaW55Q29sb3IoYmFja2dyb3VuZCkudG9SZ2IoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBUaW55Q29sb3Ioe1xuICAgICAgICAgICAgcjogYmcuciArIChmZy5yIC0gYmcucikgKiBmZy5hLFxuICAgICAgICAgICAgZzogYmcuZyArIChmZy5nIC0gYmcuZykgKiBmZy5hLFxuICAgICAgICAgICAgYjogYmcuYiArIChmZy5iIC0gYmcuYikgKiBmZy5hLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFsaWFzIGZvciBgcG9seWFkKDMpYFxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudHJpYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvbHlhZCgzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFsaWFzIGZvciBgcG9seWFkKDQpYFxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudGV0cmFkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wb2x5YWQoNCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgcG9seWFkIGNvbG9ycywgbGlrZSAoZm9yIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIGV0Yy4uLilcbiAgICAgKiBtb25hZCwgZHlhZCwgdHJpYWQsIHRldHJhZCwgcGVudGFkLCBoZXhhZCwgaGVwdGFkLCBvY3RhZCwgZXRjLi4uXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5wb2x5YWQgPSBmdW5jdGlvbiAobikge1xuICAgICAgICB2YXIgaHNsID0gdGhpcy50b0hzbCgpO1xuICAgICAgICB2YXIgaCA9IGhzbC5oO1xuICAgICAgICB2YXIgcmVzdWx0ID0gW3RoaXNdO1xuICAgICAgICB2YXIgaW5jcmVtZW50ID0gMzYwIC8gbjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ldyBUaW55Q29sb3IoeyBoOiAoaCArIGkgKiBpbmNyZW1lbnQpICUgMzYwLCBzOiBoc2wucywgbDogaHNsLmwgfSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBjb21wYXJlIGNvbG9yIHZzIGN1cnJlbnQgY29sb3JcbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChjb2xvcikge1xuICAgICAgICByZXR1cm4gdGhpcy50b1JnYlN0cmluZygpID09PSBuZXcgVGlueUNvbG9yKGNvbG9yKS50b1JnYlN0cmluZygpO1xuICAgIH07XG4gICAgcmV0dXJuIFRpbnlDb2xvcjtcbn0oKSk7XG5leHBvcnQgeyBUaW55Q29sb3IgfTtcbi8vIGtlcHQgZm9yIGJhY2t3YXJkcyBjb21wYXRhYmlsaXR5IHdpdGggdjFcbmV4cG9ydCBmdW5jdGlvbiB0aW55Y29sb3IoY29sb3IsIG9wdHMpIHtcbiAgICBpZiAoY29sb3IgPT09IHZvaWQgMCkgeyBjb2xvciA9ICcnOyB9XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkgeyBvcHRzID0ge307IH1cbiAgICByZXR1cm4gbmV3IFRpbnlDb2xvcihjb2xvciwgb3B0cyk7XG59XG4iLCJpbXBvcnQgeyBUaW55Q29sb3IgfSBmcm9tICdAY3RybC90aW55Y29sb3InO1xuXG52YXIgaHVlU3RlcCA9IDI7IC8vIOiJsuebuOmYtuair1xuXG52YXIgc2F0dXJhdGlvblN0ZXAgPSAwLjE2OyAvLyDppbHlkozluqbpmLbmoq/vvIzmtYXoibLpg6jliIZcblxudmFyIHNhdHVyYXRpb25TdGVwMiA9IDAuMDU7IC8vIOmlseWSjOW6pumYtuair++8jOa3seiJsumDqOWIhlxuXG52YXIgYnJpZ2h0bmVzc1N0ZXAxID0gMC4wNTsgLy8g5Lqu5bqm6Zi25qKv77yM5rWF6Imy6YOo5YiGXG5cbnZhciBicmlnaHRuZXNzU3RlcDIgPSAwLjE1OyAvLyDkuq7luqbpmLbmoq/vvIzmt7HoibLpg6jliIZcblxudmFyIGxpZ2h0Q29sb3JDb3VudCA9IDU7IC8vIOa1heiJsuaVsOmHj++8jOS4u+iJsuS4ilxuXG52YXIgZGFya0NvbG9yQ291bnQgPSA0OyAvLyDmt7HoibLmlbDph4/vvIzkuLvoibLkuItcbi8vIOaal+iJsuS4u+mimOminOiJsuaYoOWwhOWFs+ezu+ihqFxuXG52YXIgZGFya0NvbG9yTWFwID0gW3tcbiAgaW5kZXg6IDcsXG4gIG9wYWNpdHk6IDAuMTVcbn0sIHtcbiAgaW5kZXg6IDYsXG4gIG9wYWNpdHk6IDAuMjVcbn0sIHtcbiAgaW5kZXg6IDUsXG4gIG9wYWNpdHk6IDAuM1xufSwge1xuICBpbmRleDogNSxcbiAgb3BhY2l0eTogMC40NVxufSwge1xuICBpbmRleDogNSxcbiAgb3BhY2l0eTogMC42NVxufSwge1xuICBpbmRleDogNSxcbiAgb3BhY2l0eTogMC44NVxufSwge1xuICBpbmRleDogNCxcbiAgb3BhY2l0eTogMC45XG59LCB7XG4gIGluZGV4OiAzLFxuICBvcGFjaXR5OiAwLjk1XG59LCB7XG4gIGluZGV4OiAyLFxuICBvcGFjaXR5OiAwLjk3XG59LCB7XG4gIGluZGV4OiAxLFxuICBvcGFjaXR5OiAwLjk4XG59XTtcblxuZnVuY3Rpb24gZ2V0SHVlKGhzdiwgaSwgbGlnaHQpIHtcbiAgdmFyIGh1ZTsgLy8g5qC55o2u6Imy55u45LiN5ZCM77yM6Imy55u46L2s5ZCR5LiN5ZCMXG5cbiAgaWYgKE1hdGgucm91bmQoaHN2LmgpID49IDYwICYmIE1hdGgucm91bmQoaHN2LmgpIDw9IDI0MCkge1xuICAgIGh1ZSA9IGxpZ2h0ID8gTWF0aC5yb3VuZChoc3YuaCkgLSBodWVTdGVwICogaSA6IE1hdGgucm91bmQoaHN2LmgpICsgaHVlU3RlcCAqIGk7XG4gIH0gZWxzZSB7XG4gICAgaHVlID0gbGlnaHQgPyBNYXRoLnJvdW5kKGhzdi5oKSArIGh1ZVN0ZXAgKiBpIDogTWF0aC5yb3VuZChoc3YuaCkgLSBodWVTdGVwICogaTtcbiAgfVxuXG4gIGlmIChodWUgPCAwKSB7XG4gICAgaHVlICs9IDM2MDtcbiAgfSBlbHNlIGlmIChodWUgPj0gMzYwKSB7XG4gICAgaHVlIC09IDM2MDtcbiAgfVxuXG4gIHJldHVybiBodWU7XG59XG5cbmZ1bmN0aW9uIGdldFNhdHVyYXRpb24oaHN2LCBpLCBsaWdodCkge1xuICAvLyBncmV5IGNvbG9yIGRvbid0IGNoYW5nZSBzYXR1cmF0aW9uXG4gIGlmIChoc3YuaCA9PT0gMCAmJiBoc3YucyA9PT0gMCkge1xuICAgIHJldHVybiBoc3YucztcbiAgfVxuXG4gIHZhciBzYXR1cmF0aW9uO1xuXG4gIGlmIChsaWdodCkge1xuICAgIHNhdHVyYXRpb24gPSBoc3YucyAtIHNhdHVyYXRpb25TdGVwICogaTtcbiAgfSBlbHNlIGlmIChpID09PSBkYXJrQ29sb3JDb3VudCkge1xuICAgIHNhdHVyYXRpb24gPSBoc3YucyArIHNhdHVyYXRpb25TdGVwO1xuICB9IGVsc2Uge1xuICAgIHNhdHVyYXRpb24gPSBoc3YucyArIHNhdHVyYXRpb25TdGVwMiAqIGk7XG4gIH0gLy8g6L6555WM5YC85L+u5q2jXG5cblxuICBpZiAoc2F0dXJhdGlvbiA+IDEpIHtcbiAgICBzYXR1cmF0aW9uID0gMTtcbiAgfSAvLyDnrKzkuIDmoLznmoQgcyDpmZDliLblnKggMC4wNi0wLjEg5LmL6Ze0XG5cblxuICBpZiAobGlnaHQgJiYgaSA9PT0gbGlnaHRDb2xvckNvdW50ICYmIHNhdHVyYXRpb24gPiAwLjEpIHtcbiAgICBzYXR1cmF0aW9uID0gMC4xO1xuICB9XG5cbiAgaWYgKHNhdHVyYXRpb24gPCAwLjA2KSB7XG4gICAgc2F0dXJhdGlvbiA9IDAuMDY7XG4gIH1cblxuICByZXR1cm4gTnVtYmVyKHNhdHVyYXRpb24udG9GaXhlZCgyKSk7XG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlKGhzdiwgaSwgbGlnaHQpIHtcbiAgdmFyIHZhbHVlO1xuXG4gIGlmIChsaWdodCkge1xuICAgIHZhbHVlID0gaHN2LnYgKyBicmlnaHRuZXNzU3RlcDEgKiBpO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gaHN2LnYgLSBicmlnaHRuZXNzU3RlcDIgKiBpO1xuICB9XG5cbiAgaWYgKHZhbHVlID4gMSkge1xuICAgIHZhbHVlID0gMTtcbiAgfVxuXG4gIHJldHVybiBOdW1iZXIodmFsdWUudG9GaXhlZCgyKSk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlKGNvbG9yKSB7XG4gIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIHBhdHRlcm5zID0gW107XG4gIHZhciBwQ29sb3IgPSBuZXcgVGlueUNvbG9yKGNvbG9yKTtcblxuICBmb3IgKHZhciBpID0gbGlnaHRDb2xvckNvdW50OyBpID4gMDsgaSAtPSAxKSB7XG4gICAgdmFyIGhzdiA9IHBDb2xvci50b0hzdigpO1xuICAgIHZhciBjb2xvclN0cmluZyA9IG5ldyBUaW55Q29sb3Ioe1xuICAgICAgaDogZ2V0SHVlKGhzdiwgaSwgdHJ1ZSksXG4gICAgICBzOiBnZXRTYXR1cmF0aW9uKGhzdiwgaSwgdHJ1ZSksXG4gICAgICB2OiBnZXRWYWx1ZShoc3YsIGksIHRydWUpXG4gICAgfSkudG9IZXhTdHJpbmcoKTtcbiAgICBwYXR0ZXJucy5wdXNoKGNvbG9yU3RyaW5nKTtcbiAgfVxuXG4gIHBhdHRlcm5zLnB1c2gocENvbG9yLnRvSGV4U3RyaW5nKCkpO1xuXG4gIGZvciAodmFyIF9pID0gMTsgX2kgPD0gZGFya0NvbG9yQ291bnQ7IF9pICs9IDEpIHtcbiAgICB2YXIgX2hzdiA9IHBDb2xvci50b0hzdigpO1xuXG4gICAgdmFyIF9jb2xvclN0cmluZyA9IG5ldyBUaW55Q29sb3Ioe1xuICAgICAgaDogZ2V0SHVlKF9oc3YsIF9pKSxcbiAgICAgIHM6IGdldFNhdHVyYXRpb24oX2hzdiwgX2kpLFxuICAgICAgdjogZ2V0VmFsdWUoX2hzdiwgX2kpXG4gICAgfSkudG9IZXhTdHJpbmcoKTtcblxuICAgIHBhdHRlcm5zLnB1c2goX2NvbG9yU3RyaW5nKTtcbiAgfSAvLyBkYXJrIHRoZW1lIHBhdHRlcm5zXG5cblxuICBpZiAob3B0cy50aGVtZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIGRhcmtDb2xvck1hcC5tYXAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBpbmRleCA9IF9yZWYuaW5kZXgsXG4gICAgICAgICAgb3BhY2l0eSA9IF9yZWYub3BhY2l0eTtcbiAgICAgIHZhciBkYXJrQ29sb3JTdHJpbmcgPSBuZXcgVGlueUNvbG9yKG9wdHMuYmFja2dyb3VuZENvbG9yIHx8ICcjMTQxNDE0JykubWl4KHBhdHRlcm5zW2luZGV4XSwgb3BhY2l0eSAqIDEwMCkudG9IZXhTdHJpbmcoKTtcbiAgICAgIHJldHVybiBkYXJrQ29sb3JTdHJpbmc7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcGF0dGVybnM7XG59XG5cbnZhciBwcmVzZXRQcmltYXJ5Q29sb3JzID0ge1xuICByZWQ6ICcjRjUyMjJEJyxcbiAgdm9sY2FubzogJyNGQTU0MUMnLFxuICBvcmFuZ2U6ICcjRkE4QzE2JyxcbiAgZ29sZDogJyNGQUFEMTQnLFxuICB5ZWxsb3c6ICcjRkFEQjE0JyxcbiAgbGltZTogJyNBMEQ5MTEnLFxuICBncmVlbjogJyM1MkM0MUEnLFxuICBjeWFuOiAnIzEzQzJDMicsXG4gIGJsdWU6ICcjMTg5MEZGJyxcbiAgZ2Vla2JsdWU6ICcjMkY1NEVCJyxcbiAgcHVycGxlOiAnIzcyMkVEMScsXG4gIG1hZ2VudGE6ICcjRUIyRjk2JyxcbiAgZ3JleTogJyM2NjY2NjYnXG59O1xudmFyIHByZXNldFBhbGV0dGVzID0ge307XG52YXIgcHJlc2V0RGFya1BhbGV0dGVzID0ge307XG5PYmplY3Qua2V5cyhwcmVzZXRQcmltYXJ5Q29sb3JzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgcHJlc2V0UGFsZXR0ZXNba2V5XSA9IGdlbmVyYXRlKHByZXNldFByaW1hcnlDb2xvcnNba2V5XSk7XG4gIHByZXNldFBhbGV0dGVzW2tleV0ucHJpbWFyeSA9IHByZXNldFBhbGV0dGVzW2tleV1bNV07IC8vIGRhcmsgcHJlc2V0UGFsZXR0ZXNcblxuICBwcmVzZXREYXJrUGFsZXR0ZXNba2V5XSA9IGdlbmVyYXRlKHByZXNldFByaW1hcnlDb2xvcnNba2V5XSwge1xuICAgIHRoZW1lOiAnZGFyaycsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnIzE0MTQxNCdcbiAgfSk7XG4gIHByZXNldERhcmtQYWxldHRlc1trZXldLnByaW1hcnkgPSBwcmVzZXREYXJrUGFsZXR0ZXNba2V5XVs1XTtcbn0pO1xudmFyIHJlZCA9IHByZXNldFBhbGV0dGVzLnJlZDtcbnZhciB2b2xjYW5vID0gcHJlc2V0UGFsZXR0ZXMudm9sY2FubztcbnZhciBnb2xkID0gcHJlc2V0UGFsZXR0ZXMuZ29sZDtcbnZhciBvcmFuZ2UgPSBwcmVzZXRQYWxldHRlcy5vcmFuZ2U7XG52YXIgeWVsbG93ID0gcHJlc2V0UGFsZXR0ZXMueWVsbG93O1xudmFyIGxpbWUgPSBwcmVzZXRQYWxldHRlcy5saW1lO1xudmFyIGdyZWVuID0gcHJlc2V0UGFsZXR0ZXMuZ3JlZW47XG52YXIgY3lhbiA9IHByZXNldFBhbGV0dGVzLmN5YW47XG52YXIgYmx1ZSA9IHByZXNldFBhbGV0dGVzLmJsdWU7XG52YXIgZ2Vla2JsdWUgPSBwcmVzZXRQYWxldHRlcy5nZWVrYmx1ZTtcbnZhciBwdXJwbGUgPSBwcmVzZXRQYWxldHRlcy5wdXJwbGU7XG52YXIgbWFnZW50YSA9IHByZXNldFBhbGV0dGVzLm1hZ2VudGE7XG52YXIgZ3JleSA9IHByZXNldFBhbGV0dGVzLmdyZXk7XG5cbmV4cG9ydCB7IGJsdWUsIGN5YW4sIGdlZWtibHVlLCBnZW5lcmF0ZSwgZ29sZCwgZ3JlZW4sIGdyZXksIGxpbWUsIG1hZ2VudGEsIG9yYW5nZSwgcHJlc2V0RGFya1BhbGV0dGVzLCBwcmVzZXRQYWxldHRlcywgcHJlc2V0UHJpbWFyeUNvbG9ycywgcHVycGxlLCByZWQsIHZvbGNhbm8sIHllbGxvdyB9O1xuIiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCB7IGdlbmVyYXRlIGFzIGdlbmVyYXRlQ29sb3IgfSBmcm9tICdAYW50LWRlc2lnbi9jb2xvcnMnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB3YXJuIGZyb20gXCJyYy11dGlsL2VzL3dhcm5pbmdcIjtcbmltcG9ydCB7IGluc2VydENzcyB9IGZyb20gJ2luc2VydC1jc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIHdhcm5pbmcodmFsaWQsIG1lc3NhZ2UpIHtcbiAgd2Fybih2YWxpZCwgXCJbQGFudC1kZXNpZ24vaWNvbnNdIFwiLmNvbmNhdChtZXNzYWdlKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNJY29uRGVmaW5pdGlvbih0YXJnZXQpIHtcbiAgcmV0dXJuIF90eXBlb2YodGFyZ2V0KSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHRhcmdldC5uYW1lID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgdGFyZ2V0LnRoZW1lID09PSAnc3RyaW5nJyAmJiAoX3R5cGVvZih0YXJnZXQuaWNvbikgPT09ICdvYmplY3QnIHx8IHR5cGVvZiB0YXJnZXQuaWNvbiA9PT0gJ2Z1bmN0aW9uJyk7XG59XG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplQXR0cnMoKSB7XG4gIHZhciBhdHRycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHJldHVybiBPYmplY3Qua2V5cyhhdHRycykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgIHZhciB2YWwgPSBhdHRyc1trZXldO1xuXG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgIGNhc2UgJ2NsYXNzJzpcbiAgICAgICAgYWNjLmNsYXNzTmFtZSA9IHZhbDtcbiAgICAgICAgZGVsZXRlIGFjYy5jbGFzcztcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFjY1trZXldID0gdmFsO1xuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZShub2RlLCBrZXksIHJvb3RQcm9wcykge1xuICBpZiAoIXJvb3RQcm9wcykge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChub2RlLnRhZywgX29iamVjdFNwcmVhZCh7XG4gICAgICBrZXk6IGtleVxuICAgIH0sIG5vcm1hbGl6ZUF0dHJzKG5vZGUuYXR0cnMpKSwgKG5vZGUuY2hpbGRyZW4gfHwgW10pLm1hcChmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gZ2VuZXJhdGUoY2hpbGQsIFwiXCIuY29uY2F0KGtleSwgXCItXCIpLmNvbmNhdChub2RlLnRhZywgXCItXCIpLmNvbmNhdChpbmRleCkpO1xuICAgIH0pKTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChub2RlLnRhZywgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHtcbiAgICBrZXk6IGtleVxuICB9LCBub3JtYWxpemVBdHRycyhub2RlLmF0dHJzKSksIHJvb3RQcm9wcyksIChub2RlLmNoaWxkcmVuIHx8IFtdKS5tYXAoZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgIHJldHVybiBnZW5lcmF0ZShjaGlsZCwgXCJcIi5jb25jYXQoa2V5LCBcIi1cIikuY29uY2F0KG5vZGUudGFnLCBcIi1cIikuY29uY2F0KGluZGV4KSk7XG4gIH0pKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZWNvbmRhcnlDb2xvcihwcmltYXJ5Q29sb3IpIHtcbiAgLy8gY2hvb3NlIHRoZSBzZWNvbmQgY29sb3JcbiAgcmV0dXJuIGdlbmVyYXRlQ29sb3IocHJpbWFyeUNvbG9yKVswXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVUd29Ub25lQ29sb3JzKHR3b1RvbmVDb2xvcikge1xuICBpZiAoIXR3b1RvbmVDb2xvcikge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHJldHVybiBBcnJheS5pc0FycmF5KHR3b1RvbmVDb2xvcikgPyB0d29Ub25lQ29sb3IgOiBbdHdvVG9uZUNvbG9yXTtcbn0gLy8gVGhlc2UgcHJvcHMgbWFrZSBzdXJlIHRoYXQgdGhlIFNWRyBiZWhhdmlvdXJzIGxpa2UgZ2VuZXJhbCB0ZXh0LlxuLy8gUmVmZXJlbmNlOiBodHRwczovL2Jsb2cucHJvdG90eXByLmlvL2FsaWduLXN2Zy1pY29ucy10by10ZXh0LWFuZC1zYXktZ29vZGJ5ZS10by1mb250LWljb25zLWQ0NGIzZDdiMjZiNFxuXG5leHBvcnQgdmFyIHN2Z0Jhc2VQcm9wcyA9IHtcbiAgd2lkdGg6ICcxZW0nLFxuICBoZWlnaHQ6ICcxZW0nLFxuICBmaWxsOiAnY3VycmVudENvbG9yJyxcbiAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnLFxuICBmb2N1c2FibGU6ICdmYWxzZSdcbn07XG5leHBvcnQgdmFyIGljb25TdHlsZXMgPSBcIlxcbi5hbnRpY29uIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGNvbG9yOiBpbmhlcml0O1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgbGluZS1oZWlnaHQ6IDA7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcXG4gIHZlcnRpY2FsLWFsaWduOiAtMC4xMjVlbTtcXG4gIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XFxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcXG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XFxufVxcblxcbi5hbnRpY29uID4gKiB7XFxuICBsaW5lLWhlaWdodDogMTtcXG59XFxuXFxuLmFudGljb24gc3ZnIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuXFxuLmFudGljb246OmJlZm9yZSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4uYW50aWNvbiAuYW50aWNvbi1pY29uIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4uYW50aWNvblt0YWJpbmRleF0ge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uYW50aWNvbi1zcGluOjpiZWZvcmUsXFxuLmFudGljb24tc3BpbiB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAtd2Via2l0LWFuaW1hdGlvbjogbG9hZGluZ0NpcmNsZSAxcyBpbmZpbml0ZSBsaW5lYXI7XFxuICBhbmltYXRpb246IGxvYWRpbmdDaXJjbGUgMXMgaW5maW5pdGUgbGluZWFyO1xcbn1cXG5cXG5ALXdlYmtpdC1rZXlmcmFtZXMgbG9hZGluZ0NpcmNsZSB7XFxuICAxMDAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcbiAgfVxcbn1cXG5cXG5Aa2V5ZnJhbWVzIGxvYWRpbmdDaXJjbGUge1xcbiAgMTAwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXG4gIH1cXG59XFxuXCI7XG52YXIgY3NzSW5qZWN0ZWRGbGFnID0gZmFsc2U7XG5leHBvcnQgdmFyIHVzZUluc2VydFN0eWxlcyA9IGZ1bmN0aW9uIHVzZUluc2VydFN0eWxlcygpIHtcbiAgdmFyIHN0eWxlU3RyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBpY29uU3R5bGVzO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghY3NzSW5qZWN0ZWRGbGFnKSB7XG4gICAgICBpbnNlcnRDc3Moc3R5bGVTdHIsIHtcbiAgICAgICAgcHJlcGVuZDogdHJ1ZVxuICAgICAgfSk7XG4gICAgICBjc3NJbmplY3RlZEZsYWcgPSB0cnVlO1xuICAgIH1cbiAgfSwgW10pO1xufTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCB7IGdlbmVyYXRlLCBnZXRTZWNvbmRhcnlDb2xvciwgaXNJY29uRGVmaW5pdGlvbiwgd2FybmluZywgdXNlSW5zZXJ0U3R5bGVzIH0gZnJvbSAnLi4vdXRpbHMnO1xudmFyIHR3b1RvbmVDb2xvclBhbGV0dGUgPSB7XG4gIHByaW1hcnlDb2xvcjogJyMzMzMnLFxuICBzZWNvbmRhcnlDb2xvcjogJyNFNkU2RTYnLFxuICBjYWxjdWxhdGVkOiBmYWxzZVxufTtcblxuZnVuY3Rpb24gc2V0VHdvVG9uZUNvbG9ycyhfcmVmKSB7XG4gIHZhciBwcmltYXJ5Q29sb3IgPSBfcmVmLnByaW1hcnlDb2xvcixcbiAgICAgIHNlY29uZGFyeUNvbG9yID0gX3JlZi5zZWNvbmRhcnlDb2xvcjtcbiAgdHdvVG9uZUNvbG9yUGFsZXR0ZS5wcmltYXJ5Q29sb3IgPSBwcmltYXJ5Q29sb3I7XG4gIHR3b1RvbmVDb2xvclBhbGV0dGUuc2Vjb25kYXJ5Q29sb3IgPSBzZWNvbmRhcnlDb2xvciB8fCBnZXRTZWNvbmRhcnlDb2xvcihwcmltYXJ5Q29sb3IpO1xuICB0d29Ub25lQ29sb3JQYWxldHRlLmNhbGN1bGF0ZWQgPSAhIXNlY29uZGFyeUNvbG9yO1xufVxuXG5mdW5jdGlvbiBnZXRUd29Ub25lQ29sb3JzKCkge1xuICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgdHdvVG9uZUNvbG9yUGFsZXR0ZSk7XG59XG5cbnZhciBJY29uQmFzZSA9IGZ1bmN0aW9uIEljb25CYXNlKHByb3BzKSB7XG4gIHZhciBpY29uID0gcHJvcHMuaWNvbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIG9uQ2xpY2sgPSBwcm9wcy5vbkNsaWNrLFxuICAgICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIHByaW1hcnlDb2xvciA9IHByb3BzLnByaW1hcnlDb2xvcixcbiAgICAgIHNlY29uZGFyeUNvbG9yID0gcHJvcHMuc2Vjb25kYXJ5Q29sb3IsXG4gICAgICByZXN0UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImljb25cIiwgXCJjbGFzc05hbWVcIiwgXCJvbkNsaWNrXCIsIFwic3R5bGVcIiwgXCJwcmltYXJ5Q29sb3JcIiwgXCJzZWNvbmRhcnlDb2xvclwiXSk7XG5cbiAgdmFyIGNvbG9ycyA9IHR3b1RvbmVDb2xvclBhbGV0dGU7XG5cbiAgaWYgKHByaW1hcnlDb2xvcikge1xuICAgIGNvbG9ycyA9IHtcbiAgICAgIHByaW1hcnlDb2xvcjogcHJpbWFyeUNvbG9yLFxuICAgICAgc2Vjb25kYXJ5Q29sb3I6IHNlY29uZGFyeUNvbG9yIHx8IGdldFNlY29uZGFyeUNvbG9yKHByaW1hcnlDb2xvcilcbiAgICB9O1xuICB9XG5cbiAgdXNlSW5zZXJ0U3R5bGVzKCk7XG4gIHdhcm5pbmcoaXNJY29uRGVmaW5pdGlvbihpY29uKSwgXCJpY29uIHNob3VsZCBiZSBpY29uIGRlZmluaXRvbiwgYnV0IGdvdCBcIi5jb25jYXQoaWNvbikpO1xuXG4gIGlmICghaXNJY29uRGVmaW5pdGlvbihpY29uKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHRhcmdldCA9IGljb247XG5cbiAgaWYgKHRhcmdldCAmJiB0eXBlb2YgdGFyZ2V0Lmljb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0YXJnZXQgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHRhcmdldCksIHt9LCB7XG4gICAgICBpY29uOiB0YXJnZXQuaWNvbihjb2xvcnMucHJpbWFyeUNvbG9yLCBjb2xvcnMuc2Vjb25kYXJ5Q29sb3IpXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZ2VuZXJhdGUodGFyZ2V0Lmljb24sIFwic3ZnLVwiLmNvbmNhdCh0YXJnZXQubmFtZSksIF9vYmplY3RTcHJlYWQoe1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgc3R5bGU6IHN0eWxlLFxuICAgICdkYXRhLWljb24nOiB0YXJnZXQubmFtZSxcbiAgICB3aWR0aDogJzFlbScsXG4gICAgaGVpZ2h0OiAnMWVtJyxcbiAgICBmaWxsOiAnY3VycmVudENvbG9yJyxcbiAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZSdcbiAgfSwgcmVzdFByb3BzKSk7XG59O1xuXG5JY29uQmFzZS5kaXNwbGF5TmFtZSA9ICdJY29uUmVhY3QnO1xuSWNvbkJhc2UuZ2V0VHdvVG9uZUNvbG9ycyA9IGdldFR3b1RvbmVDb2xvcnM7XG5JY29uQmFzZS5zZXRUd29Ub25lQ29sb3JzID0gc2V0VHdvVG9uZUNvbG9ycztcbmV4cG9ydCBkZWZhdWx0IEljb25CYXNlOyIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IFJlYWN0SWNvbiBmcm9tICcuL0ljb25CYXNlJztcbmltcG9ydCB7IG5vcm1hbGl6ZVR3b1RvbmVDb2xvcnMgfSBmcm9tICcuLi91dGlscyc7XG5leHBvcnQgZnVuY3Rpb24gc2V0VHdvVG9uZUNvbG9yKHR3b1RvbmVDb2xvcikge1xuICB2YXIgX25vcm1hbGl6ZVR3b1RvbmVDb2xvID0gbm9ybWFsaXplVHdvVG9uZUNvbG9ycyh0d29Ub25lQ29sb3IpLFxuICAgICAgX25vcm1hbGl6ZVR3b1RvbmVDb2xvMiA9IF9zbGljZWRUb0FycmF5KF9ub3JtYWxpemVUd29Ub25lQ29sbywgMiksXG4gICAgICBwcmltYXJ5Q29sb3IgPSBfbm9ybWFsaXplVHdvVG9uZUNvbG8yWzBdLFxuICAgICAgc2Vjb25kYXJ5Q29sb3IgPSBfbm9ybWFsaXplVHdvVG9uZUNvbG8yWzFdO1xuXG4gIHJldHVybiBSZWFjdEljb24uc2V0VHdvVG9uZUNvbG9ycyh7XG4gICAgcHJpbWFyeUNvbG9yOiBwcmltYXJ5Q29sb3IsXG4gICAgc2Vjb25kYXJ5Q29sb3I6IHNlY29uZGFyeUNvbG9yXG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFR3b1RvbmVDb2xvcigpIHtcbiAgdmFyIGNvbG9ycyA9IFJlYWN0SWNvbi5nZXRUd29Ub25lQ29sb3JzKCk7XG5cbiAgaWYgKCFjb2xvcnMuY2FsY3VsYXRlZCkge1xuICAgIHJldHVybiBjb2xvcnMucHJpbWFyeUNvbG9yO1xuICB9XG5cbiAgcmV0dXJuIFtjb2xvcnMucHJpbWFyeUNvbG9yLCBjb2xvcnMuc2Vjb25kYXJ5Q29sb3JdO1xufSIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdEljb24gZnJvbSAnLi9JY29uQmFzZSc7XG5pbXBvcnQgeyBnZXRUd29Ub25lQ29sb3IsIHNldFR3b1RvbmVDb2xvciB9IGZyb20gJy4vdHdvVG9uZVByaW1hcnlDb2xvcic7XG5pbXBvcnQgeyBub3JtYWxpemVUd29Ub25lQ29sb3JzIH0gZnJvbSAnLi4vdXRpbHMnOyAvLyBJbml0aWFsIHNldHRpbmdcbi8vIHNob3VsZCBtb3ZlIGl0IHRvIGFudGQgbWFpbiByZXBvP1xuXG5zZXRUd29Ub25lQ29sb3IoJyMxODkwZmYnKTtcbnZhciBJY29uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGljb24gPSBwcm9wcy5pY29uLFxuICAgICAgc3BpbiA9IHByb3BzLnNwaW4sXG4gICAgICByb3RhdGUgPSBwcm9wcy5yb3RhdGUsXG4gICAgICB0YWJJbmRleCA9IHByb3BzLnRhYkluZGV4LFxuICAgICAgb25DbGljayA9IHByb3BzLm9uQ2xpY2ssXG4gICAgICB0d29Ub25lQ29sb3IgPSBwcm9wcy50d29Ub25lQ29sb3IsXG4gICAgICByZXN0UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzTmFtZVwiLCBcImljb25cIiwgXCJzcGluXCIsIFwicm90YXRlXCIsIFwidGFiSW5kZXhcIiwgXCJvbkNsaWNrXCIsIFwidHdvVG9uZUNvbG9yXCJdKTtcblxuICB2YXIgY2xhc3NTdHJpbmcgPSBjbGFzc05hbWVzKCdhbnRpY29uJywgX2RlZmluZVByb3BlcnR5KHt9LCBcImFudGljb24tXCIuY29uY2F0KGljb24ubmFtZSksIEJvb2xlYW4oaWNvbi5uYW1lKSksIHtcbiAgICAnYW50aWNvbi1zcGluJzogISFzcGluIHx8IGljb24ubmFtZSA9PT0gJ2xvYWRpbmcnXG4gIH0sIGNsYXNzTmFtZSk7XG4gIHZhciBpY29uVGFiSW5kZXggPSB0YWJJbmRleDtcblxuICBpZiAoaWNvblRhYkluZGV4ID09PSB1bmRlZmluZWQgJiYgb25DbGljaykge1xuICAgIGljb25UYWJJbmRleCA9IC0xO1xuICB9XG5cbiAgdmFyIHN2Z1N0eWxlID0gcm90YXRlID8ge1xuICAgIG1zVHJhbnNmb3JtOiBcInJvdGF0ZShcIi5jb25jYXQocm90YXRlLCBcImRlZylcIiksXG4gICAgdHJhbnNmb3JtOiBcInJvdGF0ZShcIi5jb25jYXQocm90YXRlLCBcImRlZylcIilcbiAgfSA6IHVuZGVmaW5lZDtcblxuICB2YXIgX25vcm1hbGl6ZVR3b1RvbmVDb2xvID0gbm9ybWFsaXplVHdvVG9uZUNvbG9ycyh0d29Ub25lQ29sb3IpLFxuICAgICAgX25vcm1hbGl6ZVR3b1RvbmVDb2xvMiA9IF9zbGljZWRUb0FycmF5KF9ub3JtYWxpemVUd29Ub25lQ29sbywgMiksXG4gICAgICBwcmltYXJ5Q29sb3IgPSBfbm9ybWFsaXplVHdvVG9uZUNvbG8yWzBdLFxuICAgICAgc2Vjb25kYXJ5Q29sb3IgPSBfbm9ybWFsaXplVHdvVG9uZUNvbG8yWzFdO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgT2JqZWN0LmFzc2lnbih7XG4gICAgcm9sZTogXCJpbWdcIixcbiAgICBcImFyaWEtbGFiZWxcIjogaWNvbi5uYW1lXG4gIH0sIHJlc3RQcm9wcywge1xuICAgIHJlZjogcmVmLFxuICAgIHRhYkluZGV4OiBpY29uVGFiSW5kZXgsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBjbGFzc05hbWU6IGNsYXNzU3RyaW5nXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdEljb24sIHtcbiAgICBpY29uOiBpY29uLFxuICAgIHByaW1hcnlDb2xvcjogcHJpbWFyeUNvbG9yLFxuICAgIHNlY29uZGFyeUNvbG9yOiBzZWNvbmRhcnlDb2xvcixcbiAgICBzdHlsZTogc3ZnU3R5bGVcbiAgfSkpO1xufSk7XG5JY29uLmRpc3BsYXlOYW1lID0gJ0FudGRJY29uJztcbkljb24uZ2V0VHdvVG9uZUNvbG9yID0gZ2V0VHdvVG9uZUNvbG9yO1xuSWNvbi5zZXRUd29Ub25lQ29sb3IgPSBzZXRUd29Ub25lQ29sb3I7XG5leHBvcnQgZGVmYXVsdCBJY29uOyIsIi8vIEdFTkVSQVRFIEJZIC4vc2NyaXB0cy9nZW5lcmF0ZS50c1xuLy8gRE9OIE5PVCBFRElUIElUIE1BTlVBTExZXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgTG9hZGluZ091dGxpbmVkU3ZnIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0xvYWRpbmdPdXRsaW5lZFwiO1xuaW1wb3J0IEFudGRJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvQW50ZEljb24nO1xuXG52YXIgTG9hZGluZ091dGxpbmVkID0gZnVuY3Rpb24gTG9hZGluZ091dGxpbmVkKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEFudGRJY29uLCBPYmplY3QuYXNzaWduKHt9LCBwcm9wcywge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IExvYWRpbmdPdXRsaW5lZFN2Z1xuICB9KSk7XG59O1xuXG5Mb2FkaW5nT3V0bGluZWQuZGlzcGxheU5hbWUgPSAnTG9hZGluZ091dGxpbmVkJztcbmV4cG9ydCBkZWZhdWx0IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKExvYWRpbmdPdXRsaW5lZCk7IiwiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgRXhjbGFtYXRpb25DaXJjbGVGaWxsZWQgPSB7IFwiaWNvblwiOiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInZpZXdCb3hcIjogXCI2NCA2NCA4OTYgODk2XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTUxMiA2NEMyNjQuNiA2NCA2NCAyNjQuNiA2NCA1MTJzMjAwLjYgNDQ4IDQ0OCA0NDggNDQ4LTIwMC42IDQ0OC00NDhTNzU5LjQgNjQgNTEyIDY0em0tMzIgMjMyYzAtNC40IDMuNi04IDgtOGg0OGM0LjQgMCA4IDMuNiA4IDh2MjcyYzAgNC40LTMuNiA4LTggOGgtNDhjLTQuNCAwLTgtMy42LTgtOFYyOTZ6bTMyIDQ0MGE0OC4wMSA0OC4wMSAwIDAxMC05NiA0OC4wMSA0OC4wMSAwIDAxMCA5NnpcIiB9IH1dIH0sIFwibmFtZVwiOiBcImV4Y2xhbWF0aW9uLWNpcmNsZVwiLCBcInRoZW1lXCI6IFwiZmlsbGVkXCIgfTtcbmV4cG9ydCBkZWZhdWx0IEV4Y2xhbWF0aW9uQ2lyY2xlRmlsbGVkO1xuIiwiLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBFeGNsYW1hdGlvbkNpcmNsZUZpbGxlZFN2ZyBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9FeGNsYW1hdGlvbkNpcmNsZUZpbGxlZFwiO1xuaW1wb3J0IEFudGRJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvQW50ZEljb24nO1xuXG52YXIgRXhjbGFtYXRpb25DaXJjbGVGaWxsZWQgPSBmdW5jdGlvbiBFeGNsYW1hdGlvbkNpcmNsZUZpbGxlZChwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBbnRkSWNvbiwgT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICByZWY6IHJlZixcbiAgICBpY29uOiBFeGNsYW1hdGlvbkNpcmNsZUZpbGxlZFN2Z1xuICB9KSk7XG59O1xuXG5FeGNsYW1hdGlvbkNpcmNsZUZpbGxlZC5kaXNwbGF5TmFtZSA9ICdFeGNsYW1hdGlvbkNpcmNsZUZpbGxlZCc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihFeGNsYW1hdGlvbkNpcmNsZUZpbGxlZCk7IiwiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgQ2xvc2VDaXJjbGVGaWxsZWQgPSB7IFwiaWNvblwiOiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInZpZXdCb3hcIjogXCI2NCA2NCA4OTYgODk2XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTUxMiA2NEMyNjQuNiA2NCA2NCAyNjQuNiA2NCA1MTJzMjAwLjYgNDQ4IDQ0OCA0NDggNDQ4LTIwMC42IDQ0OC00NDhTNzU5LjQgNjQgNTEyIDY0em0xNjUuNCA2MTguMmwtNjYtLjNMNTEyIDU2My40bC05OS4zIDExOC40LTY2LjEuM2MtNC40IDAtOC0zLjUtOC04IDAtMS45LjctMy43IDEuOS01LjJsMTMwLjEtMTU1TDM0MC41IDM1OWE4LjMyIDguMzIgMCAwMS0xLjktNS4yYzAtNC40IDMuNi04IDgtOGw2Ni4xLjNMNTEyIDQ2NC42bDk5LjMtMTE4LjQgNjYtLjNjNC40IDAgOCAzLjUgOCA4IDAgMS45LS43IDMuNy0xLjkgNS4yTDU1My41IDUxNGwxMzAgMTU1YzEuMiAxLjUgMS45IDMuMyAxLjkgNS4yIDAgNC40LTMuNiA4LTggOHpcIiB9IH1dIH0sIFwibmFtZVwiOiBcImNsb3NlLWNpcmNsZVwiLCBcInRoZW1lXCI6IFwiZmlsbGVkXCIgfTtcbmV4cG9ydCBkZWZhdWx0IENsb3NlQ2lyY2xlRmlsbGVkO1xuIiwiLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBDbG9zZUNpcmNsZUZpbGxlZFN2ZyBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9DbG9zZUNpcmNsZUZpbGxlZFwiO1xuaW1wb3J0IEFudGRJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvQW50ZEljb24nO1xuXG52YXIgQ2xvc2VDaXJjbGVGaWxsZWQgPSBmdW5jdGlvbiBDbG9zZUNpcmNsZUZpbGxlZChwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBbnRkSWNvbiwgT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICByZWY6IHJlZixcbiAgICBpY29uOiBDbG9zZUNpcmNsZUZpbGxlZFN2Z1xuICB9KSk7XG59O1xuXG5DbG9zZUNpcmNsZUZpbGxlZC5kaXNwbGF5TmFtZSA9ICdDbG9zZUNpcmNsZUZpbGxlZCc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihDbG9zZUNpcmNsZUZpbGxlZCk7IiwiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgQ2hlY2tDaXJjbGVGaWxsZWQgPSB7IFwiaWNvblwiOiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInZpZXdCb3hcIjogXCI2NCA2NCA4OTYgODk2XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTUxMiA2NEMyNjQuNiA2NCA2NCAyNjQuNiA2NCA1MTJzMjAwLjYgNDQ4IDQ0OCA0NDggNDQ4LTIwMC42IDQ0OC00NDhTNzU5LjQgNjQgNTEyIDY0em0xOTMuNSAzMDEuN2wtMjEwLjYgMjkyYTMxLjggMzEuOCAwIDAxLTUxLjcgMEwzMTguNSA0ODQuOWMtMy44LTUuMyAwLTEyLjcgNi41LTEyLjdoNDYuOWMxMC4yIDAgMTkuOSA0LjkgMjUuOSAxMy4zbDcxLjIgOTguOCAxNTcuMi0yMThjNi04LjMgMTUuNi0xMy4zIDI1LjktMTMuM0g2OTljNi41IDAgMTAuMyA3LjQgNi41IDEyLjd6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJjaGVjay1jaXJjbGVcIiwgXCJ0aGVtZVwiOiBcImZpbGxlZFwiIH07XG5leHBvcnQgZGVmYXVsdCBDaGVja0NpcmNsZUZpbGxlZDtcbiIsIi8vIEdFTkVSQVRFIEJZIC4vc2NyaXB0cy9nZW5lcmF0ZS50c1xuLy8gRE9OIE5PVCBFRElUIElUIE1BTlVBTExZXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQ2hlY2tDaXJjbGVGaWxsZWRTdmcgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vQ2hlY2tDaXJjbGVGaWxsZWRcIjtcbmltcG9ydCBBbnRkSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL0FudGRJY29uJztcblxudmFyIENoZWNrQ2lyY2xlRmlsbGVkID0gZnVuY3Rpb24gQ2hlY2tDaXJjbGVGaWxsZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7XG4gICAgcmVmOiByZWYsXG4gICAgaWNvbjogQ2hlY2tDaXJjbGVGaWxsZWRTdmdcbiAgfSkpO1xufTtcblxuQ2hlY2tDaXJjbGVGaWxsZWQuZGlzcGxheU5hbWUgPSAnQ2hlY2tDaXJjbGVGaWxsZWQnO1xuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoQ2hlY2tDaXJjbGVGaWxsZWQpOyIsIi8vIFRoaXMgaWNvbiBmaWxlIGlzIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LlxudmFyIEluZm9DaXJjbGVGaWxsZWQgPSB7IFwiaWNvblwiOiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInZpZXdCb3hcIjogXCI2NCA2NCA4OTYgODk2XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTUxMiA2NEMyNjQuNiA2NCA2NCAyNjQuNiA2NCA1MTJzMjAwLjYgNDQ4IDQ0OCA0NDggNDQ4LTIwMC42IDQ0OC00NDhTNzU5LjQgNjQgNTEyIDY0em0zMiA2NjRjMCA0LjQtMy42IDgtOCA4aC00OGMtNC40IDAtOC0zLjYtOC04VjQ1NmMwLTQuNCAzLjYtOCA4LThoNDhjNC40IDAgOCAzLjYgOCA4djI3MnptLTMyLTM0NGE0OC4wMSA0OC4wMSAwIDAxMC05NiA0OC4wMSA0OC4wMSAwIDAxMCA5NnpcIiB9IH1dIH0sIFwibmFtZVwiOiBcImluZm8tY2lyY2xlXCIsIFwidGhlbWVcIjogXCJmaWxsZWRcIiB9O1xuZXhwb3J0IGRlZmF1bHQgSW5mb0NpcmNsZUZpbGxlZDtcbiIsIi8vIEdFTkVSQVRFIEJZIC4vc2NyaXB0cy9nZW5lcmF0ZS50c1xuLy8gRE9OIE5PVCBFRElUIElUIE1BTlVBTExZXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW5mb0NpcmNsZUZpbGxlZFN2ZyBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9JbmZvQ2lyY2xlRmlsbGVkXCI7XG5pbXBvcnQgQW50ZEljb24gZnJvbSAnLi4vY29tcG9uZW50cy9BbnRkSWNvbic7XG5cbnZhciBJbmZvQ2lyY2xlRmlsbGVkID0gZnVuY3Rpb24gSW5mb0NpcmNsZUZpbGxlZChwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBbnRkSWNvbiwgT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICByZWY6IHJlZixcbiAgICBpY29uOiBJbmZvQ2lyY2xlRmlsbGVkU3ZnXG4gIH0pKTtcbn07XG5cbkluZm9DaXJjbGVGaWxsZWQuZGlzcGxheU5hbWUgPSAnSW5mb0NpcmNsZUZpbGxlZCc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihJbmZvQ2lyY2xlRmlsbGVkKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSQ05vdGlmaWNhdGlvbiBmcm9tICdyYy1ub3RpZmljYXRpb24nO1xuaW1wb3J0IExvYWRpbmdPdXRsaW5lZCBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvTG9hZGluZ091dGxpbmVkXCI7XG5pbXBvcnQgRXhjbGFtYXRpb25DaXJjbGVGaWxsZWQgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0V4Y2xhbWF0aW9uQ2lyY2xlRmlsbGVkXCI7XG5pbXBvcnQgQ2xvc2VDaXJjbGVGaWxsZWQgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0Nsb3NlQ2lyY2xlRmlsbGVkXCI7XG5pbXBvcnQgQ2hlY2tDaXJjbGVGaWxsZWQgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0NoZWNrQ2lyY2xlRmlsbGVkXCI7XG5pbXBvcnQgSW5mb0NpcmNsZUZpbGxlZCBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvSW5mb0NpcmNsZUZpbGxlZFwiO1xuaW1wb3J0IGNyZWF0ZVVzZU1lc3NhZ2UgZnJvbSAnLi9ob29rcy91c2VNZXNzYWdlJztcbnZhciBtZXNzYWdlSW5zdGFuY2U7XG52YXIgZGVmYXVsdER1cmF0aW9uID0gMztcbnZhciBkZWZhdWx0VG9wO1xudmFyIGtleSA9IDE7XG52YXIgbG9jYWxQcmVmaXhDbHMgPSAnYW50LW1lc3NhZ2UnO1xudmFyIHRyYW5zaXRpb25OYW1lID0gJ21vdmUtdXAnO1xudmFyIGdldENvbnRhaW5lcjtcbnZhciBtYXhDb3VudDtcbnZhciBydGwgPSBmYWxzZTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRLZXlUaGVuSW5jcmVhc2VLZXkoKSB7XG4gIHJldHVybiBrZXkrKztcbn1cblxuZnVuY3Rpb24gc2V0TWVzc2FnZUNvbmZpZyhvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLnRvcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVmYXVsdFRvcCA9IG9wdGlvbnMudG9wO1xuICAgIG1lc3NhZ2VJbnN0YW5jZSA9IG51bGw7IC8vIGRlbGV0ZSBtZXNzYWdlSW5zdGFuY2UgZm9yIG5ldyBkZWZhdWx0VG9wXG4gIH1cblxuICBpZiAob3B0aW9ucy5kdXJhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVmYXVsdER1cmF0aW9uID0gb3B0aW9ucy5kdXJhdGlvbjtcbiAgfVxuXG4gIGlmIChvcHRpb25zLnByZWZpeENscyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgbG9jYWxQcmVmaXhDbHMgPSBvcHRpb25zLnByZWZpeENscztcbiAgfVxuXG4gIGlmIChvcHRpb25zLmdldENvbnRhaW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZ2V0Q29udGFpbmVyID0gb3B0aW9ucy5nZXRDb250YWluZXI7XG4gIH1cblxuICBpZiAob3B0aW9ucy50cmFuc2l0aW9uTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdHJhbnNpdGlvbk5hbWUgPSBvcHRpb25zLnRyYW5zaXRpb25OYW1lO1xuICAgIG1lc3NhZ2VJbnN0YW5jZSA9IG51bGw7IC8vIGRlbGV0ZSBtZXNzYWdlSW5zdGFuY2UgZm9yIG5ldyB0cmFuc2l0aW9uTmFtZVxuICB9XG5cbiAgaWYgKG9wdGlvbnMubWF4Q291bnQgIT09IHVuZGVmaW5lZCkge1xuICAgIG1heENvdW50ID0gb3B0aW9ucy5tYXhDb3VudDtcbiAgICBtZXNzYWdlSW5zdGFuY2UgPSBudWxsO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMucnRsICE9PSB1bmRlZmluZWQpIHtcbiAgICBydGwgPSBvcHRpb25zLnJ0bDtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRSQ05vdGlmaWNhdGlvbkluc3RhbmNlKGFyZ3MsIGNhbGxiYWNrKSB7XG4gIHZhciBwcmVmaXhDbHMgPSBhcmdzLnByZWZpeENscyB8fCBsb2NhbFByZWZpeENscztcblxuICBpZiAobWVzc2FnZUluc3RhbmNlKSB7XG4gICAgY2FsbGJhY2soe1xuICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICBpbnN0YW5jZTogbWVzc2FnZUluc3RhbmNlXG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgUkNOb3RpZmljYXRpb24ubmV3SW5zdGFuY2Uoe1xuICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgIHRyYW5zaXRpb25OYW1lOiB0cmFuc2l0aW9uTmFtZSxcbiAgICBzdHlsZToge1xuICAgICAgdG9wOiBkZWZhdWx0VG9wXG4gICAgfSxcbiAgICBnZXRDb250YWluZXI6IGdldENvbnRhaW5lcixcbiAgICBtYXhDb3VudDogbWF4Q291bnRcbiAgfSwgZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgaWYgKG1lc3NhZ2VJbnN0YW5jZSkge1xuICAgICAgY2FsbGJhY2soe1xuICAgICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgICAgaW5zdGFuY2U6IG1lc3NhZ2VJbnN0YW5jZVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbWVzc2FnZUluc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgY2FsbGJhY2soe1xuICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICBpbnN0YW5jZTogaW5zdGFuY2VcbiAgICB9KTtcbiAgfSk7XG59XG5cbnZhciB0eXBlVG9JY29uID0ge1xuICBpbmZvOiBJbmZvQ2lyY2xlRmlsbGVkLFxuICBzdWNjZXNzOiBDaGVja0NpcmNsZUZpbGxlZCxcbiAgZXJyb3I6IENsb3NlQ2lyY2xlRmlsbGVkLFxuICB3YXJuaW5nOiBFeGNsYW1hdGlvbkNpcmNsZUZpbGxlZCxcbiAgbG9hZGluZzogTG9hZGluZ091dGxpbmVkXG59O1xuXG5mdW5jdGlvbiBnZXRSQ05vdGljZVByb3BzKGFyZ3MsIHByZWZpeENscykge1xuICB2YXIgX2NsYXNzTmFtZXM7XG5cbiAgdmFyIGR1cmF0aW9uID0gYXJncy5kdXJhdGlvbiAhPT0gdW5kZWZpbmVkID8gYXJncy5kdXJhdGlvbiA6IGRlZmF1bHREdXJhdGlvbjtcbiAgdmFyIEljb25Db21wb25lbnQgPSB0eXBlVG9JY29uW2FyZ3MudHlwZV07XG4gIHZhciBtZXNzYWdlQ2xhc3MgPSBjbGFzc05hbWVzKFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY3VzdG9tLWNvbnRlbnRcIiksIChfY2xhc3NOYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChhcmdzLnR5cGUpLCBhcmdzLnR5cGUpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItcnRsXCIpLCBydGwgPT09IHRydWUpLCBfY2xhc3NOYW1lcykpO1xuICByZXR1cm4ge1xuICAgIGtleTogYXJncy5rZXksXG4gICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgIHN0eWxlOiBhcmdzLnN0eWxlIHx8IHt9LFxuICAgIGNsYXNzTmFtZTogYXJncy5jbGFzc05hbWUsXG4gICAgY29udGVudDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBtZXNzYWdlQ2xhc3NcbiAgICB9LCBhcmdzLmljb24gfHwgSWNvbkNvbXBvbmVudCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJY29uQ29tcG9uZW50LCBudWxsKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIG51bGwsIGFyZ3MuY29udGVudCkpLFxuICAgIG9uQ2xvc2U6IGFyZ3Mub25DbG9zZSxcbiAgICBvbkNsaWNrOiBhcmdzLm9uQ2xpY2tcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm90aWNlKGFyZ3MpIHtcbiAgdmFyIHRhcmdldCA9IGFyZ3Mua2V5IHx8IGtleSsrO1xuICB2YXIgY2xvc2VQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjaygpIHtcbiAgICAgIGlmICh0eXBlb2YgYXJncy5vbkNsb3NlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGFyZ3Mub25DbG9zZSgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzb2x2ZSh0cnVlKTtcbiAgICB9O1xuXG4gICAgZ2V0UkNOb3RpZmljYXRpb25JbnN0YW5jZShhcmdzLCBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIHByZWZpeENscyA9IF9yZWYucHJlZml4Q2xzLFxuICAgICAgICAgIGluc3RhbmNlID0gX3JlZi5pbnN0YW5jZTtcbiAgICAgIGluc3RhbmNlLm5vdGljZShnZXRSQ05vdGljZVByb3BzKF9leHRlbmRzKF9leHRlbmRzKHt9LCBhcmdzKSwge1xuICAgICAgICBrZXk6IHRhcmdldCxcbiAgICAgICAgb25DbG9zZTogY2FsbGJhY2tcbiAgICAgIH0pLCBwcmVmaXhDbHMpKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdmFyIHJlc3VsdCA9IGZ1bmN0aW9uIHJlc3VsdCgpIHtcbiAgICBpZiAobWVzc2FnZUluc3RhbmNlKSB7XG4gICAgICBtZXNzYWdlSW5zdGFuY2UucmVtb3ZlTm90aWNlKHRhcmdldCk7XG4gICAgfVxuICB9O1xuXG4gIHJlc3VsdC50aGVuID0gZnVuY3Rpb24gKGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgICByZXR1cm4gY2xvc2VQcm9taXNlLnRoZW4oZmlsbGVkLCByZWplY3RlZCk7XG4gIH07XG5cbiAgcmVzdWx0LnByb21pc2UgPSBjbG9zZVByb21pc2U7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGlzQXJnc1Byb3BzKGNvbnRlbnQpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChjb250ZW50KSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgJiYgISFjb250ZW50LmNvbnRlbnQ7XG59XG5cbnZhciBhcGkgPSB7XG4gIG9wZW46IG5vdGljZSxcbiAgY29uZmlnOiBzZXRNZXNzYWdlQ29uZmlnLFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KG1lc3NhZ2VLZXkpIHtcbiAgICBpZiAobWVzc2FnZUluc3RhbmNlKSB7XG4gICAgICBpZiAobWVzc2FnZUtleSkge1xuICAgICAgICB2YXIgX21lc3NhZ2VJbnN0YW5jZSA9IG1lc3NhZ2VJbnN0YW5jZSxcbiAgICAgICAgICAgIHJlbW92ZU5vdGljZSA9IF9tZXNzYWdlSW5zdGFuY2UucmVtb3ZlTm90aWNlO1xuICAgICAgICByZW1vdmVOb3RpY2UobWVzc2FnZUtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX21lc3NhZ2VJbnN0YW5jZTIgPSBtZXNzYWdlSW5zdGFuY2UsXG4gICAgICAgICAgICBkZXN0cm95ID0gX21lc3NhZ2VJbnN0YW5jZTIuZGVzdHJveTtcbiAgICAgICAgZGVzdHJveSgpO1xuICAgICAgICBtZXNzYWdlSW5zdGFuY2UgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbmV4cG9ydCBmdW5jdGlvbiBhdHRhY2hUeXBlQXBpKG9yaWdpbmFsQXBpLCB0eXBlKSB7XG4gIG9yaWdpbmFsQXBpW3R5cGVdID0gZnVuY3Rpb24gKGNvbnRlbnQsIGR1cmF0aW9uLCBvbkNsb3NlKSB7XG4gICAgaWYgKGlzQXJnc1Byb3BzKGNvbnRlbnQpKSB7XG4gICAgICByZXR1cm4gb3JpZ2luYWxBcGkub3BlbihfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgY29udGVudCksIHtcbiAgICAgICAgdHlwZTogdHlwZVxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZHVyYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9uQ2xvc2UgPSBkdXJhdGlvbjtcbiAgICAgIGR1cmF0aW9uID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBvcmlnaW5hbEFwaS5vcGVuKHtcbiAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgb25DbG9zZTogb25DbG9zZVxuICAgIH0pO1xuICB9O1xufVxuWydzdWNjZXNzJywgJ2luZm8nLCAnd2FybmluZycsICdlcnJvcicsICdsb2FkaW5nJ10uZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICByZXR1cm4gYXR0YWNoVHlwZUFwaShhcGksIHR5cGUpO1xufSk7XG5hcGkud2FybiA9IGFwaS53YXJuaW5nO1xuYXBpLnVzZU1lc3NhZ2UgPSBjcmVhdGVVc2VNZXNzYWdlKGdldFJDTm90aWZpY2F0aW9uSW5zdGFuY2UsIGdldFJDTm90aWNlUHJvcHMpO1xuLyoqIEBwcml2YXRlIHRlc3Qgb25seSBmdW5jdGlvbi4gTm90IHdvcmsgb24gcHJvZHVjdGlvbiAqL1xuXG5leHBvcnQgdmFyIGdldEluc3RhbmNlID0gZnVuY3Rpb24gZ2V0SW5zdGFuY2UoKSB7XG4gIHJldHVybiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnID8gbWVzc2FnZUluc3RhbmNlIDogbnVsbDtcbn07XG5leHBvcnQgZGVmYXVsdCBhcGk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1c2VSQ05vdGlmaWNhdGlvbiBmcm9tIFwicmMtbm90aWZpY2F0aW9uL2VzL3VzZU5vdGlmaWNhdGlvblwiO1xuaW1wb3J0IHsgQ29uZmlnQ29uc3VtZXIgfSBmcm9tICcuLi8uLi9jb25maWctcHJvdmlkZXInO1xuaW1wb3J0IHsgYXR0YWNoVHlwZUFwaSwgZ2V0S2V5VGhlbkluY3JlYXNlS2V5IH0gZnJvbSAnLi4nO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVXNlTWVzc2FnZShnZXRSY05vdGlmaWNhdGlvbkluc3RhbmNlLCBnZXRSQ05vdGljZVByb3BzKSB7XG4gIHZhciB1c2VNZXNzYWdlID0gZnVuY3Rpb24gdXNlTWVzc2FnZSgpIHtcbiAgICAvLyBXZSBjYW4gb25seSBnZXQgY29udGVudCBieSByZW5kZXJcbiAgICB2YXIgZ2V0UHJlZml4Q2xzOyAvLyBXZSBjcmVhdGUgYSBwcm94eSB0byBoYW5kbGUgZGVsYXkgY3JlYXRlZCBpbnN0YW5jZVxuXG4gICAgdmFyIGlubmVySW5zdGFuY2UgPSBudWxsO1xuICAgIHZhciBwcm94eSA9IHtcbiAgICAgIGFkZDogZnVuY3Rpb24gYWRkKG5vdGljZVByb3BzLCBob2xkZXJDYWxsYmFjaykge1xuICAgICAgICBpbm5lckluc3RhbmNlID09PSBudWxsIHx8IGlubmVySW5zdGFuY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGlubmVySW5zdGFuY2UuY29tcG9uZW50LmFkZChub3RpY2VQcm9wcywgaG9sZGVyQ2FsbGJhY2spO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgX3VzZVJDTm90aWZpY2F0aW9uID0gdXNlUkNOb3RpZmljYXRpb24ocHJveHkpLFxuICAgICAgICBfdXNlUkNOb3RpZmljYXRpb24yID0gX3NsaWNlZFRvQXJyYXkoX3VzZVJDTm90aWZpY2F0aW9uLCAyKSxcbiAgICAgICAgaG9va05vdGlmeSA9IF91c2VSQ05vdGlmaWNhdGlvbjJbMF0sXG4gICAgICAgIGhvbGRlciA9IF91c2VSQ05vdGlmaWNhdGlvbjJbMV07XG5cbiAgICBmdW5jdGlvbiBub3RpZnkoYXJncykge1xuICAgICAgdmFyIGN1c3RvbWl6ZVByZWZpeENscyA9IGFyZ3MucHJlZml4Q2xzO1xuICAgICAgdmFyIG1lcmdlZFByZWZpeENscyA9IGdldFByZWZpeENscygnbWVzc2FnZScsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gICAgICB2YXIgdGFyZ2V0ID0gYXJncy5rZXkgfHwgZ2V0S2V5VGhlbkluY3JlYXNlS2V5KCk7XG4gICAgICB2YXIgY2xvc2VQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2soKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBhcmdzLm9uQ2xvc2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGFyZ3Mub25DbG9zZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiByZXNvbHZlKHRydWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGdldFJjTm90aWZpY2F0aW9uSW5zdGFuY2UoX2V4dGVuZHMoX2V4dGVuZHMoe30sIGFyZ3MpLCB7XG4gICAgICAgICAgcHJlZml4Q2xzOiBtZXJnZWRQcmVmaXhDbHNcbiAgICAgICAgfSksIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgdmFyIHByZWZpeENscyA9IF9yZWYucHJlZml4Q2xzLFxuICAgICAgICAgICAgICBpbnN0YW5jZSA9IF9yZWYuaW5zdGFuY2U7XG4gICAgICAgICAgaW5uZXJJbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICAgIGhvb2tOb3RpZnkoZ2V0UkNOb3RpY2VQcm9wcyhfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgYXJncyksIHtcbiAgICAgICAgICAgIGtleTogdGFyZ2V0LFxuICAgICAgICAgICAgb25DbG9zZTogY2FsbGJhY2tcbiAgICAgICAgICB9KSwgcHJlZml4Q2xzKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciByZXN1bHQgPSBmdW5jdGlvbiByZXN1bHQoKSB7XG4gICAgICAgIGlmIChpbm5lckluc3RhbmNlKSB7XG4gICAgICAgICAgaW5uZXJJbnN0YW5jZS5yZW1vdmVOb3RpY2UodGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmVzdWx0LnRoZW4gPSBmdW5jdGlvbiAoZmlsbGVkLCByZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gY2xvc2VQcm9taXNlLnRoZW4oZmlsbGVkLCByZWplY3RlZCk7XG4gICAgICB9O1xuXG4gICAgICByZXN1bHQucHJvbWlzZSA9IGNsb3NlUHJvbWlzZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSAvLyBGaWxsIGZ1bmN0aW9uc1xuXG5cbiAgICB2YXIgaG9va0FwaVJlZiA9IFJlYWN0LnVzZVJlZih7fSk7XG4gICAgaG9va0FwaVJlZi5jdXJyZW50Lm9wZW4gPSBub3RpZnk7XG4gICAgWydzdWNjZXNzJywgJ2luZm8nLCAnd2FybmluZycsICdlcnJvcicsICdsb2FkaW5nJ10uZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgcmV0dXJuIGF0dGFjaFR5cGVBcGkoaG9va0FwaVJlZi5jdXJyZW50LCB0eXBlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2hvb2tBcGlSZWYuY3VycmVudCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29uZmlnQ29uc3VtZXIsIHtcbiAgICAgIGtleTogXCJob2xkZXJcIlxuICAgIH0sIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICBnZXRQcmVmaXhDbHMgPSBjb250ZXh0LmdldFByZWZpeENscztcbiAgICAgIHJldHVybiBob2xkZXI7XG4gICAgfSldO1xuICB9O1xuXG4gIHJldHVybiB1c2VNZXNzYWdlO1xufSIsIi8vIFRoaXMgaWNvbiBmaWxlIGlzIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LlxudmFyIENsb3NlT3V0bGluZWQgPSB7IFwiaWNvblwiOiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInZpZXdCb3hcIjogXCI2NCA2NCA4OTYgODk2XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTU2My44IDUxMmwyNjIuNS0zMTIuOWM0LjQtNS4yLjctMTMuMS02LjEtMTMuMWgtNzkuOGMtNC43IDAtOS4yIDIuMS0xMi4zIDUuN0w1MTEuNiA0NDkuOCAyOTUuMSAxOTEuN2MtMy0zLjYtNy41LTUuNy0xMi4zLTUuN0gyMDNjLTYuOCAwLTEwLjUgNy45LTYuMSAxMy4xTDQ1OS40IDUxMiAxOTYuOSA4MjQuOUE3Ljk1IDcuOTUgMCAwMDIwMyA4MzhoNzkuOGM0LjcgMCA5LjItMi4xIDEyLjMtNS43bDIxNi41LTI1OC4xIDIxNi41IDI1OC4xYzMgMy42IDcuNSA1LjcgMTIuMyA1LjdoNzkuOGM2LjggMCAxMC41LTcuOSA2LjEtMTMuMUw1NjMuOCA1MTJ6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJjbG9zZVwiLCBcInRoZW1lXCI6IFwib3V0bGluZWRcIiB9O1xuZXhwb3J0IGRlZmF1bHQgQ2xvc2VPdXRsaW5lZDtcbiIsIi8vIEdFTkVSQVRFIEJZIC4vc2NyaXB0cy9nZW5lcmF0ZS50c1xuLy8gRE9OIE5PVCBFRElUIElUIE1BTlVBTExZXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQ2xvc2VPdXRsaW5lZFN2ZyBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9DbG9zZU91dGxpbmVkXCI7XG5pbXBvcnQgQW50ZEljb24gZnJvbSAnLi4vY29tcG9uZW50cy9BbnRkSWNvbic7XG5cbnZhciBDbG9zZU91dGxpbmVkID0gZnVuY3Rpb24gQ2xvc2VPdXRsaW5lZChwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBbnRkSWNvbiwgT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICByZWY6IHJlZixcbiAgICBpY29uOiBDbG9zZU91dGxpbmVkU3ZnXG4gIH0pKTtcbn07XG5cbkNsb3NlT3V0bGluZWQuZGlzcGxheU5hbWUgPSAnQ2xvc2VPdXRsaW5lZCc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihDbG9zZU91dGxpbmVkKTsiLCIvLyBUaGlzIGljb24gZmlsZSBpcyBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS5cbnZhciBDaGVja0NpcmNsZU91dGxpbmVkID0geyBcImljb25cIjogeyBcInRhZ1wiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ2aWV3Qm94XCI6IFwiNjQgNjQgODk2IDg5NlwiLCBcImZvY3VzYWJsZVwiOiBcImZhbHNlXCIgfSwgXCJjaGlsZHJlblwiOiBbeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk02OTkgMzUzaC00Ni45Yy0xMC4yIDAtMTkuOSA0LjktMjUuOSAxMy4zTDQ2OSA1ODQuM2wtNzEuMi05OC44Yy02LTguMy0xNS42LTEzLjMtMjUuOS0xMy4zSDMyNWMtNi41IDAtMTAuMyA3LjQtNi41IDEyLjdsMTI0LjYgMTcyLjhhMzEuOCAzMS44IDAgMDA1MS43IDBsMjEwLjYtMjkyYzMuOS01LjMuMS0xMi43LTYuNC0xMi43elwiIH0gfSwgeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk01MTIgNjRDMjY0LjYgNjQgNjQgMjY0LjYgNjQgNTEyczIwMC42IDQ0OCA0NDggNDQ4IDQ0OC0yMDAuNiA0NDgtNDQ4Uzc1OS40IDY0IDUxMiA2NHptMCA4MjBjLTIwNS40IDAtMzcyLTE2Ni42LTM3Mi0zNzJzMTY2LjYtMzcyIDM3Mi0zNzIgMzcyIDE2Ni42IDM3MiAzNzItMTY2LjYgMzcyLTM3MiAzNzJ6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJjaGVjay1jaXJjbGVcIiwgXCJ0aGVtZVwiOiBcIm91dGxpbmVkXCIgfTtcbmV4cG9ydCBkZWZhdWx0IENoZWNrQ2lyY2xlT3V0bGluZWQ7XG4iLCIvLyBHRU5FUkFURSBCWSAuL3NjcmlwdHMvZ2VuZXJhdGUudHNcbi8vIERPTiBOT1QgRURJVCBJVCBNQU5VQUxMWVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IENoZWNrQ2lyY2xlT3V0bGluZWRTdmcgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vQ2hlY2tDaXJjbGVPdXRsaW5lZFwiO1xuaW1wb3J0IEFudGRJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvQW50ZEljb24nO1xuXG52YXIgQ2hlY2tDaXJjbGVPdXRsaW5lZCA9IGZ1bmN0aW9uIENoZWNrQ2lyY2xlT3V0bGluZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7XG4gICAgcmVmOiByZWYsXG4gICAgaWNvbjogQ2hlY2tDaXJjbGVPdXRsaW5lZFN2Z1xuICB9KSk7XG59O1xuXG5DaGVja0NpcmNsZU91dGxpbmVkLmRpc3BsYXlOYW1lID0gJ0NoZWNrQ2lyY2xlT3V0bGluZWQnO1xuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoQ2hlY2tDaXJjbGVPdXRsaW5lZCk7IiwiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgQ2xvc2VDaXJjbGVPdXRsaW5lZCA9IHsgXCJpY29uXCI6IHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwidmlld0JveFwiOiBcIjY0IDY0IDg5NiA4OTZcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNjg1LjQgMzU0LjhjMC00LjQtMy42LTgtOC04bC02NiAuM0w1MTIgNDY1LjZsLTk5LjMtMTE4LjQtNjYuMS0uM2MtNC40IDAtOCAzLjUtOCA4IDAgMS45LjcgMy43IDEuOSA1LjJsMTMwLjEgMTU1TDM0MC41IDY3MGE4LjMyIDguMzIgMCAwMC0xLjkgNS4yYzAgNC40IDMuNiA4IDggOGw2Ni4xLS4zTDUxMiA1NjQuNGw5OS4zIDExOC40IDY2IC4zYzQuNCAwIDgtMy41IDgtOCAwLTEuOS0uNy0zLjctMS45LTUuMkw1NTMuNSA1MTVsMTMwLjEtMTU1YzEuMi0xLjQgMS44LTMuMyAxLjgtNS4yelwiIH0gfSwgeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk01MTIgNjVDMjY0LjYgNjUgNjQgMjY1LjYgNjQgNTEzczIwMC42IDQ0OCA0NDggNDQ4IDQ0OC0yMDAuNiA0NDgtNDQ4Uzc1OS40IDY1IDUxMiA2NXptMCA4MjBjLTIwNS40IDAtMzcyLTE2Ni42LTM3Mi0zNzJzMTY2LjYtMzcyIDM3Mi0zNzIgMzcyIDE2Ni42IDM3MiAzNzItMTY2LjYgMzcyLTM3MiAzNzJ6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJjbG9zZS1jaXJjbGVcIiwgXCJ0aGVtZVwiOiBcIm91dGxpbmVkXCIgfTtcbmV4cG9ydCBkZWZhdWx0IENsb3NlQ2lyY2xlT3V0bGluZWQ7XG4iLCIvLyBHRU5FUkFURSBCWSAuL3NjcmlwdHMvZ2VuZXJhdGUudHNcbi8vIERPTiBOT1QgRURJVCBJVCBNQU5VQUxMWVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IENsb3NlQ2lyY2xlT3V0bGluZWRTdmcgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vQ2xvc2VDaXJjbGVPdXRsaW5lZFwiO1xuaW1wb3J0IEFudGRJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvQW50ZEljb24nO1xuXG52YXIgQ2xvc2VDaXJjbGVPdXRsaW5lZCA9IGZ1bmN0aW9uIENsb3NlQ2lyY2xlT3V0bGluZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7XG4gICAgcmVmOiByZWYsXG4gICAgaWNvbjogQ2xvc2VDaXJjbGVPdXRsaW5lZFN2Z1xuICB9KSk7XG59O1xuXG5DbG9zZUNpcmNsZU91dGxpbmVkLmRpc3BsYXlOYW1lID0gJ0Nsb3NlQ2lyY2xlT3V0bGluZWQnO1xuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoQ2xvc2VDaXJjbGVPdXRsaW5lZCk7IiwiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZCA9IHsgXCJpY29uXCI6IHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwidmlld0JveFwiOiBcIjY0IDY0IDg5NiA4OTZcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNTEyIDY0QzI2NC42IDY0IDY0IDI2NC42IDY0IDUxMnMyMDAuNiA0NDggNDQ4IDQ0OCA0NDgtMjAwLjYgNDQ4LTQ0OFM3NTkuNCA2NCA1MTIgNjR6bTAgODIwYy0yMDUuNCAwLTM3Mi0xNjYuNi0zNzItMzcyczE2Ni42LTM3MiAzNzItMzcyIDM3MiAxNjYuNiAzNzIgMzcyLTE2Ni42IDM3Mi0zNzIgMzcyelwiIH0gfSwgeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk00NjQgNjg4YTQ4IDQ4IDAgMTA5NiAwIDQ4IDQ4IDAgMTAtOTYgMHptMjQtMTEyaDQ4YzQuNCAwIDgtMy42IDgtOFYyOTZjMC00LjQtMy42LTgtOC04aC00OGMtNC40IDAtOCAzLjYtOCA4djI3MmMwIDQuNCAzLjYgOCA4IDh6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJleGNsYW1hdGlvbi1jaXJjbGVcIiwgXCJ0aGVtZVwiOiBcIm91dGxpbmVkXCIgfTtcbmV4cG9ydCBkZWZhdWx0IEV4Y2xhbWF0aW9uQ2lyY2xlT3V0bGluZWQ7XG4iLCIvLyBHRU5FUkFURSBCWSAuL3NjcmlwdHMvZ2VuZXJhdGUudHNcbi8vIERPTiBOT1QgRURJVCBJVCBNQU5VQUxMWVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEV4Y2xhbWF0aW9uQ2lyY2xlT3V0bGluZWRTdmcgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZFwiO1xuaW1wb3J0IEFudGRJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvQW50ZEljb24nO1xuXG52YXIgRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZCA9IGZ1bmN0aW9uIEV4Y2xhbWF0aW9uQ2lyY2xlT3V0bGluZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7XG4gICAgcmVmOiByZWYsXG4gICAgaWNvbjogRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZFN2Z1xuICB9KSk7XG59O1xuXG5FeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkLmRpc3BsYXlOYW1lID0gJ0V4Y2xhbWF0aW9uQ2lyY2xlT3V0bGluZWQnO1xuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZCk7IiwiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgSW5mb0NpcmNsZU91dGxpbmVkID0geyBcImljb25cIjogeyBcInRhZ1wiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ2aWV3Qm94XCI6IFwiNjQgNjQgODk2IDg5NlwiLCBcImZvY3VzYWJsZVwiOiBcImZhbHNlXCIgfSwgXCJjaGlsZHJlblwiOiBbeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk01MTIgNjRDMjY0LjYgNjQgNjQgMjY0LjYgNjQgNTEyczIwMC42IDQ0OCA0NDggNDQ4IDQ0OC0yMDAuNiA0NDgtNDQ4Uzc1OS40IDY0IDUxMiA2NHptMCA4MjBjLTIwNS40IDAtMzcyLTE2Ni42LTM3Mi0zNzJzMTY2LjYtMzcyIDM3Mi0zNzIgMzcyIDE2Ni42IDM3MiAzNzItMTY2LjYgMzcyLTM3MiAzNzJ6XCIgfSB9LCB7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTQ2NCAzMzZhNDggNDggMCAxMDk2IDAgNDggNDggMCAxMC05NiAwem03MiAxMTJoLTQ4Yy00LjQgMC04IDMuNi04IDh2MjcyYzAgNC40IDMuNiA4IDggOGg0OGM0LjQgMCA4LTMuNiA4LThWNDU2YzAtNC40LTMuNi04LTgtOHpcIiB9IH1dIH0sIFwibmFtZVwiOiBcImluZm8tY2lyY2xlXCIsIFwidGhlbWVcIjogXCJvdXRsaW5lZFwiIH07XG5leHBvcnQgZGVmYXVsdCBJbmZvQ2lyY2xlT3V0bGluZWQ7XG4iLCIvLyBHRU5FUkFURSBCWSAuL3NjcmlwdHMvZ2VuZXJhdGUudHNcbi8vIERPTiBOT1QgRURJVCBJVCBNQU5VQUxMWVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEluZm9DaXJjbGVPdXRsaW5lZFN2ZyBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9JbmZvQ2lyY2xlT3V0bGluZWRcIjtcbmltcG9ydCBBbnRkSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL0FudGRJY29uJztcblxudmFyIEluZm9DaXJjbGVPdXRsaW5lZCA9IGZ1bmN0aW9uIEluZm9DaXJjbGVPdXRsaW5lZChwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBbnRkSWNvbiwgT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICByZWY6IHJlZixcbiAgICBpY29uOiBJbmZvQ2lyY2xlT3V0bGluZWRTdmdcbiAgfSkpO1xufTtcblxuSW5mb0NpcmNsZU91dGxpbmVkLmRpc3BsYXlOYW1lID0gJ0luZm9DaXJjbGVPdXRsaW5lZCc7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihJbmZvQ2lyY2xlT3V0bGluZWQpOyIsImltcG9ydCBfcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuXG52YXIgX19hd2FpdGVyID0gdGhpcyAmJiB0aGlzLl9fYXdhaXRlciB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHtcbiAgICAgIHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpO1xuICAgIH1cblxuICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgfSk7XG59O1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgTm90aWZpY2F0aW9uIGZyb20gJ3JjLW5vdGlmaWNhdGlvbic7XG5pbXBvcnQgQ2xvc2VPdXRsaW5lZCBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvQ2xvc2VPdXRsaW5lZFwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgQ2hlY2tDaXJjbGVPdXRsaW5lZCBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvQ2hlY2tDaXJjbGVPdXRsaW5lZFwiO1xuaW1wb3J0IENsb3NlQ2lyY2xlT3V0bGluZWQgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0Nsb3NlQ2lyY2xlT3V0bGluZWRcIjtcbmltcG9ydCBFeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9FeGNsYW1hdGlvbkNpcmNsZU91dGxpbmVkXCI7XG5pbXBvcnQgSW5mb0NpcmNsZU91dGxpbmVkIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9JbmZvQ2lyY2xlT3V0bGluZWRcIjtcbmltcG9ydCBjcmVhdGVVc2VOb3RpZmljYXRpb24gZnJvbSAnLi9ob29rcy91c2VOb3RpZmljYXRpb24nO1xudmFyIG5vdGlmaWNhdGlvbkluc3RhbmNlID0ge307XG52YXIgZGVmYXVsdER1cmF0aW9uID0gNC41O1xudmFyIGRlZmF1bHRUb3AgPSAyNDtcbnZhciBkZWZhdWx0Qm90dG9tID0gMjQ7XG52YXIgZGVmYXVsdFByZWZpeENscyA9ICdhbnQtbm90aWZpY2F0aW9uJztcbnZhciBkZWZhdWx0UGxhY2VtZW50ID0gJ3RvcFJpZ2h0JztcbnZhciBkZWZhdWx0R2V0Q29udGFpbmVyO1xudmFyIGRlZmF1bHRDbG9zZUljb247XG52YXIgcnRsID0gZmFsc2U7XG5cbmZ1bmN0aW9uIHNldE5vdGlmaWNhdGlvbkNvbmZpZyhvcHRpb25zKSB7XG4gIHZhciBkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24sXG4gICAgICBwbGFjZW1lbnQgPSBvcHRpb25zLnBsYWNlbWVudCxcbiAgICAgIGJvdHRvbSA9IG9wdGlvbnMuYm90dG9tLFxuICAgICAgdG9wID0gb3B0aW9ucy50b3AsXG4gICAgICBnZXRDb250YWluZXIgPSBvcHRpb25zLmdldENvbnRhaW5lcixcbiAgICAgIGNsb3NlSWNvbiA9IG9wdGlvbnMuY2xvc2VJY29uLFxuICAgICAgcHJlZml4Q2xzID0gb3B0aW9ucy5wcmVmaXhDbHM7XG5cbiAgaWYgKHByZWZpeENscyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVmYXVsdFByZWZpeENscyA9IHByZWZpeENscztcbiAgfVxuXG4gIGlmIChkdXJhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVmYXVsdER1cmF0aW9uID0gZHVyYXRpb247XG4gIH1cblxuICBpZiAocGxhY2VtZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICBkZWZhdWx0UGxhY2VtZW50ID0gcGxhY2VtZW50O1xuICB9IGVsc2UgaWYgKG9wdGlvbnMucnRsKSB7XG4gICAgZGVmYXVsdFBsYWNlbWVudCA9ICd0b3BMZWZ0JztcbiAgfVxuXG4gIGlmIChib3R0b20gIT09IHVuZGVmaW5lZCkge1xuICAgIGRlZmF1bHRCb3R0b20gPSBib3R0b207XG4gIH1cblxuICBpZiAodG9wICE9PSB1bmRlZmluZWQpIHtcbiAgICBkZWZhdWx0VG9wID0gdG9wO1xuICB9XG5cbiAgaWYgKGdldENvbnRhaW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVmYXVsdEdldENvbnRhaW5lciA9IGdldENvbnRhaW5lcjtcbiAgfVxuXG4gIGlmIChjbG9zZUljb24gIT09IHVuZGVmaW5lZCkge1xuICAgIGRlZmF1bHRDbG9zZUljb24gPSBjbG9zZUljb247XG4gIH1cblxuICBpZiAob3B0aW9ucy5ydGwgIT09IHVuZGVmaW5lZCkge1xuICAgIHJ0bCA9IG9wdGlvbnMucnRsO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFBsYWNlbWVudFN0eWxlKHBsYWNlbWVudCkge1xuICB2YXIgdG9wID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBkZWZhdWx0VG9wO1xuICB2YXIgYm90dG9tID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBkZWZhdWx0Qm90dG9tO1xuICB2YXIgc3R5bGU7XG5cbiAgc3dpdGNoIChwbGFjZW1lbnQpIHtcbiAgICBjYXNlICd0b3BMZWZ0JzpcbiAgICAgIHN0eWxlID0ge1xuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgYm90dG9tOiAnYXV0bydcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3RvcFJpZ2h0JzpcbiAgICAgIHN0eWxlID0ge1xuICAgICAgICByaWdodDogMCxcbiAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgIGJvdHRvbTogJ2F1dG8nXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdib3R0b21MZWZ0JzpcbiAgICAgIHN0eWxlID0ge1xuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB0b3A6ICdhdXRvJyxcbiAgICAgICAgYm90dG9tOiBib3R0b21cbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBzdHlsZSA9IHtcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIHRvcDogJ2F1dG8nLFxuICAgICAgICBib3R0b206IGJvdHRvbVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBnZXROb3RpZmljYXRpb25JbnN0YW5jZShhcmdzLCBjYWxsYmFjaykge1xuICB2YXIgX2FyZ3MkcGxhY2VtZW50ID0gYXJncy5wbGFjZW1lbnQsXG4gICAgICBwbGFjZW1lbnQgPSBfYXJncyRwbGFjZW1lbnQgPT09IHZvaWQgMCA/IGRlZmF1bHRQbGFjZW1lbnQgOiBfYXJncyRwbGFjZW1lbnQsXG4gICAgICB0b3AgPSBhcmdzLnRvcCxcbiAgICAgIGJvdHRvbSA9IGFyZ3MuYm90dG9tLFxuICAgICAgX2FyZ3MkZ2V0Q29udGFpbmVyID0gYXJncy5nZXRDb250YWluZXIsXG4gICAgICBnZXRDb250YWluZXIgPSBfYXJncyRnZXRDb250YWluZXIgPT09IHZvaWQgMCA/IGRlZmF1bHRHZXRDb250YWluZXIgOiBfYXJncyRnZXRDb250YWluZXIsXG4gICAgICBfYXJncyRjbG9zZUljb24gPSBhcmdzLmNsb3NlSWNvbixcbiAgICAgIGNsb3NlSWNvbiA9IF9hcmdzJGNsb3NlSWNvbiA9PT0gdm9pZCAwID8gZGVmYXVsdENsb3NlSWNvbiA6IF9hcmdzJGNsb3NlSWNvbjtcbiAgdmFyIG91dGVyUHJlZml4Q2xzID0gYXJncy5wcmVmaXhDbHMgfHwgZGVmYXVsdFByZWZpeENscztcbiAgdmFyIHByZWZpeENscyA9IFwiXCIuY29uY2F0KG91dGVyUHJlZml4Q2xzLCBcIi1ub3RpY2VcIik7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIuY29uY2F0KG91dGVyUHJlZml4Q2xzLCBcIi1cIikuY29uY2F0KHBsYWNlbWVudCk7XG4gIHZhciBjYWNoZUluc3RhbmNlID0gbm90aWZpY2F0aW9uSW5zdGFuY2VbY2FjaGVLZXldO1xuXG4gIGlmIChjYWNoZUluc3RhbmNlKSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKGNhY2hlSW5zdGFuY2UpLnRoZW4oZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICBjYWxsYmFjayh7XG4gICAgICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2VcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjbG9zZUljb25Ub1JlbmRlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChvdXRlclByZWZpeENscywgXCItY2xvc2UteFwiKVxuICB9LCBjbG9zZUljb24gfHwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ2xvc2VPdXRsaW5lZCwge1xuICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQob3V0ZXJQcmVmaXhDbHMsIFwiLWNsb3NlLWljb25cIilcbiAgfSkpO1xuICB2YXIgbm90aWZpY2F0aW9uQ2xhc3MgPSBjbGFzc05hbWVzKFwiXCIuY29uY2F0KG91dGVyUHJlZml4Q2xzLCBcIi1cIikuY29uY2F0KHBsYWNlbWVudCksIF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCJcIi5jb25jYXQob3V0ZXJQcmVmaXhDbHMsIFwiLXJ0bFwiKSwgcnRsID09PSB0cnVlKSk7XG4gIG5vdGlmaWNhdGlvbkluc3RhbmNlW2NhY2hlS2V5XSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgTm90aWZpY2F0aW9uLm5ld0luc3RhbmNlKHtcbiAgICAgIHByZWZpeENsczogb3V0ZXJQcmVmaXhDbHMsXG4gICAgICBjbGFzc05hbWU6IG5vdGlmaWNhdGlvbkNsYXNzLFxuICAgICAgc3R5bGU6IGdldFBsYWNlbWVudFN0eWxlKHBsYWNlbWVudCwgdG9wLCBib3R0b20pLFxuICAgICAgZ2V0Q29udGFpbmVyOiBnZXRDb250YWluZXIsXG4gICAgICBjbG9zZUljb246IGNsb3NlSWNvblRvUmVuZGVyXG4gICAgfSwgZnVuY3Rpb24gKG5vdGlmaWNhdGlvbikge1xuICAgICAgcmVzb2x2ZShub3RpZmljYXRpb24pO1xuICAgICAgY2FsbGJhY2soe1xuICAgICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgICAgaW5zdGFuY2U6IG5vdGlmaWNhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG52YXIgdHlwZVRvSWNvbiA9IHtcbiAgc3VjY2VzczogQ2hlY2tDaXJjbGVPdXRsaW5lZCxcbiAgaW5mbzogSW5mb0NpcmNsZU91dGxpbmVkLFxuICBlcnJvcjogQ2xvc2VDaXJjbGVPdXRsaW5lZCxcbiAgd2FybmluZzogRXhjbGFtYXRpb25DaXJjbGVPdXRsaW5lZFxufTtcblxuZnVuY3Rpb24gZ2V0UkNOb3RpY2VQcm9wcyhhcmdzLCBwcmVmaXhDbHMpIHtcbiAgdmFyIGR1cmF0aW9uID0gYXJncy5kdXJhdGlvbiA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdER1cmF0aW9uIDogYXJncy5kdXJhdGlvbjtcbiAgdmFyIGljb25Ob2RlID0gbnVsbDtcblxuICBpZiAoYXJncy5pY29uKSB7XG4gICAgaWNvbk5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWljb25cIilcbiAgICB9LCBhcmdzLmljb24pO1xuICB9IGVsc2UgaWYgKGFyZ3MudHlwZSkge1xuICAgIGljb25Ob2RlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQodHlwZVRvSWNvblthcmdzLnR5cGVdIHx8IG51bGwsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pY29uIFwiKS5jb25jYXQocHJlZml4Q2xzLCBcIi1pY29uLVwiKS5jb25jYXQoYXJncy50eXBlKVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGF1dG9NYXJnaW5UYWcgPSAhYXJncy5kZXNjcmlwdGlvbiAmJiBpY29uTm9kZSA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLW1lc3NhZ2Utc2luZ2xlLWxpbmUtYXV0by1tYXJnaW5cIilcbiAgfSkgOiBudWxsO1xuICByZXR1cm4ge1xuICAgIGNvbnRlbnQ6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogaWNvbk5vZGUgPyBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXdpdGgtaWNvblwiKSA6ICcnLFxuICAgICAgcm9sZTogXCJhbGVydFwiXG4gICAgfSwgaWNvbk5vZGUsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1tZXNzYWdlXCIpXG4gICAgfSwgYXV0b01hcmdpblRhZywgYXJncy5tZXNzYWdlKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWRlc2NyaXB0aW9uXCIpXG4gICAgfSwgYXJncy5kZXNjcmlwdGlvbiksIGFyZ3MuYnRuID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1idG5cIilcbiAgICB9LCBhcmdzLmJ0bikgOiBudWxsKSxcbiAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgY2xvc2FibGU6IHRydWUsXG4gICAgb25DbG9zZTogYXJncy5vbkNsb3NlLFxuICAgIG9uQ2xpY2s6IGFyZ3Mub25DbGljayxcbiAgICBrZXk6IGFyZ3Mua2V5LFxuICAgIHN0eWxlOiBhcmdzLnN0eWxlIHx8IHt9LFxuICAgIGNsYXNzTmFtZTogYXJncy5jbGFzc05hbWVcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm90aWNlKGFyZ3MpIHtcbiAgZ2V0Tm90aWZpY2F0aW9uSW5zdGFuY2UoYXJncywgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgcHJlZml4Q2xzID0gX3JlZi5wcmVmaXhDbHMsXG4gICAgICAgIGluc3RhbmNlID0gX3JlZi5pbnN0YW5jZTtcbiAgICBpbnN0YW5jZS5ub3RpY2UoZ2V0UkNOb3RpY2VQcm9wcyhhcmdzLCBwcmVmaXhDbHMpKTtcbiAgfSk7XG59XG5cbnZhciBhcGkgPSB7XG4gIG9wZW46IG5vdGljZSxcbiAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKGtleSkge1xuICAgIE9iamVjdC5rZXlzKG5vdGlmaWNhdGlvbkluc3RhbmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChjYWNoZUtleSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShub3RpZmljYXRpb25JbnN0YW5jZVtjYWNoZUtleV0pLnRoZW4oZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgIGluc3RhbmNlLnJlbW92ZU5vdGljZShrZXkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG4gIGNvbmZpZzogc2V0Tm90aWZpY2F0aW9uQ29uZmlnLFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIE9iamVjdC5rZXlzKG5vdGlmaWNhdGlvbkluc3RhbmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChjYWNoZUtleSkge1xuICAgICAgUHJvbWlzZS5yZXNvbHZlKG5vdGlmaWNhdGlvbkluc3RhbmNlW2NhY2hlS2V5XSkudGhlbihmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgaW5zdGFuY2UuZGVzdHJveSgpO1xuICAgICAgfSk7XG4gICAgICBkZWxldGUgbm90aWZpY2F0aW9uSW5zdGFuY2VbY2FjaGVLZXldOyAvLyBsZ3RtW2pzL21pc3NpbmctYXdhaXRdXG4gICAgfSk7XG4gIH1cbn07XG5bJ3N1Y2Nlc3MnLCAnaW5mbycsICd3YXJuaW5nJywgJ2Vycm9yJ10uZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICBhcGlbdHlwZV0gPSBmdW5jdGlvbiAoYXJncykge1xuICAgIHJldHVybiBhcGkub3BlbihfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgYXJncyksIHtcbiAgICAgIHR5cGU6IHR5cGVcbiAgICB9KSk7XG4gIH07XG59KTtcbmFwaS53YXJuID0gYXBpLndhcm5pbmc7XG5hcGkudXNlTm90aWZpY2F0aW9uID0gY3JlYXRlVXNlTm90aWZpY2F0aW9uKGdldE5vdGlmaWNhdGlvbkluc3RhbmNlLCBnZXRSQ05vdGljZVByb3BzKTtcbi8qKiBAcHJpdmF0ZSB0ZXN0IG9ubHkgZnVuY3Rpb24uIE5vdCB3b3JrIG9uIHByb2R1Y3Rpb24gKi9cblxuZXhwb3J0IHZhciBnZXRJbnN0YW5jZSA9IGZ1bmN0aW9uIGdldEluc3RhbmNlKGNhY2hlS2V5KSB7XG4gIHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkge1xuICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCcgPyBub3RpZmljYXRpb25JbnN0YW5jZVtjYWNoZUtleV0gOiBudWxsKTtcblxuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgX2NhbGxlZSk7XG4gIH0pKTtcbn07XG5leHBvcnQgZGVmYXVsdCBhcGk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1c2VSQ05vdGlmaWNhdGlvbiBmcm9tIFwicmMtbm90aWZpY2F0aW9uL2VzL3VzZU5vdGlmaWNhdGlvblwiO1xuaW1wb3J0IHsgQ29uZmlnQ29uc3VtZXIgfSBmcm9tICcuLi8uLi9jb25maWctcHJvdmlkZXInO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVXNlTm90aWZpY2F0aW9uKGdldE5vdGlmaWNhdGlvbkluc3RhbmNlLCBnZXRSQ05vdGljZVByb3BzKSB7XG4gIHZhciB1c2VOb3RpZmljYXRpb24gPSBmdW5jdGlvbiB1c2VOb3RpZmljYXRpb24oKSB7XG4gICAgLy8gV2UgY2FuIG9ubHkgZ2V0IGNvbnRlbnQgYnkgcmVuZGVyXG4gICAgdmFyIGdldFByZWZpeENsczsgLy8gV2UgY3JlYXRlIGEgcHJveHkgdG8gaGFuZGxlIGRlbGF5IGNyZWF0ZWQgaW5zdGFuY2VcblxuICAgIHZhciBpbm5lckluc3RhbmNlID0gbnVsbDtcbiAgICB2YXIgcHJveHkgPSB7XG4gICAgICBhZGQ6IGZ1bmN0aW9uIGFkZChub3RpY2VQcm9wcywgaG9sZGVyQ2FsbGJhY2spIHtcbiAgICAgICAgaW5uZXJJbnN0YW5jZSA9PT0gbnVsbCB8fCBpbm5lckluc3RhbmNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbm5lckluc3RhbmNlLmNvbXBvbmVudC5hZGQobm90aWNlUHJvcHMsIGhvbGRlckNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIF91c2VSQ05vdGlmaWNhdGlvbiA9IHVzZVJDTm90aWZpY2F0aW9uKHByb3h5KSxcbiAgICAgICAgX3VzZVJDTm90aWZpY2F0aW9uMiA9IF9zbGljZWRUb0FycmF5KF91c2VSQ05vdGlmaWNhdGlvbiwgMiksXG4gICAgICAgIGhvb2tOb3RpZnkgPSBfdXNlUkNOb3RpZmljYXRpb24yWzBdLFxuICAgICAgICBob2xkZXIgPSBfdXNlUkNOb3RpZmljYXRpb24yWzFdO1xuXG4gICAgZnVuY3Rpb24gbm90aWZ5KGFyZ3MpIHtcbiAgICAgIHZhciBjdXN0b21pemVQcmVmaXhDbHMgPSBhcmdzLnByZWZpeENscztcbiAgICAgIHZhciBtZXJnZWRQcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ25vdGlmaWNhdGlvbicsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gICAgICBnZXROb3RpZmljYXRpb25JbnN0YW5jZShfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgYXJncyksIHtcbiAgICAgICAgcHJlZml4Q2xzOiBtZXJnZWRQcmVmaXhDbHNcbiAgICAgIH0pLCBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgcHJlZml4Q2xzID0gX3JlZi5wcmVmaXhDbHMsXG4gICAgICAgICAgICBpbnN0YW5jZSA9IF9yZWYuaW5zdGFuY2U7XG4gICAgICAgIGlubmVySW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgICAgaG9va05vdGlmeShnZXRSQ05vdGljZVByb3BzKGFyZ3MsIHByZWZpeENscykpO1xuICAgICAgfSk7XG4gICAgfSAvLyBGaWxsIGZ1bmN0aW9uc1xuXG5cbiAgICB2YXIgaG9va0FwaVJlZiA9IFJlYWN0LnVzZVJlZih7fSk7XG4gICAgaG9va0FwaVJlZi5jdXJyZW50Lm9wZW4gPSBub3RpZnk7XG4gICAgWydzdWNjZXNzJywgJ2luZm8nLCAnd2FybmluZycsICdlcnJvciddLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIGhvb2tBcGlSZWYuY3VycmVudFt0eXBlXSA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIHJldHVybiBob29rQXBpUmVmLmN1cnJlbnQub3BlbihfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgYXJncyksIHtcbiAgICAgICAgICB0eXBlOiB0eXBlXG4gICAgICAgIH0pKTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIFtob29rQXBpUmVmLmN1cnJlbnQsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbmZpZ0NvbnN1bWVyLCB7XG4gICAgICBrZXk6IFwiaG9sZGVyXCJcbiAgICB9LCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgZ2V0UHJlZml4Q2xzID0gY29udGV4dC5nZXRQcmVmaXhDbHM7XG4gICAgICByZXR1cm4gaG9sZGVyO1xuICAgIH0pXTtcbiAgfTtcblxuICByZXR1cm4gdXNlTm90aWZpY2F0aW9uO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuLy8gVE9ETzogcmVtb3ZlIHRoaXMgbGludFxuLy8gU0ZDIGhhcyBzcGVjaWZpZWQgYSBkaXNwbGF5TmFtZSwgYnV0IG5vdCB3b3JrZWQuXG5cbi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L2Rpc3BsYXktbmFtZSAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRm9ybVByb3ZpZGVyIGFzIFJjRm9ybVByb3ZpZGVyIH0gZnJvbSAncmMtZmllbGQtZm9ybSc7XG5pbXBvcnQgTG9jYWxlUHJvdmlkZXIsIHsgQU5UX01BUksgfSBmcm9tICcuLi9sb2NhbGUtcHJvdmlkZXInO1xuaW1wb3J0IExvY2FsZVJlY2VpdmVyIGZyb20gJy4uL2xvY2FsZS1wcm92aWRlci9Mb2NhbGVSZWNlaXZlcic7XG5pbXBvcnQgeyBDb25maWdDb25zdW1lciwgQ29uZmlnQ29udGV4dCB9IGZyb20gJy4vY29udGV4dCc7XG5pbXBvcnQgeyBTaXplQ29udGV4dFByb3ZpZGVyIH0gZnJvbSAnLi9TaXplQ29udGV4dCc7XG5pbXBvcnQgbWVzc2FnZSBmcm9tICcuLi9tZXNzYWdlJztcbmltcG9ydCBub3RpZmljYXRpb24gZnJvbSAnLi4vbm90aWZpY2F0aW9uJztcbmV4cG9ydCB7IENvbmZpZ0NvbnRleHQsIENvbmZpZ0NvbnN1bWVyIH07XG5leHBvcnQgdmFyIGNvbmZpZ0NvbnN1bWVyUHJvcHMgPSBbJ2dldFRhcmdldENvbnRhaW5lcicsICdnZXRQb3B1cENvbnRhaW5lcicsICdyb290UHJlZml4Q2xzJywgJ2dldFByZWZpeENscycsICdyZW5kZXJFbXB0eScsICdjc3AnLCAnYXV0b0luc2VydFNwYWNlSW5CdXR0b24nLCAnbG9jYWxlJywgJ3BhZ2VIZWFkZXInXTtcblxudmFyIENvbmZpZ1Byb3ZpZGVyID0gZnVuY3Rpb24gQ29uZmlnUHJvdmlkZXIocHJvcHMpIHtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocHJvcHMuZGlyZWN0aW9uKSB7XG4gICAgICBtZXNzYWdlLmNvbmZpZyh7XG4gICAgICAgIHJ0bDogcHJvcHMuZGlyZWN0aW9uID09PSAncnRsJ1xuICAgICAgfSk7XG4gICAgICBub3RpZmljYXRpb24uY29uZmlnKHtcbiAgICAgICAgcnRsOiBwcm9wcy5kaXJlY3Rpb24gPT09ICdydGwnXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtwcm9wcy5kaXJlY3Rpb25dKTtcblxuICB2YXIgZ2V0UHJlZml4Q2xzV3JhcHBlciA9IGZ1bmN0aW9uIGdldFByZWZpeENsc1dyYXBwZXIoY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc3VmZml4Q2xzLCBjdXN0b21pemVQcmVmaXhDbHMpIHtcbiAgICAgIHZhciBwcmVmaXhDbHMgPSBwcm9wcy5wcmVmaXhDbHM7XG4gICAgICBpZiAoY3VzdG9taXplUHJlZml4Q2xzKSByZXR1cm4gY3VzdG9taXplUHJlZml4Q2xzO1xuICAgICAgdmFyIG1lcmdlZFByZWZpeENscyA9IHByZWZpeENscyB8fCBjb250ZXh0LmdldFByZWZpeENscygnJyk7XG4gICAgICByZXR1cm4gc3VmZml4Q2xzID8gXCJcIi5jb25jYXQobWVyZ2VkUHJlZml4Q2xzLCBcIi1cIikuY29uY2F0KHN1ZmZpeENscykgOiBtZXJnZWRQcmVmaXhDbHM7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgcmVuZGVyUHJvdmlkZXIgPSBmdW5jdGlvbiByZW5kZXJQcm92aWRlcihjb250ZXh0LCBsZWdhY3lMb2NhbGUpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgZ2V0VGFyZ2V0Q29udGFpbmVyID0gcHJvcHMuZ2V0VGFyZ2V0Q29udGFpbmVyLFxuICAgICAgICBnZXRQb3B1cENvbnRhaW5lciA9IHByb3BzLmdldFBvcHVwQ29udGFpbmVyLFxuICAgICAgICByZW5kZXJFbXB0eSA9IHByb3BzLnJlbmRlckVtcHR5LFxuICAgICAgICBjc3AgPSBwcm9wcy5jc3AsXG4gICAgICAgIGF1dG9JbnNlcnRTcGFjZUluQnV0dG9uID0gcHJvcHMuYXV0b0luc2VydFNwYWNlSW5CdXR0b24sXG4gICAgICAgIGZvcm0gPSBwcm9wcy5mb3JtLFxuICAgICAgICBpbnB1dCA9IHByb3BzLmlucHV0LFxuICAgICAgICBsb2NhbGUgPSBwcm9wcy5sb2NhbGUsXG4gICAgICAgIHBhZ2VIZWFkZXIgPSBwcm9wcy5wYWdlSGVhZGVyLFxuICAgICAgICBjb21wb25lbnRTaXplID0gcHJvcHMuY29tcG9uZW50U2l6ZSxcbiAgICAgICAgZGlyZWN0aW9uID0gcHJvcHMuZGlyZWN0aW9uLFxuICAgICAgICBzcGFjZSA9IHByb3BzLnNwYWNlLFxuICAgICAgICB2aXJ0dWFsID0gcHJvcHMudmlydHVhbCxcbiAgICAgICAgZHJvcGRvd25NYXRjaFNlbGVjdFdpZHRoID0gcHJvcHMuZHJvcGRvd25NYXRjaFNlbGVjdFdpZHRoO1xuXG4gICAgdmFyIGNvbmZpZyA9IF9leHRlbmRzKF9leHRlbmRzKHt9LCBjb250ZXh0KSwge1xuICAgICAgZ2V0UHJlZml4Q2xzOiBnZXRQcmVmaXhDbHNXcmFwcGVyKGNvbnRleHQpLFxuICAgICAgY3NwOiBjc3AsXG4gICAgICBhdXRvSW5zZXJ0U3BhY2VJbkJ1dHRvbjogYXV0b0luc2VydFNwYWNlSW5CdXR0b24sXG4gICAgICBsb2NhbGU6IGxvY2FsZSB8fCBsZWdhY3lMb2NhbGUsXG4gICAgICBkaXJlY3Rpb246IGRpcmVjdGlvbixcbiAgICAgIHNwYWNlOiBzcGFjZSxcbiAgICAgIHZpcnR1YWw6IHZpcnR1YWwsXG4gICAgICBkcm9wZG93bk1hdGNoU2VsZWN0V2lkdGg6IGRyb3Bkb3duTWF0Y2hTZWxlY3RXaWR0aFxuICAgIH0pO1xuXG4gICAgaWYgKGdldFRhcmdldENvbnRhaW5lcikge1xuICAgICAgY29uZmlnLmdldFRhcmdldENvbnRhaW5lciA9IGdldFRhcmdldENvbnRhaW5lcjtcbiAgICB9XG5cbiAgICBpZiAoZ2V0UG9wdXBDb250YWluZXIpIHtcbiAgICAgIGNvbmZpZy5nZXRQb3B1cENvbnRhaW5lciA9IGdldFBvcHVwQ29udGFpbmVyO1xuICAgIH1cblxuICAgIGlmIChyZW5kZXJFbXB0eSkge1xuICAgICAgY29uZmlnLnJlbmRlckVtcHR5ID0gcmVuZGVyRW1wdHk7XG4gICAgfVxuXG4gICAgaWYgKHBhZ2VIZWFkZXIpIHtcbiAgICAgIGNvbmZpZy5wYWdlSGVhZGVyID0gcGFnZUhlYWRlcjtcbiAgICB9XG5cbiAgICBpZiAoaW5wdXQpIHtcbiAgICAgIGNvbmZpZy5pbnB1dCA9IGlucHV0O1xuICAgIH1cblxuICAgIGlmIChmb3JtKSB7XG4gICAgICBjb25maWcuZm9ybSA9IGZvcm07XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkTm9kZSA9IGNoaWxkcmVuOyAvLyBBZGRpdGlvbmFsIEZvcm0gcHJvdmlkZXJcblxuICAgIHZhciB2YWxpZGF0ZU1lc3NhZ2VzID0ge307XG5cbiAgICBpZiAobG9jYWxlICYmIGxvY2FsZS5Gb3JtICYmIGxvY2FsZS5Gb3JtLmRlZmF1bHRWYWxpZGF0ZU1lc3NhZ2VzKSB7XG4gICAgICB2YWxpZGF0ZU1lc3NhZ2VzID0gbG9jYWxlLkZvcm0uZGVmYXVsdFZhbGlkYXRlTWVzc2FnZXM7XG4gICAgfVxuXG4gICAgaWYgKGZvcm0gJiYgZm9ybS52YWxpZGF0ZU1lc3NhZ2VzKSB7XG4gICAgICB2YWxpZGF0ZU1lc3NhZ2VzID0gX2V4dGVuZHMoX2V4dGVuZHMoe30sIHZhbGlkYXRlTWVzc2FnZXMpLCBmb3JtLnZhbGlkYXRlTWVzc2FnZXMpO1xuICAgIH1cblxuICAgIGlmIChPYmplY3Qua2V5cyh2YWxpZGF0ZU1lc3NhZ2VzKS5sZW5ndGggPiAwKSB7XG4gICAgICBjaGlsZE5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSY0Zvcm1Qcm92aWRlciwge1xuICAgICAgICB2YWxpZGF0ZU1lc3NhZ2VzOiB2YWxpZGF0ZU1lc3NhZ2VzXG4gICAgICB9LCBjaGlsZHJlbik7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkcmVuV2l0aExvY2FsZSA9IGxvY2FsZSA9PT0gdW5kZWZpbmVkID8gY2hpbGROb2RlIDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTG9jYWxlUHJvdmlkZXIsIHtcbiAgICAgIGxvY2FsZTogbG9jYWxlIHx8IGxlZ2FjeUxvY2FsZSxcbiAgICAgIF9BTlRfTUFSS19fOiBBTlRfTUFSS1xuICAgIH0sIGNoaWxkTm9kZSk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFNpemVDb250ZXh0UHJvdmlkZXIsIHtcbiAgICAgIHNpemU6IGNvbXBvbmVudFNpemVcbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb25maWdDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY29uZmlnXG4gICAgfSwgY2hpbGRyZW5XaXRoTG9jYWxlKSk7XG4gIH07XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExvY2FsZVJlY2VpdmVyLCBudWxsLCBmdW5jdGlvbiAoXywgX18sIGxlZ2FjeUxvY2FsZSkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb25maWdDb25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZW5kZXJQcm92aWRlcihjb250ZXh0LCBsZWdhY3lMb2NhbGUpO1xuICAgIH0pO1xuICB9KTtcbn07XG4vKiogQHByaXZhdGUgaW50ZXJuYWwgdXNhZ2UuIGRvIG5vdCB1c2UgaW4geW91ciBwcm9kdWN0aW9uICovXG5cblxuQ29uZmlnUHJvdmlkZXIuQ29uZmlnQ29udGV4dCA9IENvbmZpZ0NvbnRleHQ7XG5leHBvcnQgZGVmYXVsdCBDb25maWdQcm92aWRlcjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUm9vdCBmcm9tICcuL3JvdXRlcnMvUm9vdCc7XG5pbXBvcnQgeyBDb25maWdQcm92aWRlciB9IGZyb20gJ2FudGQnO1xuaW1wb3J0IHpoX0NOIGZyb20gJ2FudGQvbGliL2xvY2FsZS1wcm92aWRlci96aF9DTic7XG5cblJlYWN0RE9NLnJlbmRlcihcbiAgICA8Q29uZmlnUHJvdmlkZXIgbG9jYWxlPXsgemhfQ04gfT5cbiAgICAgICAgPFJvb3QgLz5cbiAgICA8L0NvbmZpZ1Byb3ZpZGVyPixcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwJylcbik7Il0sInNvdXJjZVJvb3QiOiIifQ==